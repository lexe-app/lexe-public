// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.1.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::{
    for_generated::{
        byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt},
        transform_result_dco, Lifetimeable, Lockable,
    },
    Handler, IntoIntoDart,
};

use crate::{
    ffi::{app::*, gdrive::*, secret_store::*},
    *,
};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.7.1";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -1647135337;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__ffi__app__app_handle_close_channel_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_close_channel", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::api::CloseChannelRequest>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::close_channel(&api_that, api_req).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_create_client_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_create_client", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::api::CreateClientRequest>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::create_client(&api_that, api_req).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_create_invoice_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_create_invoice", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::api::CreateInvoiceRequest>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::create_invoice(&api_that, api_req).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_create_offer_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_create_offer", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::api::CreateOfferRequest>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::create_offer(&api_that, api_req).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_delete_payment_db_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_delete_payment_db", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move ||  {
                         let output_ok = crate::ffi::app::AppHandle::delete_payment_db(&api_that)?;   Ok(output_ok)
                    })())
                } })
}
fn wire__crate__ffi__app__app_handle_fiat_rates_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_fiat_rates", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::fiat_rates(&api_that).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_get_address_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_address", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::get_address(&api_that).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_get_finalized_not_junk_short_payment_by_scroll_idx_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_finalized_not_junk_short_payment_by_scroll_idx", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_scroll_idx = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::app::AppHandle::get_finalized_not_junk_short_payment_by_scroll_idx(&api_that, api_scroll_idx))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__app__app_handle_get_finalized_short_payment_by_scroll_idx_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_finalized_short_payment_by_scroll_idx", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_scroll_idx = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::app::AppHandle::get_finalized_short_payment_by_scroll_idx(&api_that, api_scroll_idx))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__app__app_handle_get_num_finalized_not_junk_payments_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_num_finalized_not_junk_payments", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::app::AppHandle::get_num_finalized_not_junk_payments(&api_that))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__app__app_handle_get_num_finalized_payments_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_num_finalized_payments", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::app::AppHandle::get_num_finalized_payments(&api_that))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__app__app_handle_get_num_payments_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_num_payments", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::app::AppHandle::get_num_payments(&api_that))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__app__app_handle_get_num_pending_not_junk_payments_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_num_pending_not_junk_payments", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::app::AppHandle::get_num_pending_not_junk_payments(&api_that))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__app__app_handle_get_num_pending_payments_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_num_pending_payments", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::app::AppHandle::get_num_pending_payments(&api_that))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__app__app_handle_get_payment_by_vec_idx_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_payment_by_vec_idx", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_vec_idx = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::app::AppHandle::get_payment_by_vec_idx(&api_that, api_vec_idx))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__app__app_handle_get_pending_not_junk_short_payment_by_scroll_idx_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_pending_not_junk_short_payment_by_scroll_idx", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_scroll_idx = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::app::AppHandle::get_pending_not_junk_short_payment_by_scroll_idx(&api_that, api_scroll_idx))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__app__app_handle_get_pending_short_payment_by_scroll_idx_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_pending_short_payment_by_scroll_idx", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_scroll_idx = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::app::AppHandle::get_pending_short_payment_by_scroll_idx(&api_that, api_scroll_idx))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__app__app_handle_get_short_payment_by_scroll_idx_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_short_payment_by_scroll_idx", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_scroll_idx = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::app::AppHandle::get_short_payment_by_scroll_idx(&api_that, api_scroll_idx))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__app__app_handle_get_vec_idx_by_payment_index_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_vec_idx_by_payment_index", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_payment_index = <crate::ffi::types::PaymentIndex>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::ffi::app::AppHandle::get_vec_idx_by_payment_index(&api_that, api_payment_index))?;   Ok(output_ok)
                    })())
                } })
}
fn wire__crate__ffi__app__app_handle_list_broadcasted_txs_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_list_broadcasted_txs", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::list_broadcasted_txs(&api_that).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_list_channels_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_list_channels", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::list_channels(&api_that).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_list_clients_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_list_clients", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::list_clients(&api_that).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_load_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_load", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_config = <crate::ffi::types::Config>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::load(api_config).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_node_info_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_node_info", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::node_info(&api_that).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_open_channel_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_open_channel", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::api::OpenChannelRequest>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::open_channel(&api_that, api_req).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_pay_invoice_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_pay_invoice", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::api::PayInvoiceRequest>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::pay_invoice(&api_that, api_req).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_pay_offer_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_pay_offer", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::api::PayOfferRequest>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::pay_offer(&api_that, api_req).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_pay_onchain_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_pay_onchain", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::api::PayOnchainRequest>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::pay_onchain(&api_that, api_req).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_preflight_close_channel_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_preflight_close_channel", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::api::CloseChannelRequest>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::preflight_close_channel(&api_that, api_req).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_preflight_open_channel_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_preflight_open_channel", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::api::PreflightOpenChannelRequest>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::preflight_open_channel(&api_that, api_req).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_preflight_pay_invoice_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_preflight_pay_invoice", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::api::PreflightPayInvoiceRequest>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::preflight_pay_invoice(&api_that, api_req).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_preflight_pay_offer_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_preflight_pay_offer", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::api::PreflightPayOfferRequest>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::preflight_pay_offer(&api_that, api_req).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_preflight_pay_onchain_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_preflight_pay_onchain", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::api::PreflightPayOnchainRequest>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::preflight_pay_onchain(&api_that, api_req).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_restore_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_restore", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_config = <crate::ffi::types::Config>::sse_decode(&mut deserializer);
let api_google_auth_code = <String>::sse_decode(&mut deserializer);
let api_root_seed = <crate::ffi::types::RootSeed>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::restore(api_config, api_google_auth_code, api_root_seed).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_settings_db_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_settings_db", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::app::AppHandle::settings_db(&api_that))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__app__app_handle_signup_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_signup", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_config = <crate::ffi::types::Config>::sse_decode(&mut deserializer);
let api_root_seed = <crate::ffi::types::RootSeed>::sse_decode(&mut deserializer);
let api_gdrive_signup_creds = <Option<crate::ffi::types::GDriveSignupCredentials>>::sse_decode(&mut deserializer);
let api_signup_code = <Option<String>>::sse_decode(&mut deserializer);
let api_partner = <Option<String>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::signup(api_config, api_root_seed, api_gdrive_signup_creds, api_signup_code, api_partner).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_sync_payments_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_sync_payments", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::sync_payments(&api_that).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_update_client_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_update_client", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::api::UpdateClientRequest>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::update_client(&api_that, api_req).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_update_payment_note_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_update_payment_note", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::api::UpdatePaymentNote>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::app::AppHandle::update_payment_note(&api_that, api_req).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__app__app_handle_user_info_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_user_info", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::app::AppHandle>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::app::AppHandle::user_info(&api_that))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__types__client_payment_id_gen_new_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "client_payment_id_gen_new", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::types::ClientPaymentId::gen_new())?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__debug__delete_latest_provisioned_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "delete_latest_provisioned", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_config = <crate::ffi::types::Config>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || {
                     let output_ok = crate::ffi::debug::delete_latest_provisioned(api_config)?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__debug__delete_secret_store_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "delete_secret_store", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_config = <crate::ffi::types::Config>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || {
                     let output_ok = crate::ffi::debug::delete_secret_store(api_config)?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__types__deploy_env_from_str_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "deploy_env_from_str", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_s = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || {
                     let output_ok = crate::ffi::types::DeployEnv::from_str(&api_s)?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__qr__encode_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "encode", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <Vec<u8>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move ||  {
                         let output_ok = crate::ffi::qr::encode(api_data)?;   Ok(output_ok)
                    })())
                } })
}
fn wire__crate__ffi__qr__encoded_pixels_per_side_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "encoded_pixels_per_side", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data_len_bytes = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || {
                     let output_ok = crate::ffi::qr::encoded_pixels_per_side(api_data_len_bytes)?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__gdrive__g_drive_client_dump_state_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "g_drive_client_dump_state", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::gdrive::GDriveClient>::sse_decode(&mut deserializer);
let api_deploy_env = <crate::ffi::types::DeployEnv>::sse_decode(&mut deserializer);
let api_network = <crate::ffi::types::Network>::sse_decode(&mut deserializer);
let api_use_sgx = <bool>::sse_decode(&mut deserializer);
let api_root_seed = <crate::ffi::types::RootSeed>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::gdrive::GDriveClient::dump_state(&api_that, api_deploy_env, api_network, api_use_sgx, api_root_seed).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__gdrive__g_drive_client_into_restore_client_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "g_drive_client_into_restore_client", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::gdrive::GDriveClient>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::gdrive::GDriveClient::into_restore_client(api_that))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__gdrive__g_drive_client_server_code_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "g_drive_client_server_code", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::gdrive::GDriveClient>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::gdrive::GDriveClient::server_code(&api_that))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__gdrive__g_drive_o_auth_2_flow_exchange_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "g_drive_o_auth_2_flow_exchange", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::gdrive::GDriveOAuth2Flow>::sse_decode(&mut deserializer);
let api_result_uri = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::gdrive::GDriveOAuth2Flow::exchange(&api_that, &api_result_uri).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__gdrive__g_drive_o_auth_2_flow_init_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "g_drive_o_auth_2_flow_init", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_client_id = <String>::sse_decode(&mut deserializer);
let api_server_client_id = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::gdrive::GDriveOAuth2Flow::init(api_client_id, &api_server_client_id))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__gdrive__g_drive_restore_candidate_try_decrypt_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "g_drive_restore_candidate_try_decrypt", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::gdrive::GDriveRestoreCandidate>::sse_decode(&mut deserializer);
let api_password = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || {
                     let output_ok = crate::ffi::gdrive::GDriveRestoreCandidate::try_decrypt(&api_that, &api_password)?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__gdrive__g_drive_restore_candidate_user_pk_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "g_drive_restore_candidate_user_pk", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::gdrive::GDriveRestoreCandidate>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::gdrive::GDriveRestoreCandidate::user_pk(&api_that))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__gdrive__g_drive_restore_client_find_restore_candidates_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "g_drive_restore_client_find_restore_candidates", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::gdrive::GDriveRestoreClient>::sse_decode(&mut deserializer);
let api_deploy_env = <crate::ffi::types::DeployEnv>::sse_decode(&mut deserializer);
let api_network = <crate::ffi::types::Network>::sse_decode(&mut deserializer);
let api_use_sgx = <bool>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::gdrive::GDriveRestoreClient::find_restore_candidates(&api_that, api_deploy_env, api_network, api_use_sgx).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__logger__init_rust_log_stream_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "init_rust_log_stream", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_rust_log_tx = <StreamSink<String,flutter_rust_bridge::for_generated::SseCodec>>::sse_decode(&mut deserializer);
let api_rust_log = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok({ crate::ffi::logger::init_rust_log_stream(api_rust_log_tx, api_rust_log); })?;   Ok(output_ok)
                    })())
                } })
}
fn wire__crate__ffi__form__is_mnemonic_word_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "is_mnemonic_word", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_word = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::form::is_mnemonic_word(&api_word))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__types__network_from_str_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "network_from_str", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_s = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || {
                     let output_ok = crate::ffi::types::Network::from_str(&api_s)?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__payment_uri__resolve_best_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "resolve_best", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_network = <crate::ffi::types::Network>::sse_decode(&mut deserializer);
let api_uri_str = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::payment_uri::resolve_best(api_network, api_uri_str).await?;   Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__types__root_seed_expose_secret_hex_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "root_seed_expose_secret_hex", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::types::RootSeed>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::types::RootSeed::expose_secret_hex(&api_that))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__types__root_seed_from_sys_rng_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "root_seed_from_sys_rng", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::types::RootSeed::from_sys_rng())?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__types__root_seed_seed_phrase_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "root_seed_seed_phrase", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::types::RootSeed>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::types::RootSeed::seed_phrase(&api_that))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__secret_store__secret_store_new_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "secret_store_new", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_config = <crate::ffi::types::Config>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::secret_store::SecretStore::new(api_config))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__secret_store__secret_store_read_root_seed_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "secret_store_read_root_seed", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::secret_store::SecretStore>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || {
                     let output_ok = crate::ffi::secret_store::SecretStore::read_root_seed(&api_that)?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__settings__settings_db_read_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "settings_db_read", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::settings::SettingsDb>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::settings::SettingsDb::read(&api_that))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__settings__settings_db_reset_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "settings_db_reset", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::settings::SettingsDb>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok({ crate::ffi::settings::SettingsDb::reset(&api_that); })?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__settings__settings_db_update_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "settings_db_update", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::settings::SettingsDb>::sse_decode(&mut deserializer);
let api_update = <crate::ffi::settings::Settings>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || {
                     let output_ok = crate::ffi::settings::SettingsDb::update(&api_that, api_update)?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__form__suggest_mnemonic_words_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "suggest_mnemonic_words", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_prefix = <String>::sse_decode(&mut deserializer);
let api_take = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::form::suggest_mnemonic_words(&api_prefix, api_take))?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__debug__unconditional_error_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "unconditional_error", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move ||  {
                         let output_ok = crate::ffi::debug::unconditional_error()?;   Ok(output_ok)
                    })())
                } })
}
fn wire__crate__ffi__debug__unconditional_panic_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "unconditional_panic", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok({ crate::ffi::debug::unconditional_panic(); })?;   Ok(output_ok)
                    })())
                } })
}
fn wire__crate__ffi__types__user_channel_id_gen_new_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "user_channel_id_gen_new", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::types::UserChannelId::gen_new())?;   Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__form__validate_password_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "validate_password", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_password = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::form::validate_password(api_password))?;   Ok(output_ok)
                })()) })
}

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!(
            "{}", inner
        );
    }
}

impl SseDecode for RustOpaqueNom<App> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<GDriveClientInner> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<GDriveRestoreCandidateRs> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<GDriveRestoreClientRs> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<RootSeedRs> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<SecretStoreRs> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<SettingsDbRs> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for StreamSink<String, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::ffi::app::AppHandle {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_inner = <RustOpaqueNom<App>>::sse_decode(deserializer);
        return crate::ffi::app::AppHandle { inner: var_inner };
    }
}

impl SseDecode for crate::ffi::types::AppUserInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_userPk = <String>::sse_decode(deserializer);
        let mut var_nodePk = <String>::sse_decode(deserializer);
        let mut var_nodePkProof = <String>::sse_decode(deserializer);
        return crate::ffi::types::AppUserInfo {
            user_pk: var_userPk,
            node_pk: var_nodePk,
            node_pk_proof: var_nodePkProof,
        };
    }
}

impl SseDecode for crate::ffi::api::Balance {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_totalSats = <u64>::sse_decode(deserializer);
        let mut var_onchainSats = <u64>::sse_decode(deserializer);
        let mut var_lightningSats = <u64>::sse_decode(deserializer);
        let mut var_lightningUsableSats = <u64>::sse_decode(deserializer);
        let mut var_lightningMaxSendableSats = <u64>::sse_decode(deserializer);
        return crate::ffi::api::Balance {
            total_sats: var_totalSats,
            onchain_sats: var_onchainSats,
            lightning_sats: var_lightningSats,
            lightning_usable_sats: var_lightningUsableSats,
            lightning_max_sendable_sats: var_lightningMaxSendableSats,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::ffi::types::ClientPaymentId {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_id = <[u8; 32]>::sse_decode(deserializer);
        return crate::ffi::types::ClientPaymentId { id: var_id };
    }
}

impl SseDecode for crate::ffi::api::CloseChannelRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_channelId = <String>::sse_decode(deserializer);
        return crate::ffi::api::CloseChannelRequest {
            channel_id: var_channelId,
        };
    }
}

impl SseDecode for crate::ffi::types::Config {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_deployEnv =
            <crate::ffi::types::DeployEnv>::sse_decode(deserializer);
        let mut var_network =
            <crate::ffi::types::Network>::sse_decode(deserializer);
        let mut var_gatewayUrl = <String>::sse_decode(deserializer);
        let mut var_useSgx = <bool>::sse_decode(deserializer);
        let mut var_baseAppDataDir = <String>::sse_decode(deserializer);
        let mut var_useMockSecretStore = <bool>::sse_decode(deserializer);
        let mut var_userAgent = <String>::sse_decode(deserializer);
        return crate::ffi::types::Config {
            deploy_env: var_deployEnv,
            network: var_network,
            gateway_url: var_gatewayUrl,
            use_sgx: var_useSgx,
            base_app_data_dir: var_baseAppDataDir,
            use_mock_secret_store: var_useMockSecretStore,
            user_agent: var_userAgent,
        };
    }
}

impl SseDecode for crate::ffi::types::ConfirmationPriority {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::ffi::types::ConfirmationPriority::High,
            1 => crate::ffi::types::ConfirmationPriority::Normal,
            2 => crate::ffi::types::ConfirmationPriority::Background,
            _ => unreachable!(
                "Invalid variant for ConfirmationPriority: {}",
                inner
            ),
        };
    }
}

impl SseDecode for crate::ffi::api::CreateClientRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_label = <Option<String>>::sse_decode(deserializer);
        let mut var_scope =
            <crate::ffi::types::Scope>::sse_decode(deserializer);
        return crate::ffi::api::CreateClientRequest {
            label: var_label,
            scope: var_scope,
        };
    }
}

impl SseDecode for crate::ffi::api::CreateClientResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_client =
            <crate::ffi::types::RevocableClient>::sse_decode(deserializer);
        let mut var_credentials = <String>::sse_decode(deserializer);
        return crate::ffi::api::CreateClientResponse {
            client: var_client,
            credentials: var_credentials,
        };
    }
}

impl SseDecode for crate::ffi::api::CreateInvoiceRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_expirySecs = <u32>::sse_decode(deserializer);
        let mut var_amountSats = <Option<u64>>::sse_decode(deserializer);
        let mut var_description = <Option<String>>::sse_decode(deserializer);
        return crate::ffi::api::CreateInvoiceRequest {
            expiry_secs: var_expirySecs,
            amount_sats: var_amountSats,
            description: var_description,
        };
    }
}

impl SseDecode for crate::ffi::api::CreateInvoiceResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_invoice =
            <crate::ffi::types::Invoice>::sse_decode(deserializer);
        return crate::ffi::api::CreateInvoiceResponse {
            invoice: var_invoice,
        };
    }
}

impl SseDecode for crate::ffi::api::CreateOfferRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_expirySecs = <Option<u32>>::sse_decode(deserializer);
        let mut var_amountSats = <Option<u64>>::sse_decode(deserializer);
        let mut var_description = <Option<String>>::sse_decode(deserializer);
        return crate::ffi::api::CreateOfferRequest {
            expiry_secs: var_expirySecs,
            amount_sats: var_amountSats,
            description: var_description,
        };
    }
}

impl SseDecode for crate::ffi::api::CreateOfferResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_offer =
            <crate::ffi::types::Offer>::sse_decode(deserializer);
        return crate::ffi::api::CreateOfferResponse { offer: var_offer };
    }
}

impl SseDecode for crate::ffi::types::DeployEnv {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::ffi::types::DeployEnv::Dev,
            1 => crate::ffi::types::DeployEnv::Staging,
            2 => crate::ffi::types::DeployEnv::Prod,
            _ => unreachable!("Invalid variant for DeployEnv: {}", inner),
        };
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::ffi::api::FeeEstimate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_amountSats = <u64>::sse_decode(deserializer);
        return crate::ffi::api::FeeEstimate {
            amount_sats: var_amountSats,
        };
    }
}

impl SseDecode for crate::ffi::api::FiatRate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_fiat = <String>::sse_decode(deserializer);
        let mut var_rate = <f64>::sse_decode(deserializer);
        return crate::ffi::api::FiatRate {
            fiat: var_fiat,
            rate: var_rate,
        };
    }
}

impl SseDecode for crate::ffi::api::FiatRates {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_timestampMs = <i64>::sse_decode(deserializer);
        let mut var_rates =
            <Vec<crate::ffi::api::FiatRate>>::sse_decode(deserializer);
        return crate::ffi::api::FiatRates {
            timestamp_ms: var_timestampMs,
            rates: var_rates,
        };
    }
}

impl SseDecode for crate::ffi::gdrive::GDriveClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_inner =
            <RustOpaqueNom<GDriveClientInner>>::sse_decode(deserializer);
        return crate::ffi::gdrive::GDriveClient { inner: var_inner };
    }
}

impl SseDecode for crate::ffi::gdrive::GDriveOAuth2Flow {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_clientId = <String>::sse_decode(deserializer);
        let mut var_codeVerifier = <String>::sse_decode(deserializer);
        let mut var_redirectUri = <String>::sse_decode(deserializer);
        let mut var_redirectUriScheme = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        return crate::ffi::gdrive::GDriveOAuth2Flow {
            client_id: var_clientId,
            code_verifier: var_codeVerifier,
            redirect_uri: var_redirectUri,
            redirect_uri_scheme: var_redirectUriScheme,
            url: var_url,
        };
    }
}

impl SseDecode for crate::ffi::gdrive::GDriveRestoreCandidate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_inner =
            <RustOpaqueNom<GDriveRestoreCandidateRs>>::sse_decode(deserializer);
        return crate::ffi::gdrive::GDriveRestoreCandidate { inner: var_inner };
    }
}

impl SseDecode for crate::ffi::gdrive::GDriveRestoreClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_inner =
            <RustOpaqueNom<GDriveRestoreClientRs>>::sse_decode(deserializer);
        return crate::ffi::gdrive::GDriveRestoreClient { inner: var_inner };
    }
}

impl SseDecode for crate::ffi::types::GDriveSignupCredentials {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_serverAuthCode = <String>::sse_decode(deserializer);
        let mut var_password = <String>::sse_decode(deserializer);
        return crate::ffi::types::GDriveSignupCredentials {
            server_auth_code: var_serverAuthCode,
            password: var_password,
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::ffi::types::Invoice {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_string = <String>::sse_decode(deserializer);
        let mut var_description = <Option<String>>::sse_decode(deserializer);
        let mut var_createdAt = <i64>::sse_decode(deserializer);
        let mut var_expiresAt = <i64>::sse_decode(deserializer);
        let mut var_amountSats = <Option<u64>>::sse_decode(deserializer);
        let mut var_payeePubkey = <String>::sse_decode(deserializer);
        return crate::ffi::types::Invoice {
            string: var_string,
            description: var_description,
            created_at: var_createdAt,
            expires_at: var_expiresAt,
            amount_sats: var_amountSats,
            payee_pubkey: var_payeePubkey,
        };
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::ffi::api::ListChannelsResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_channels =
            <Vec<crate::ffi::types::LxChannelDetails>>::sse_decode(
                deserializer,
            );
        return crate::ffi::api::ListChannelsResponse {
            channels: var_channels,
        };
    }
}

impl SseDecode for Vec<crate::ffi::api::FiatRate> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::ffi::api::FiatRate>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::ffi::gdrive::GDriveRestoreCandidate> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::ffi::gdrive::GDriveRestoreCandidate>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::ffi::types::LxChannelDetails> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::ffi::types::LxChannelDetails>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::ffi::types::RevocableClient> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::ffi::types::RevocableClient>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for crate::ffi::types::LxChannelDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_channelId = <String>::sse_decode(deserializer);
        let mut var_counterpartyNodeId = <String>::sse_decode(deserializer);
        let mut var_channelValueSats = <u64>::sse_decode(deserializer);
        let mut var_isUsable = <bool>::sse_decode(deserializer);
        let mut var_ourBalanceSats = <u64>::sse_decode(deserializer);
        let mut var_outboundCapacitySats = <u64>::sse_decode(deserializer);
        let mut var_nextOutboundHtlcLimitSats = <u64>::sse_decode(deserializer);
        let mut var_theirBalanceSats = <u64>::sse_decode(deserializer);
        let mut var_inboundCapacitySats = <u64>::sse_decode(deserializer);
        return crate::ffi::types::LxChannelDetails {
            channel_id: var_channelId,
            counterparty_node_id: var_counterpartyNodeId,
            channel_value_sats: var_channelValueSats,
            is_usable: var_isUsable,
            our_balance_sats: var_ourBalanceSats,
            outbound_capacity_sats: var_outboundCapacitySats,
            next_outbound_htlc_limit_sats: var_nextOutboundHtlcLimitSats,
            their_balance_sats: var_theirBalanceSats,
            inbound_capacity_sats: var_inboundCapacitySats,
        };
    }
}

impl SseDecode for crate::ffi::types::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::ffi::types::Network::Mainnet,
            1 => crate::ffi::types::Network::Testnet3,
            2 => crate::ffi::types::Network::Testnet4,
            3 => crate::ffi::types::Network::Regtest,
            _ => unreachable!("Invalid variant for Network: {}", inner),
        };
    }
}

impl SseDecode for crate::ffi::api::NodeInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_nodePk = <String>::sse_decode(deserializer);
        let mut var_version = <String>::sse_decode(deserializer);
        let mut var_measurement = <String>::sse_decode(deserializer);
        let mut var_balance =
            <crate::ffi::api::Balance>::sse_decode(deserializer);
        return crate::ffi::api::NodeInfo {
            node_pk: var_nodePk,
            version: var_version,
            measurement: var_measurement,
            balance: var_balance,
        };
    }
}

impl SseDecode for crate::ffi::types::Offer {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_string = <String>::sse_decode(deserializer);
        let mut var_description = <Option<String>>::sse_decode(deserializer);
        let mut var_expiresAt = <Option<i64>>::sse_decode(deserializer);
        let mut var_amountSats = <Option<u64>>::sse_decode(deserializer);
        let mut var_payee = <Option<String>>::sse_decode(deserializer);
        let mut var_payeePubkey = <Option<String>>::sse_decode(deserializer);
        return crate::ffi::types::Offer {
            string: var_string,
            description: var_description,
            expires_at: var_expiresAt,
            amount_sats: var_amountSats,
            payee: var_payee,
            payee_pubkey: var_payeePubkey,
        };
    }
}

impl SseDecode for crate::ffi::settings::OnboardingStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_hasConnectedGdrive =
            <Option<bool>>::sse_decode(deserializer);
        let mut var_hasBackedUpSeedPhrase =
            <Option<bool>>::sse_decode(deserializer);
        return crate::ffi::settings::OnboardingStatus {
            has_connected_gdrive: var_hasConnectedGdrive,
            has_backed_up_seed_phrase: var_hasBackedUpSeedPhrase,
        };
    }
}

impl SseDecode for crate::ffi::types::Onchain {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_amountSats = <Option<u64>>::sse_decode(deserializer);
        let mut var_label = <Option<String>>::sse_decode(deserializer);
        let mut var_message = <Option<String>>::sse_decode(deserializer);
        return crate::ffi::types::Onchain {
            address: var_address,
            amount_sats: var_amountSats,
            label: var_label,
            message: var_message,
        };
    }
}

impl SseDecode for crate::ffi::api::OpenChannelRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_userChannelId =
            <crate::ffi::types::UserChannelId>::sse_decode(deserializer);
        let mut var_valueSats = <u64>::sse_decode(deserializer);
        return crate::ffi::api::OpenChannelRequest {
            user_channel_id: var_userChannelId,
            value_sats: var_valueSats,
        };
    }
}

impl SseDecode for crate::ffi::api::OpenChannelResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_channelId = <String>::sse_decode(deserializer);
        return crate::ffi::api::OpenChannelResponse {
            channel_id: var_channelId,
        };
    }
}

impl SseDecode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<usize>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::ffi::app::AppHandle> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::ffi::app::AppHandle>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::ffi::api::FeeEstimate> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::ffi::api::FeeEstimate>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::ffi::types::GDriveSignupCredentials> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::ffi::types::GDriveSignupCredentials>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::ffi::types::Invoice> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::ffi::types::Invoice>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::ffi::types::Offer> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::ffi::types::Offer>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::ffi::settings::OnboardingStatus> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::ffi::settings::OnboardingStatus>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::ffi::types::Payment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::ffi::types::Payment>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::ffi::types::RootSeed> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::ffi::types::RootSeed>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::ffi::types::ShortPaymentAndIndex> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::ffi::types::ShortPaymentAndIndex>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::ffi::api::PayInvoiceRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_invoice = <String>::sse_decode(deserializer);
        let mut var_fallbackAmountSats =
            <Option<u64>>::sse_decode(deserializer);
        let mut var_note = <Option<String>>::sse_decode(deserializer);
        return crate::ffi::api::PayInvoiceRequest {
            invoice: var_invoice,
            fallback_amount_sats: var_fallbackAmountSats,
            note: var_note,
        };
    }
}

impl SseDecode for crate::ffi::api::PayInvoiceResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_index =
            <crate::ffi::types::PaymentIndex>::sse_decode(deserializer);
        return crate::ffi::api::PayInvoiceResponse { index: var_index };
    }
}

impl SseDecode for crate::ffi::api::PayOfferRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_cid =
            <crate::ffi::types::ClientPaymentId>::sse_decode(deserializer);
        let mut var_offer = <String>::sse_decode(deserializer);
        let mut var_fallbackAmountSats =
            <Option<u64>>::sse_decode(deserializer);
        let mut var_note = <Option<String>>::sse_decode(deserializer);
        return crate::ffi::api::PayOfferRequest {
            cid: var_cid,
            offer: var_offer,
            fallback_amount_sats: var_fallbackAmountSats,
            note: var_note,
        };
    }
}

impl SseDecode for crate::ffi::api::PayOfferResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_index =
            <crate::ffi::types::PaymentIndex>::sse_decode(deserializer);
        return crate::ffi::api::PayOfferResponse { index: var_index };
    }
}

impl SseDecode for crate::ffi::api::PayOnchainRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_cid =
            <crate::ffi::types::ClientPaymentId>::sse_decode(deserializer);
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_amountSats = <u64>::sse_decode(deserializer);
        let mut var_priority =
            <crate::ffi::types::ConfirmationPriority>::sse_decode(deserializer);
        let mut var_note = <Option<String>>::sse_decode(deserializer);
        return crate::ffi::api::PayOnchainRequest {
            cid: var_cid,
            address: var_address,
            amount_sats: var_amountSats,
            priority: var_priority,
            note: var_note,
        };
    }
}

impl SseDecode for crate::ffi::api::PayOnchainResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_index =
            <crate::ffi::types::PaymentIndex>::sse_decode(deserializer);
        let mut var_txid = <String>::sse_decode(deserializer);
        return crate::ffi::api::PayOnchainResponse {
            index: var_index,
            txid: var_txid,
        };
    }
}

impl SseDecode for crate::ffi::types::Payment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_index =
            <crate::ffi::types::PaymentIndex>::sse_decode(deserializer);
        let mut var_kind =
            <crate::ffi::types::PaymentKind>::sse_decode(deserializer);
        let mut var_direction =
            <crate::ffi::types::PaymentDirection>::sse_decode(deserializer);
        let mut var_invoice =
            <Option<crate::ffi::types::Invoice>>::sse_decode(deserializer);
        let mut var_offerId = <Option<String>>::sse_decode(deserializer);
        let mut var_offer =
            <Option<crate::ffi::types::Offer>>::sse_decode(deserializer);
        let mut var_txid = <Option<String>>::sse_decode(deserializer);
        let mut var_replacement = <Option<String>>::sse_decode(deserializer);
        let mut var_amountSat = <Option<u64>>::sse_decode(deserializer);
        let mut var_feesSat = <u64>::sse_decode(deserializer);
        let mut var_status =
            <crate::ffi::types::PaymentStatus>::sse_decode(deserializer);
        let mut var_statusStr = <String>::sse_decode(deserializer);
        let mut var_note = <Option<String>>::sse_decode(deserializer);
        let mut var_createdAt = <i64>::sse_decode(deserializer);
        let mut var_finalizedAt = <Option<i64>>::sse_decode(deserializer);
        return crate::ffi::types::Payment {
            index: var_index,
            kind: var_kind,
            direction: var_direction,
            invoice: var_invoice,
            offer_id: var_offerId,
            offer: var_offer,
            txid: var_txid,
            replacement: var_replacement,
            amount_sat: var_amountSat,
            fees_sat: var_feesSat,
            status: var_status,
            status_str: var_statusStr,
            note: var_note,
            created_at: var_createdAt,
            finalized_at: var_finalizedAt,
        };
    }
}

impl SseDecode for crate::ffi::types::PaymentDirection {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::ffi::types::PaymentDirection::Inbound,
            1 => crate::ffi::types::PaymentDirection::Outbound,
            _ => {
                unreachable!("Invalid variant for PaymentDirection: {}", inner)
            }
        };
    }
}

impl SseDecode for crate::ffi::types::PaymentIndex {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        return crate::ffi::types::PaymentIndex(var_field0);
    }
}

impl SseDecode for crate::ffi::types::PaymentKind {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::ffi::types::PaymentKind::Onchain,
            1 => crate::ffi::types::PaymentKind::Invoice,
            2 => crate::ffi::types::PaymentKind::Spontaneous,
            3 => crate::ffi::types::PaymentKind::Offer,
            _ => unreachable!("Invalid variant for PaymentKind: {}", inner),
        };
    }
}

impl SseDecode for crate::ffi::types::PaymentMethod {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 =
                    <crate::ffi::types::Onchain>::sse_decode(deserializer);
                return crate::ffi::types::PaymentMethod::Onchain(var_field0);
            }
            1 => {
                let mut var_field0 =
                    <crate::ffi::types::Invoice>::sse_decode(deserializer);
                return crate::ffi::types::PaymentMethod::Invoice(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <crate::ffi::types::Offer>::sse_decode(deserializer);
                return crate::ffi::types::PaymentMethod::Offer(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::ffi::types::PaymentStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::ffi::types::PaymentStatus::Pending,
            1 => crate::ffi::types::PaymentStatus::Completed,
            2 => crate::ffi::types::PaymentStatus::Failed,
            _ => unreachable!("Invalid variant for PaymentStatus: {}", inner),
        };
    }
}

impl SseDecode for crate::ffi::api::PreflightCloseChannelResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_feeEstimateSats = <u64>::sse_decode(deserializer);
        return crate::ffi::api::PreflightCloseChannelResponse {
            fee_estimate_sats: var_feeEstimateSats,
        };
    }
}

impl SseDecode for crate::ffi::api::PreflightOpenChannelRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_valueSats = <u64>::sse_decode(deserializer);
        return crate::ffi::api::PreflightOpenChannelRequest {
            value_sats: var_valueSats,
        };
    }
}

impl SseDecode for crate::ffi::api::PreflightOpenChannelResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_feeEstimateSats = <u64>::sse_decode(deserializer);
        return crate::ffi::api::PreflightOpenChannelResponse {
            fee_estimate_sats: var_feeEstimateSats,
        };
    }
}

impl SseDecode for crate::ffi::api::PreflightPayInvoiceRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_invoice = <String>::sse_decode(deserializer);
        let mut var_fallbackAmountSats =
            <Option<u64>>::sse_decode(deserializer);
        return crate::ffi::api::PreflightPayInvoiceRequest {
            invoice: var_invoice,
            fallback_amount_sats: var_fallbackAmountSats,
        };
    }
}

impl SseDecode for crate::ffi::api::PreflightPayInvoiceResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_amountSats = <u64>::sse_decode(deserializer);
        let mut var_feesSats = <u64>::sse_decode(deserializer);
        return crate::ffi::api::PreflightPayInvoiceResponse {
            amount_sats: var_amountSats,
            fees_sats: var_feesSats,
        };
    }
}

impl SseDecode for crate::ffi::api::PreflightPayOfferRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_cid =
            <crate::ffi::types::ClientPaymentId>::sse_decode(deserializer);
        let mut var_offer = <String>::sse_decode(deserializer);
        let mut var_fallbackAmountSats =
            <Option<u64>>::sse_decode(deserializer);
        return crate::ffi::api::PreflightPayOfferRequest {
            cid: var_cid,
            offer: var_offer,
            fallback_amount_sats: var_fallbackAmountSats,
        };
    }
}

impl SseDecode for crate::ffi::api::PreflightPayOfferResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_amountSats = <u64>::sse_decode(deserializer);
        let mut var_feesSats = <u64>::sse_decode(deserializer);
        return crate::ffi::api::PreflightPayOfferResponse {
            amount_sats: var_amountSats,
            fees_sats: var_feesSats,
        };
    }
}

impl SseDecode for crate::ffi::api::PreflightPayOnchainRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_amountSats = <u64>::sse_decode(deserializer);
        return crate::ffi::api::PreflightPayOnchainRequest {
            address: var_address,
            amount_sats: var_amountSats,
        };
    }
}

impl SseDecode for crate::ffi::api::PreflightPayOnchainResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_high =
            <Option<crate::ffi::api::FeeEstimate>>::sse_decode(deserializer);
        let mut var_normal =
            <crate::ffi::api::FeeEstimate>::sse_decode(deserializer);
        let mut var_background =
            <crate::ffi::api::FeeEstimate>::sse_decode(deserializer);
        return crate::ffi::api::PreflightPayOnchainResponse {
            high: var_high,
            normal: var_normal,
            background: var_background,
        };
    }
}

impl SseDecode for crate::ffi::types::RevocableClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_pubkey = <String>::sse_decode(deserializer);
        let mut var_createdAt = <i64>::sse_decode(deserializer);
        let mut var_label = <Option<String>>::sse_decode(deserializer);
        let mut var_scope =
            <crate::ffi::types::Scope>::sse_decode(deserializer);
        return crate::ffi::types::RevocableClient {
            pubkey: var_pubkey,
            created_at: var_createdAt,
            label: var_label,
            scope: var_scope,
        };
    }
}

impl SseDecode for crate::ffi::types::RootSeed {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_inner =
            <RustOpaqueNom<RootSeedRs>>::sse_decode(deserializer);
        return crate::ffi::types::RootSeed { inner: var_inner };
    }
}

impl SseDecode for crate::ffi::types::Scope {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::ffi::types::Scope::All,
            1 => crate::ffi::types::Scope::NodeConnect,
            _ => unreachable!("Invalid variant for Scope: {}", inner),
        };
    }
}

impl SseDecode for crate::ffi::secret_store::SecretStore {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_inner =
            <RustOpaqueNom<SecretStoreRs>>::sse_decode(deserializer);
        return crate::ffi::secret_store::SecretStore { inner: var_inner };
    }
}

impl SseDecode for crate::ffi::settings::Settings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_locale = <Option<String>>::sse_decode(deserializer);
        let mut var_fiatCurrency = <Option<String>>::sse_decode(deserializer);
        let mut var_showSplitBalances =
            <Option<bool>>::sse_decode(deserializer);
        let mut var_onboardingStatus = <Option<
            crate::ffi::settings::OnboardingStatus,
        >>::sse_decode(deserializer);
        return crate::ffi::settings::Settings {
            locale: var_locale,
            fiat_currency: var_fiatCurrency,
            show_split_balances: var_showSplitBalances,
            onboarding_status: var_onboardingStatus,
        };
    }
}

impl SseDecode for crate::ffi::settings::SettingsDb {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_inner =
            <RustOpaqueNom<SettingsDbRs>>::sse_decode(deserializer);
        return crate::ffi::settings::SettingsDb { inner: var_inner };
    }
}

impl SseDecode for crate::ffi::types::ShortPayment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_index =
            <crate::ffi::types::PaymentIndex>::sse_decode(deserializer);
        let mut var_kind =
            <crate::ffi::types::PaymentKind>::sse_decode(deserializer);
        let mut var_direction =
            <crate::ffi::types::PaymentDirection>::sse_decode(deserializer);
        let mut var_amountSat = <Option<u64>>::sse_decode(deserializer);
        let mut var_status =
            <crate::ffi::types::PaymentStatus>::sse_decode(deserializer);
        let mut var_note = <Option<String>>::sse_decode(deserializer);
        let mut var_createdAt = <i64>::sse_decode(deserializer);
        return crate::ffi::types::ShortPayment {
            index: var_index,
            kind: var_kind,
            direction: var_direction,
            amount_sat: var_amountSat,
            status: var_status,
            note: var_note,
            created_at: var_createdAt,
        };
    }
}

impl SseDecode for crate::ffi::types::ShortPaymentAndIndex {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_vecIdx = <usize>::sse_decode(deserializer);
        let mut var_payment =
            <crate::ffi::types::ShortPayment>::sse_decode(deserializer);
        return crate::ffi::types::ShortPaymentAndIndex {
            vec_idx: var_vecIdx,
            payment: var_payment,
        };
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for [u8; 16] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for [u8; 32] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
    }
}

impl SseDecode for crate::ffi::api::UpdateClientRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_pubkey = <String>::sse_decode(deserializer);
        let mut var_isRevoked = <Option<bool>>::sse_decode(deserializer);
        return crate::ffi::api::UpdateClientRequest {
            pubkey: var_pubkey,
            is_revoked: var_isRevoked,
        };
    }
}

impl SseDecode for crate::ffi::api::UpdatePaymentNote {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_index =
            <crate::ffi::types::PaymentIndex>::sse_decode(deserializer);
        let mut var_note = <Option<String>>::sse_decode(deserializer);
        return crate::ffi::api::UpdatePaymentNote {
            index: var_index,
            note: var_note,
        };
    }
}

impl SseDecode for crate::ffi::types::UserChannelId {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_id = <[u8; 16]>::sse_decode(deserializer);
        return crate::ffi::types::UserChannelId { id: var_id };
    }
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
                        1 => wire__crate__ffi__app__app_handle_close_channel_impl(port, ptr, rust_vec_len, data_len),
2 => wire__crate__ffi__app__app_handle_create_client_impl(port, ptr, rust_vec_len, data_len),
3 => wire__crate__ffi__app__app_handle_create_invoice_impl(port, ptr, rust_vec_len, data_len),
4 => wire__crate__ffi__app__app_handle_create_offer_impl(port, ptr, rust_vec_len, data_len),
5 => wire__crate__ffi__app__app_handle_delete_payment_db_impl(port, ptr, rust_vec_len, data_len),
6 => wire__crate__ffi__app__app_handle_fiat_rates_impl(port, ptr, rust_vec_len, data_len),
7 => wire__crate__ffi__app__app_handle_get_address_impl(port, ptr, rust_vec_len, data_len),
19 => wire__crate__ffi__app__app_handle_get_vec_idx_by_payment_index_impl(port, ptr, rust_vec_len, data_len),
20 => wire__crate__ffi__app__app_handle_list_broadcasted_txs_impl(port, ptr, rust_vec_len, data_len),
21 => wire__crate__ffi__app__app_handle_list_channels_impl(port, ptr, rust_vec_len, data_len),
22 => wire__crate__ffi__app__app_handle_list_clients_impl(port, ptr, rust_vec_len, data_len),
23 => wire__crate__ffi__app__app_handle_load_impl(port, ptr, rust_vec_len, data_len),
24 => wire__crate__ffi__app__app_handle_node_info_impl(port, ptr, rust_vec_len, data_len),
25 => wire__crate__ffi__app__app_handle_open_channel_impl(port, ptr, rust_vec_len, data_len),
26 => wire__crate__ffi__app__app_handle_pay_invoice_impl(port, ptr, rust_vec_len, data_len),
27 => wire__crate__ffi__app__app_handle_pay_offer_impl(port, ptr, rust_vec_len, data_len),
28 => wire__crate__ffi__app__app_handle_pay_onchain_impl(port, ptr, rust_vec_len, data_len),
29 => wire__crate__ffi__app__app_handle_preflight_close_channel_impl(port, ptr, rust_vec_len, data_len),
30 => wire__crate__ffi__app__app_handle_preflight_open_channel_impl(port, ptr, rust_vec_len, data_len),
31 => wire__crate__ffi__app__app_handle_preflight_pay_invoice_impl(port, ptr, rust_vec_len, data_len),
32 => wire__crate__ffi__app__app_handle_preflight_pay_offer_impl(port, ptr, rust_vec_len, data_len),
33 => wire__crate__ffi__app__app_handle_preflight_pay_onchain_impl(port, ptr, rust_vec_len, data_len),
34 => wire__crate__ffi__app__app_handle_restore_impl(port, ptr, rust_vec_len, data_len),
36 => wire__crate__ffi__app__app_handle_signup_impl(port, ptr, rust_vec_len, data_len),
37 => wire__crate__ffi__app__app_handle_sync_payments_impl(port, ptr, rust_vec_len, data_len),
38 => wire__crate__ffi__app__app_handle_update_client_impl(port, ptr, rust_vec_len, data_len),
39 => wire__crate__ffi__app__app_handle_update_payment_note_impl(port, ptr, rust_vec_len, data_len),
45 => wire__crate__ffi__qr__encode_impl(port, ptr, rust_vec_len, data_len),
47 => wire__crate__ffi__gdrive__g_drive_client_dump_state_impl(port, ptr, rust_vec_len, data_len),
50 => wire__crate__ffi__gdrive__g_drive_o_auth_2_flow_exchange_impl(port, ptr, rust_vec_len, data_len),
54 => wire__crate__ffi__gdrive__g_drive_restore_client_find_restore_candidates_impl(port, ptr, rust_vec_len, data_len),
55 => wire__crate__ffi__logger__init_rust_log_stream_impl(port, ptr, rust_vec_len, data_len),
58 => wire__crate__ffi__payment_uri__resolve_best_impl(port, ptr, rust_vec_len, data_len),
68 => wire__crate__ffi__debug__unconditional_error_impl(port, ptr, rust_vec_len, data_len),
69 => wire__crate__ffi__debug__unconditional_panic_impl(port, ptr, rust_vec_len, data_len),
                        _ => unreachable!(),
                    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
                        8 => wire__crate__ffi__app__app_handle_get_finalized_not_junk_short_payment_by_scroll_idx_impl(ptr, rust_vec_len, data_len),
9 => wire__crate__ffi__app__app_handle_get_finalized_short_payment_by_scroll_idx_impl(ptr, rust_vec_len, data_len),
10 => wire__crate__ffi__app__app_handle_get_num_finalized_not_junk_payments_impl(ptr, rust_vec_len, data_len),
11 => wire__crate__ffi__app__app_handle_get_num_finalized_payments_impl(ptr, rust_vec_len, data_len),
12 => wire__crate__ffi__app__app_handle_get_num_payments_impl(ptr, rust_vec_len, data_len),
13 => wire__crate__ffi__app__app_handle_get_num_pending_not_junk_payments_impl(ptr, rust_vec_len, data_len),
14 => wire__crate__ffi__app__app_handle_get_num_pending_payments_impl(ptr, rust_vec_len, data_len),
15 => wire__crate__ffi__app__app_handle_get_payment_by_vec_idx_impl(ptr, rust_vec_len, data_len),
16 => wire__crate__ffi__app__app_handle_get_pending_not_junk_short_payment_by_scroll_idx_impl(ptr, rust_vec_len, data_len),
17 => wire__crate__ffi__app__app_handle_get_pending_short_payment_by_scroll_idx_impl(ptr, rust_vec_len, data_len),
18 => wire__crate__ffi__app__app_handle_get_short_payment_by_scroll_idx_impl(ptr, rust_vec_len, data_len),
35 => wire__crate__ffi__app__app_handle_settings_db_impl(ptr, rust_vec_len, data_len),
40 => wire__crate__ffi__app__app_handle_user_info_impl(ptr, rust_vec_len, data_len),
41 => wire__crate__ffi__types__client_payment_id_gen_new_impl(ptr, rust_vec_len, data_len),
42 => wire__crate__ffi__debug__delete_latest_provisioned_impl(ptr, rust_vec_len, data_len),
43 => wire__crate__ffi__debug__delete_secret_store_impl(ptr, rust_vec_len, data_len),
44 => wire__crate__ffi__types__deploy_env_from_str_impl(ptr, rust_vec_len, data_len),
46 => wire__crate__ffi__qr__encoded_pixels_per_side_impl(ptr, rust_vec_len, data_len),
48 => wire__crate__ffi__gdrive__g_drive_client_into_restore_client_impl(ptr, rust_vec_len, data_len),
49 => wire__crate__ffi__gdrive__g_drive_client_server_code_impl(ptr, rust_vec_len, data_len),
51 => wire__crate__ffi__gdrive__g_drive_o_auth_2_flow_init_impl(ptr, rust_vec_len, data_len),
52 => wire__crate__ffi__gdrive__g_drive_restore_candidate_try_decrypt_impl(ptr, rust_vec_len, data_len),
53 => wire__crate__ffi__gdrive__g_drive_restore_candidate_user_pk_impl(ptr, rust_vec_len, data_len),
56 => wire__crate__ffi__form__is_mnemonic_word_impl(ptr, rust_vec_len, data_len),
57 => wire__crate__ffi__types__network_from_str_impl(ptr, rust_vec_len, data_len),
59 => wire__crate__ffi__types__root_seed_expose_secret_hex_impl(ptr, rust_vec_len, data_len),
60 => wire__crate__ffi__types__root_seed_from_sys_rng_impl(ptr, rust_vec_len, data_len),
61 => wire__crate__ffi__types__root_seed_seed_phrase_impl(ptr, rust_vec_len, data_len),
62 => wire__crate__ffi__secret_store__secret_store_new_impl(ptr, rust_vec_len, data_len),
63 => wire__crate__ffi__secret_store__secret_store_read_root_seed_impl(ptr, rust_vec_len, data_len),
64 => wire__crate__ffi__settings__settings_db_read_impl(ptr, rust_vec_len, data_len),
65 => wire__crate__ffi__settings__settings_db_reset_impl(ptr, rust_vec_len, data_len),
66 => wire__crate__ffi__settings__settings_db_update_impl(ptr, rust_vec_len, data_len),
67 => wire__crate__ffi__form__suggest_mnemonic_words_impl(ptr, rust_vec_len, data_len),
70 => wire__crate__ffi__types__user_channel_id_gen_new_impl(ptr, rust_vec_len, data_len),
71 => wire__crate__ffi__form__validate_password_impl(ptr, rust_vec_len, data_len),
                        _ => unreachable!(),
                    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::app::AppHandle {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.inner.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::app::AppHandle
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::app::AppHandle>
    for crate::ffi::app::AppHandle
{
    fn into_into_dart(self) -> crate::ffi::app::AppHandle {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::AppUserInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.user_pk.into_into_dart().into_dart(),
            self.node_pk.into_into_dart().into_dart(),
            self.node_pk_proof.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::AppUserInfo
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::AppUserInfo>
    for crate::ffi::types::AppUserInfo
{
    fn into_into_dart(self) -> crate::ffi::types::AppUserInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::Balance {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.total_sats.into_into_dart().into_dart(),
            self.onchain_sats.into_into_dart().into_dart(),
            self.lightning_sats.into_into_dart().into_dart(),
            self.lightning_usable_sats.into_into_dart().into_dart(),
            self.lightning_max_sendable_sats
                .into_into_dart()
                .into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::Balance
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::Balance>
    for crate::ffi::api::Balance
{
    fn into_into_dart(self) -> crate::ffi::api::Balance {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::ClientPaymentId {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.id.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::ClientPaymentId
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::ClientPaymentId>
    for crate::ffi::types::ClientPaymentId
{
    fn into_into_dart(self) -> crate::ffi::types::ClientPaymentId {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::CloseChannelRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.channel_id.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::CloseChannelRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::CloseChannelRequest>
    for crate::ffi::api::CloseChannelRequest
{
    fn into_into_dart(self) -> crate::ffi::api::CloseChannelRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::Config {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.deploy_env.into_into_dart().into_dart(),
            self.network.into_into_dart().into_dart(),
            self.gateway_url.into_into_dart().into_dart(),
            self.use_sgx.into_into_dart().into_dart(),
            self.base_app_data_dir.into_into_dart().into_dart(),
            self.use_mock_secret_store.into_into_dart().into_dart(),
            self.user_agent.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::Config
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::Config>
    for crate::ffi::types::Config
{
    fn into_into_dart(self) -> crate::ffi::types::Config {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::ConfirmationPriority {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::High => 0.into_dart(),
            Self::Normal => 1.into_dart(),
            Self::Background => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::ConfirmationPriority
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::ConfirmationPriority>
    for crate::ffi::types::ConfirmationPriority
{
    fn into_into_dart(self) -> crate::ffi::types::ConfirmationPriority {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::CreateClientRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.label.into_into_dart().into_dart(),
            self.scope.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::CreateClientRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::CreateClientRequest>
    for crate::ffi::api::CreateClientRequest
{
    fn into_into_dart(self) -> crate::ffi::api::CreateClientRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::CreateClientResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.client.into_into_dart().into_dart(),
            self.credentials.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::CreateClientResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::CreateClientResponse>
    for crate::ffi::api::CreateClientResponse
{
    fn into_into_dart(self) -> crate::ffi::api::CreateClientResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::CreateInvoiceRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.expiry_secs.into_into_dart().into_dart(),
            self.amount_sats.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::CreateInvoiceRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::CreateInvoiceRequest>
    for crate::ffi::api::CreateInvoiceRequest
{
    fn into_into_dart(self) -> crate::ffi::api::CreateInvoiceRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::CreateInvoiceResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.invoice.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::CreateInvoiceResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::CreateInvoiceResponse>
    for crate::ffi::api::CreateInvoiceResponse
{
    fn into_into_dart(self) -> crate::ffi::api::CreateInvoiceResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::CreateOfferRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.expiry_secs.into_into_dart().into_dart(),
            self.amount_sats.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::CreateOfferRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::CreateOfferRequest>
    for crate::ffi::api::CreateOfferRequest
{
    fn into_into_dart(self) -> crate::ffi::api::CreateOfferRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::CreateOfferResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.offer.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::CreateOfferResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::CreateOfferResponse>
    for crate::ffi::api::CreateOfferResponse
{
    fn into_into_dart(self) -> crate::ffi::api::CreateOfferResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::DeployEnv {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Dev => 0.into_dart(),
            Self::Staging => 1.into_dart(),
            Self::Prod => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::DeployEnv
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::DeployEnv>
    for crate::ffi::types::DeployEnv
{
    fn into_into_dart(self) -> crate::ffi::types::DeployEnv {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::FeeEstimate {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.amount_sats.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::FeeEstimate
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::FeeEstimate>
    for crate::ffi::api::FeeEstimate
{
    fn into_into_dart(self) -> crate::ffi::api::FeeEstimate {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::FiatRate {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.fiat.into_into_dart().into_dart(),
            self.rate.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::FiatRate
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::FiatRate>
    for crate::ffi::api::FiatRate
{
    fn into_into_dart(self) -> crate::ffi::api::FiatRate {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::FiatRates {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.timestamp_ms.into_into_dart().into_dart(),
            self.rates.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::FiatRates
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::FiatRates>
    for crate::ffi::api::FiatRates
{
    fn into_into_dart(self) -> crate::ffi::api::FiatRates {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::gdrive::GDriveClient {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.inner.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::gdrive::GDriveClient
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::gdrive::GDriveClient>
    for crate::ffi::gdrive::GDriveClient
{
    fn into_into_dart(self) -> crate::ffi::gdrive::GDriveClient {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::gdrive::GDriveOAuth2Flow {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.client_id.into_into_dart().into_dart(),
            self.code_verifier.into_into_dart().into_dart(),
            self.redirect_uri.into_into_dart().into_dart(),
            self.redirect_uri_scheme.into_into_dart().into_dart(),
            self.url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::gdrive::GDriveOAuth2Flow
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::gdrive::GDriveOAuth2Flow>
    for crate::ffi::gdrive::GDriveOAuth2Flow
{
    fn into_into_dart(self) -> crate::ffi::gdrive::GDriveOAuth2Flow {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::ffi::gdrive::GDriveRestoreCandidate
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.inner.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::gdrive::GDriveRestoreCandidate
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::ffi::gdrive::GDriveRestoreCandidate,
    > for crate::ffi::gdrive::GDriveRestoreCandidate
{
    fn into_into_dart(self) -> crate::ffi::gdrive::GDriveRestoreCandidate {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::gdrive::GDriveRestoreClient {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.inner.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::gdrive::GDriveRestoreClient
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::gdrive::GDriveRestoreClient>
    for crate::ffi::gdrive::GDriveRestoreClient
{
    fn into_into_dart(self) -> crate::ffi::gdrive::GDriveRestoreClient {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::ffi::types::GDriveSignupCredentials
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.server_auth_code.into_into_dart().into_dart(),
            self.password.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::GDriveSignupCredentials
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::ffi::types::GDriveSignupCredentials,
    > for crate::ffi::types::GDriveSignupCredentials
{
    fn into_into_dart(self) -> crate::ffi::types::GDriveSignupCredentials {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::Invoice {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.string.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
            self.created_at.into_into_dart().into_dart(),
            self.expires_at.into_into_dart().into_dart(),
            self.amount_sats.into_into_dart().into_dart(),
            self.payee_pubkey.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::Invoice
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::Invoice>
    for crate::ffi::types::Invoice
{
    fn into_into_dart(self) -> crate::ffi::types::Invoice {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::ListChannelsResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.channels.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::ListChannelsResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::ListChannelsResponse>
    for crate::ffi::api::ListChannelsResponse
{
    fn into_into_dart(self) -> crate::ffi::api::ListChannelsResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::LxChannelDetails {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.channel_id.into_into_dart().into_dart(),
            self.counterparty_node_id.into_into_dart().into_dart(),
            self.channel_value_sats.into_into_dart().into_dart(),
            self.is_usable.into_into_dart().into_dart(),
            self.our_balance_sats.into_into_dart().into_dart(),
            self.outbound_capacity_sats.into_into_dart().into_dart(),
            self.next_outbound_htlc_limit_sats
                .into_into_dart()
                .into_dart(),
            self.their_balance_sats.into_into_dart().into_dart(),
            self.inbound_capacity_sats.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::LxChannelDetails
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::LxChannelDetails>
    for crate::ffi::types::LxChannelDetails
{
    fn into_into_dart(self) -> crate::ffi::types::LxChannelDetails {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::Network {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Mainnet => 0.into_dart(),
            Self::Testnet3 => 1.into_dart(),
            Self::Testnet4 => 2.into_dart(),
            Self::Regtest => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::Network
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::Network>
    for crate::ffi::types::Network
{
    fn into_into_dart(self) -> crate::ffi::types::Network {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::NodeInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.node_pk.into_into_dart().into_dart(),
            self.version.into_into_dart().into_dart(),
            self.measurement.into_into_dart().into_dart(),
            self.balance.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::NodeInfo
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::NodeInfo>
    for crate::ffi::api::NodeInfo
{
    fn into_into_dart(self) -> crate::ffi::api::NodeInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::Offer {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.string.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
            self.expires_at.into_into_dart().into_dart(),
            self.amount_sats.into_into_dart().into_dart(),
            self.payee.into_into_dart().into_dart(),
            self.payee_pubkey.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::Offer
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::Offer>
    for crate::ffi::types::Offer
{
    fn into_into_dart(self) -> crate::ffi::types::Offer {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::settings::OnboardingStatus {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.has_connected_gdrive.into_into_dart().into_dart(),
            self.has_backed_up_seed_phrase.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::settings::OnboardingStatus
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::settings::OnboardingStatus>
    for crate::ffi::settings::OnboardingStatus
{
    fn into_into_dart(self) -> crate::ffi::settings::OnboardingStatus {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::Onchain {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.address.into_into_dart().into_dart(),
            self.amount_sats.into_into_dart().into_dart(),
            self.label.into_into_dart().into_dart(),
            self.message.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::Onchain
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::Onchain>
    for crate::ffi::types::Onchain
{
    fn into_into_dart(self) -> crate::ffi::types::Onchain {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::OpenChannelRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.user_channel_id.into_into_dart().into_dart(),
            self.value_sats.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::OpenChannelRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::OpenChannelRequest>
    for crate::ffi::api::OpenChannelRequest
{
    fn into_into_dart(self) -> crate::ffi::api::OpenChannelRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::OpenChannelResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.channel_id.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::OpenChannelResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::OpenChannelResponse>
    for crate::ffi::api::OpenChannelResponse
{
    fn into_into_dart(self) -> crate::ffi::api::OpenChannelResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::PayInvoiceRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.invoice.into_into_dart().into_dart(),
            self.fallback_amount_sats.into_into_dart().into_dart(),
            self.note.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::PayInvoiceRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::PayInvoiceRequest>
    for crate::ffi::api::PayInvoiceRequest
{
    fn into_into_dart(self) -> crate::ffi::api::PayInvoiceRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::PayInvoiceResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.index.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::PayInvoiceResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::PayInvoiceResponse>
    for crate::ffi::api::PayInvoiceResponse
{
    fn into_into_dart(self) -> crate::ffi::api::PayInvoiceResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::PayOfferRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.cid.into_into_dart().into_dart(),
            self.offer.into_into_dart().into_dart(),
            self.fallback_amount_sats.into_into_dart().into_dart(),
            self.note.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::PayOfferRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::PayOfferRequest>
    for crate::ffi::api::PayOfferRequest
{
    fn into_into_dart(self) -> crate::ffi::api::PayOfferRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::PayOfferResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.index.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::PayOfferResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::PayOfferResponse>
    for crate::ffi::api::PayOfferResponse
{
    fn into_into_dart(self) -> crate::ffi::api::PayOfferResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::PayOnchainRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.cid.into_into_dart().into_dart(),
            self.address.into_into_dart().into_dart(),
            self.amount_sats.into_into_dart().into_dart(),
            self.priority.into_into_dart().into_dart(),
            self.note.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::PayOnchainRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::PayOnchainRequest>
    for crate::ffi::api::PayOnchainRequest
{
    fn into_into_dart(self) -> crate::ffi::api::PayOnchainRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::PayOnchainResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.index.into_into_dart().into_dart(),
            self.txid.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::PayOnchainResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::PayOnchainResponse>
    for crate::ffi::api::PayOnchainResponse
{
    fn into_into_dart(self) -> crate::ffi::api::PayOnchainResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::Payment {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.index.into_into_dart().into_dart(),
            self.kind.into_into_dart().into_dart(),
            self.direction.into_into_dart().into_dart(),
            self.invoice.into_into_dart().into_dart(),
            self.offer_id.into_into_dart().into_dart(),
            self.offer.into_into_dart().into_dart(),
            self.txid.into_into_dart().into_dart(),
            self.replacement.into_into_dart().into_dart(),
            self.amount_sat.into_into_dart().into_dart(),
            self.fees_sat.into_into_dart().into_dart(),
            self.status.into_into_dart().into_dart(),
            self.status_str.into_into_dart().into_dart(),
            self.note.into_into_dart().into_dart(),
            self.created_at.into_into_dart().into_dart(),
            self.finalized_at.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::Payment
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::Payment>
    for crate::ffi::types::Payment
{
    fn into_into_dart(self) -> crate::ffi::types::Payment {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::PaymentDirection {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Inbound => 0.into_dart(),
            Self::Outbound => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::PaymentDirection
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::PaymentDirection>
    for crate::ffi::types::PaymentDirection
{
    fn into_into_dart(self) -> crate::ffi::types::PaymentDirection {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::PaymentIndex {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::PaymentIndex
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::PaymentIndex>
    for crate::ffi::types::PaymentIndex
{
    fn into_into_dart(self) -> crate::ffi::types::PaymentIndex {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::PaymentKind {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Onchain => 0.into_dart(),
            Self::Invoice => 1.into_dart(),
            Self::Spontaneous => 2.into_dart(),
            Self::Offer => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::PaymentKind
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::PaymentKind>
    for crate::ffi::types::PaymentKind
{
    fn into_into_dart(self) -> crate::ffi::types::PaymentKind {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::PaymentMethod {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::ffi::types::PaymentMethod::Onchain(field0) =>
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::ffi::types::PaymentMethod::Invoice(field0) =>
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::ffi::types::PaymentMethod::Offer(field0) =>
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::PaymentMethod
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::PaymentMethod>
    for crate::ffi::types::PaymentMethod
{
    fn into_into_dart(self) -> crate::ffi::types::PaymentMethod {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::PaymentStatus {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Pending => 0.into_dart(),
            Self::Completed => 1.into_dart(),
            Self::Failed => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::PaymentStatus
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::PaymentStatus>
    for crate::ffi::types::PaymentStatus
{
    fn into_into_dart(self) -> crate::ffi::types::PaymentStatus {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::ffi::api::PreflightCloseChannelResponse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.fee_estimate_sats.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::PreflightCloseChannelResponse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::ffi::api::PreflightCloseChannelResponse,
    > for crate::ffi::api::PreflightCloseChannelResponse
{
    fn into_into_dart(self) -> crate::ffi::api::PreflightCloseChannelResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::ffi::api::PreflightOpenChannelRequest
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value_sats.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::PreflightOpenChannelRequest
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::ffi::api::PreflightOpenChannelRequest,
    > for crate::ffi::api::PreflightOpenChannelRequest
{
    fn into_into_dart(self) -> crate::ffi::api::PreflightOpenChannelRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::ffi::api::PreflightOpenChannelResponse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.fee_estimate_sats.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::PreflightOpenChannelResponse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::ffi::api::PreflightOpenChannelResponse,
    > for crate::ffi::api::PreflightOpenChannelResponse
{
    fn into_into_dart(self) -> crate::ffi::api::PreflightOpenChannelResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::ffi::api::PreflightPayInvoiceRequest
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.invoice.into_into_dart().into_dart(),
            self.fallback_amount_sats.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::PreflightPayInvoiceRequest
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::ffi::api::PreflightPayInvoiceRequest,
    > for crate::ffi::api::PreflightPayInvoiceRequest
{
    fn into_into_dart(self) -> crate::ffi::api::PreflightPayInvoiceRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::ffi::api::PreflightPayInvoiceResponse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.amount_sats.into_into_dart().into_dart(),
            self.fees_sats.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::PreflightPayInvoiceResponse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::ffi::api::PreflightPayInvoiceResponse,
    > for crate::ffi::api::PreflightPayInvoiceResponse
{
    fn into_into_dart(self) -> crate::ffi::api::PreflightPayInvoiceResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::ffi::api::PreflightPayOfferRequest
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.cid.into_into_dart().into_dart(),
            self.offer.into_into_dart().into_dart(),
            self.fallback_amount_sats.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::PreflightPayOfferRequest
{
}
impl
    flutter_rust_bridge::IntoIntoDart<crate::ffi::api::PreflightPayOfferRequest>
    for crate::ffi::api::PreflightPayOfferRequest
{
    fn into_into_dart(self) -> crate::ffi::api::PreflightPayOfferRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::ffi::api::PreflightPayOfferResponse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.amount_sats.into_into_dart().into_dart(),
            self.fees_sats.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::PreflightPayOfferResponse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::ffi::api::PreflightPayOfferResponse,
    > for crate::ffi::api::PreflightPayOfferResponse
{
    fn into_into_dart(self) -> crate::ffi::api::PreflightPayOfferResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::ffi::api::PreflightPayOnchainRequest
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.address.into_into_dart().into_dart(),
            self.amount_sats.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::PreflightPayOnchainRequest
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::ffi::api::PreflightPayOnchainRequest,
    > for crate::ffi::api::PreflightPayOnchainRequest
{
    fn into_into_dart(self) -> crate::ffi::api::PreflightPayOnchainRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::ffi::api::PreflightPayOnchainResponse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.high.into_into_dart().into_dart(),
            self.normal.into_into_dart().into_dart(),
            self.background.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::PreflightPayOnchainResponse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::ffi::api::PreflightPayOnchainResponse,
    > for crate::ffi::api::PreflightPayOnchainResponse
{
    fn into_into_dart(self) -> crate::ffi::api::PreflightPayOnchainResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::RevocableClient {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.pubkey.into_into_dart().into_dart(),
            self.created_at.into_into_dart().into_dart(),
            self.label.into_into_dart().into_dart(),
            self.scope.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::RevocableClient
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::RevocableClient>
    for crate::ffi::types::RevocableClient
{
    fn into_into_dart(self) -> crate::ffi::types::RevocableClient {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::RootSeed {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.inner.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::RootSeed
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::RootSeed>
    for crate::ffi::types::RootSeed
{
    fn into_into_dart(self) -> crate::ffi::types::RootSeed {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::Scope {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::All => 0.into_dart(),
            Self::NodeConnect => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::Scope
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::Scope>
    for crate::ffi::types::Scope
{
    fn into_into_dart(self) -> crate::ffi::types::Scope {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::secret_store::SecretStore {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.inner.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::secret_store::SecretStore
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::secret_store::SecretStore>
    for crate::ffi::secret_store::SecretStore
{
    fn into_into_dart(self) -> crate::ffi::secret_store::SecretStore {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::settings::Settings {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.locale.into_into_dart().into_dart(),
            self.fiat_currency.into_into_dart().into_dart(),
            self.show_split_balances.into_into_dart().into_dart(),
            self.onboarding_status.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::settings::Settings
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::settings::Settings>
    for crate::ffi::settings::Settings
{
    fn into_into_dart(self) -> crate::ffi::settings::Settings {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::settings::SettingsDb {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.inner.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::settings::SettingsDb
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::settings::SettingsDb>
    for crate::ffi::settings::SettingsDb
{
    fn into_into_dart(self) -> crate::ffi::settings::SettingsDb {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::ShortPayment {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.index.into_into_dart().into_dart(),
            self.kind.into_into_dart().into_dart(),
            self.direction.into_into_dart().into_dart(),
            self.amount_sat.into_into_dart().into_dart(),
            self.status.into_into_dart().into_dart(),
            self.note.into_into_dart().into_dart(),
            self.created_at.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::ShortPayment
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::ShortPayment>
    for crate::ffi::types::ShortPayment
{
    fn into_into_dart(self) -> crate::ffi::types::ShortPayment {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::ShortPaymentAndIndex {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.vec_idx.into_into_dart().into_dart(),
            self.payment.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::ShortPaymentAndIndex
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::ShortPaymentAndIndex>
    for crate::ffi::types::ShortPaymentAndIndex
{
    fn into_into_dart(self) -> crate::ffi::types::ShortPaymentAndIndex {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::UpdateClientRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.pubkey.into_into_dart().into_dart(),
            self.is_revoked.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::UpdateClientRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::UpdateClientRequest>
    for crate::ffi::api::UpdateClientRequest
{
    fn into_into_dart(self) -> crate::ffi::api::UpdateClientRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::api::UpdatePaymentNote {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.index.into_into_dart().into_dart(),
            self.note.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::api::UpdatePaymentNote
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::api::UpdatePaymentNote>
    for crate::ffi::api::UpdatePaymentNote
{
    fn into_into_dart(self) -> crate::ffi::api::UpdatePaymentNote {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::types::UserChannelId {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.id.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::types::UserChannelId
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::types::UserChannelId>
    for crate::ffi::types::UserChannelId
{
    fn into_into_dart(self) -> crate::ffi::types::UserChannelId {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for RustOpaqueNom<App> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<GDriveClientInner> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<GDriveRestoreCandidateRs> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<GDriveRestoreClientRs> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<RootSeedRs> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<SecretStoreRs> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<SettingsDbRs> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for StreamSink<String, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::ffi::app::AppHandle {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <RustOpaqueNom<App>>::sse_encode(self.inner, serializer);
    }
}

impl SseEncode for crate::ffi::types::AppUserInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.user_pk, serializer);
        <String>::sse_encode(self.node_pk, serializer);
        <String>::sse_encode(self.node_pk_proof, serializer);
    }
}

impl SseEncode for crate::ffi::api::Balance {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <u64>::sse_encode(self.total_sats, serializer);
        <u64>::sse_encode(self.onchain_sats, serializer);
        <u64>::sse_encode(self.lightning_sats, serializer);
        <u64>::sse_encode(self.lightning_usable_sats, serializer);
        <u64>::sse_encode(self.lightning_max_sendable_sats, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::ffi::types::ClientPaymentId {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <[u8; 32]>::sse_encode(self.id, serializer);
    }
}

impl SseEncode for crate::ffi::api::CloseChannelRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.channel_id, serializer);
    }
}

impl SseEncode for crate::ffi::types::Config {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::types::DeployEnv>::sse_encode(self.deploy_env, serializer);
        <crate::ffi::types::Network>::sse_encode(self.network, serializer);
        <String>::sse_encode(self.gateway_url, serializer);
        <bool>::sse_encode(self.use_sgx, serializer);
        <String>::sse_encode(self.base_app_data_dir, serializer);
        <bool>::sse_encode(self.use_mock_secret_store, serializer);
        <String>::sse_encode(self.user_agent, serializer);
    }
}

impl SseEncode for crate::ffi::types::ConfirmationPriority {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(
            match self {
                crate::ffi::types::ConfirmationPriority::High => 0,
                crate::ffi::types::ConfirmationPriority::Normal => 1,
                crate::ffi::types::ConfirmationPriority::Background => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::ffi::api::CreateClientRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Option<String>>::sse_encode(self.label, serializer);
        <crate::ffi::types::Scope>::sse_encode(self.scope, serializer);
    }
}

impl SseEncode for crate::ffi::api::CreateClientResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::types::RevocableClient>::sse_encode(
            self.client,
            serializer,
        );
        <String>::sse_encode(self.credentials, serializer);
    }
}

impl SseEncode for crate::ffi::api::CreateInvoiceRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <u32>::sse_encode(self.expiry_secs, serializer);
        <Option<u64>>::sse_encode(self.amount_sats, serializer);
        <Option<String>>::sse_encode(self.description, serializer);
    }
}

impl SseEncode for crate::ffi::api::CreateInvoiceResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::types::Invoice>::sse_encode(self.invoice, serializer);
    }
}

impl SseEncode for crate::ffi::api::CreateOfferRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Option<u32>>::sse_encode(self.expiry_secs, serializer);
        <Option<u64>>::sse_encode(self.amount_sats, serializer);
        <Option<String>>::sse_encode(self.description, serializer);
    }
}

impl SseEncode for crate::ffi::api::CreateOfferResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::types::Offer>::sse_encode(self.offer, serializer);
    }
}

impl SseEncode for crate::ffi::types::DeployEnv {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(
            match self {
                crate::ffi::types::DeployEnv::Dev => 0,
                crate::ffi::types::DeployEnv::Staging => 1,
                crate::ffi::types::DeployEnv::Prod => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::ffi::api::FeeEstimate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <u64>::sse_encode(self.amount_sats, serializer);
    }
}

impl SseEncode for crate::ffi::api::FiatRate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.fiat, serializer);
        <f64>::sse_encode(self.rate, serializer);
    }
}

impl SseEncode for crate::ffi::api::FiatRates {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i64>::sse_encode(self.timestamp_ms, serializer);
        <Vec<crate::ffi::api::FiatRate>>::sse_encode(self.rates, serializer);
    }
}

impl SseEncode for crate::ffi::gdrive::GDriveClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <RustOpaqueNom<GDriveClientInner>>::sse_encode(self.inner, serializer);
    }
}

impl SseEncode for crate::ffi::gdrive::GDriveOAuth2Flow {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.client_id, serializer);
        <String>::sse_encode(self.code_verifier, serializer);
        <String>::sse_encode(self.redirect_uri, serializer);
        <String>::sse_encode(self.redirect_uri_scheme, serializer);
        <String>::sse_encode(self.url, serializer);
    }
}

impl SseEncode for crate::ffi::gdrive::GDriveRestoreCandidate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <RustOpaqueNom<GDriveRestoreCandidateRs>>::sse_encode(
            self.inner, serializer,
        );
    }
}

impl SseEncode for crate::ffi::gdrive::GDriveRestoreClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <RustOpaqueNom<GDriveRestoreClientRs>>::sse_encode(
            self.inner, serializer,
        );
    }
}

impl SseEncode for crate::ffi::types::GDriveSignupCredentials {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.server_auth_code, serializer);
        <String>::sse_encode(self.password, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::ffi::types::Invoice {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.string, serializer);
        <Option<String>>::sse_encode(self.description, serializer);
        <i64>::sse_encode(self.created_at, serializer);
        <i64>::sse_encode(self.expires_at, serializer);
        <Option<u64>>::sse_encode(self.amount_sats, serializer);
        <String>::sse_encode(self.payee_pubkey, serializer);
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::ffi::api::ListChannelsResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Vec<crate::ffi::types::LxChannelDetails>>::sse_encode(
            self.channels,
            serializer,
        );
    }
}

impl SseEncode for Vec<crate::ffi::api::FiatRate> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::ffi::api::FiatRate>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::ffi::gdrive::GDriveRestoreCandidate> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::ffi::gdrive::GDriveRestoreCandidate>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::ffi::types::LxChannelDetails> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::ffi::types::LxChannelDetails>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::ffi::types::RevocableClient> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::ffi::types::RevocableClient>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::ffi::types::LxChannelDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.channel_id, serializer);
        <String>::sse_encode(self.counterparty_node_id, serializer);
        <u64>::sse_encode(self.channel_value_sats, serializer);
        <bool>::sse_encode(self.is_usable, serializer);
        <u64>::sse_encode(self.our_balance_sats, serializer);
        <u64>::sse_encode(self.outbound_capacity_sats, serializer);
        <u64>::sse_encode(self.next_outbound_htlc_limit_sats, serializer);
        <u64>::sse_encode(self.their_balance_sats, serializer);
        <u64>::sse_encode(self.inbound_capacity_sats, serializer);
    }
}

impl SseEncode for crate::ffi::types::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(
            match self {
                crate::ffi::types::Network::Mainnet => 0,
                crate::ffi::types::Network::Testnet3 => 1,
                crate::ffi::types::Network::Testnet4 => 2,
                crate::ffi::types::Network::Regtest => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::ffi::api::NodeInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.node_pk, serializer);
        <String>::sse_encode(self.version, serializer);
        <String>::sse_encode(self.measurement, serializer);
        <crate::ffi::api::Balance>::sse_encode(self.balance, serializer);
    }
}

impl SseEncode for crate::ffi::types::Offer {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.string, serializer);
        <Option<String>>::sse_encode(self.description, serializer);
        <Option<i64>>::sse_encode(self.expires_at, serializer);
        <Option<u64>>::sse_encode(self.amount_sats, serializer);
        <Option<String>>::sse_encode(self.payee, serializer);
        <Option<String>>::sse_encode(self.payee_pubkey, serializer);
    }
}

impl SseEncode for crate::ffi::settings::OnboardingStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Option<bool>>::sse_encode(self.has_connected_gdrive, serializer);
        <Option<bool>>::sse_encode(self.has_backed_up_seed_phrase, serializer);
    }
}

impl SseEncode for crate::ffi::types::Onchain {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.address, serializer);
        <Option<u64>>::sse_encode(self.amount_sats, serializer);
        <Option<String>>::sse_encode(self.label, serializer);
        <Option<String>>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::ffi::api::OpenChannelRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::types::UserChannelId>::sse_encode(
            self.user_channel_id,
            serializer,
        );
        <u64>::sse_encode(self.value_sats, serializer);
    }
}

impl SseEncode for crate::ffi::api::OpenChannelResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.channel_id, serializer);
    }
}

impl SseEncode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <usize>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::ffi::app::AppHandle> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::ffi::app::AppHandle>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::ffi::api::FeeEstimate> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::ffi::api::FeeEstimate>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::ffi::types::GDriveSignupCredentials> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::ffi::types::GDriveSignupCredentials>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::ffi::types::Invoice> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::ffi::types::Invoice>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::ffi::types::Offer> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::ffi::types::Offer>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::ffi::settings::OnboardingStatus> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::ffi::settings::OnboardingStatus>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::ffi::types::Payment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::ffi::types::Payment>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::ffi::types::RootSeed> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::ffi::types::RootSeed>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::ffi::types::ShortPaymentAndIndex> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::ffi::types::ShortPaymentAndIndex>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::ffi::api::PayInvoiceRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.invoice, serializer);
        <Option<u64>>::sse_encode(self.fallback_amount_sats, serializer);
        <Option<String>>::sse_encode(self.note, serializer);
    }
}

impl SseEncode for crate::ffi::api::PayInvoiceResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::types::PaymentIndex>::sse_encode(self.index, serializer);
    }
}

impl SseEncode for crate::ffi::api::PayOfferRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::types::ClientPaymentId>::sse_encode(self.cid, serializer);
        <String>::sse_encode(self.offer, serializer);
        <Option<u64>>::sse_encode(self.fallback_amount_sats, serializer);
        <Option<String>>::sse_encode(self.note, serializer);
    }
}

impl SseEncode for crate::ffi::api::PayOfferResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::types::PaymentIndex>::sse_encode(self.index, serializer);
    }
}

impl SseEncode for crate::ffi::api::PayOnchainRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::types::ClientPaymentId>::sse_encode(self.cid, serializer);
        <String>::sse_encode(self.address, serializer);
        <u64>::sse_encode(self.amount_sats, serializer);
        <crate::ffi::types::ConfirmationPriority>::sse_encode(
            self.priority,
            serializer,
        );
        <Option<String>>::sse_encode(self.note, serializer);
    }
}

impl SseEncode for crate::ffi::api::PayOnchainResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::types::PaymentIndex>::sse_encode(self.index, serializer);
        <String>::sse_encode(self.txid, serializer);
    }
}

impl SseEncode for crate::ffi::types::Payment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::types::PaymentIndex>::sse_encode(self.index, serializer);
        <crate::ffi::types::PaymentKind>::sse_encode(self.kind, serializer);
        <crate::ffi::types::PaymentDirection>::sse_encode(
            self.direction,
            serializer,
        );
        <Option<crate::ffi::types::Invoice>>::sse_encode(
            self.invoice,
            serializer,
        );
        <Option<String>>::sse_encode(self.offer_id, serializer);
        <Option<crate::ffi::types::Offer>>::sse_encode(self.offer, serializer);
        <Option<String>>::sse_encode(self.txid, serializer);
        <Option<String>>::sse_encode(self.replacement, serializer);
        <Option<u64>>::sse_encode(self.amount_sat, serializer);
        <u64>::sse_encode(self.fees_sat, serializer);
        <crate::ffi::types::PaymentStatus>::sse_encode(self.status, serializer);
        <String>::sse_encode(self.status_str, serializer);
        <Option<String>>::sse_encode(self.note, serializer);
        <i64>::sse_encode(self.created_at, serializer);
        <Option<i64>>::sse_encode(self.finalized_at, serializer);
    }
}

impl SseEncode for crate::ffi::types::PaymentDirection {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(
            match self {
                crate::ffi::types::PaymentDirection::Inbound => 0,
                crate::ffi::types::PaymentDirection::Outbound => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::ffi::types::PaymentIndex {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::ffi::types::PaymentKind {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(
            match self {
                crate::ffi::types::PaymentKind::Onchain => 0,
                crate::ffi::types::PaymentKind::Invoice => 1,
                crate::ffi::types::PaymentKind::Spontaneous => 2,
                crate::ffi::types::PaymentKind::Offer => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::ffi::types::PaymentMethod {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        match self {
            crate::ffi::types::PaymentMethod::Onchain(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::ffi::types::Onchain>::sse_encode(field0, serializer);
            }
            crate::ffi::types::PaymentMethod::Invoice(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::ffi::types::Invoice>::sse_encode(field0, serializer);
            }
            crate::ffi::types::PaymentMethod::Offer(field0) => {
                <i32>::sse_encode(2, serializer);
                <crate::ffi::types::Offer>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::ffi::types::PaymentStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(
            match self {
                crate::ffi::types::PaymentStatus::Pending => 0,
                crate::ffi::types::PaymentStatus::Completed => 1,
                crate::ffi::types::PaymentStatus::Failed => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::ffi::api::PreflightCloseChannelResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <u64>::sse_encode(self.fee_estimate_sats, serializer);
    }
}

impl SseEncode for crate::ffi::api::PreflightOpenChannelRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <u64>::sse_encode(self.value_sats, serializer);
    }
}

impl SseEncode for crate::ffi::api::PreflightOpenChannelResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <u64>::sse_encode(self.fee_estimate_sats, serializer);
    }
}

impl SseEncode for crate::ffi::api::PreflightPayInvoiceRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.invoice, serializer);
        <Option<u64>>::sse_encode(self.fallback_amount_sats, serializer);
    }
}

impl SseEncode for crate::ffi::api::PreflightPayInvoiceResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <u64>::sse_encode(self.amount_sats, serializer);
        <u64>::sse_encode(self.fees_sats, serializer);
    }
}

impl SseEncode for crate::ffi::api::PreflightPayOfferRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::types::ClientPaymentId>::sse_encode(self.cid, serializer);
        <String>::sse_encode(self.offer, serializer);
        <Option<u64>>::sse_encode(self.fallback_amount_sats, serializer);
    }
}

impl SseEncode for crate::ffi::api::PreflightPayOfferResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <u64>::sse_encode(self.amount_sats, serializer);
        <u64>::sse_encode(self.fees_sats, serializer);
    }
}

impl SseEncode for crate::ffi::api::PreflightPayOnchainRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.address, serializer);
        <u64>::sse_encode(self.amount_sats, serializer);
    }
}

impl SseEncode for crate::ffi::api::PreflightPayOnchainResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Option<crate::ffi::api::FeeEstimate>>::sse_encode(
            self.high, serializer,
        );
        <crate::ffi::api::FeeEstimate>::sse_encode(self.normal, serializer);
        <crate::ffi::api::FeeEstimate>::sse_encode(self.background, serializer);
    }
}

impl SseEncode for crate::ffi::types::RevocableClient {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.pubkey, serializer);
        <i64>::sse_encode(self.created_at, serializer);
        <Option<String>>::sse_encode(self.label, serializer);
        <crate::ffi::types::Scope>::sse_encode(self.scope, serializer);
    }
}

impl SseEncode for crate::ffi::types::RootSeed {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <RustOpaqueNom<RootSeedRs>>::sse_encode(self.inner, serializer);
    }
}

impl SseEncode for crate::ffi::types::Scope {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(
            match self {
                crate::ffi::types::Scope::All => 0,
                crate::ffi::types::Scope::NodeConnect => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::ffi::secret_store::SecretStore {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <RustOpaqueNom<SecretStoreRs>>::sse_encode(self.inner, serializer);
    }
}

impl SseEncode for crate::ffi::settings::Settings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Option<String>>::sse_encode(self.locale, serializer);
        <Option<String>>::sse_encode(self.fiat_currency, serializer);
        <Option<bool>>::sse_encode(self.show_split_balances, serializer);
        <Option<crate::ffi::settings::OnboardingStatus>>::sse_encode(
            self.onboarding_status,
            serializer,
        );
    }
}

impl SseEncode for crate::ffi::settings::SettingsDb {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <RustOpaqueNom<SettingsDbRs>>::sse_encode(self.inner, serializer);
    }
}

impl SseEncode for crate::ffi::types::ShortPayment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::types::PaymentIndex>::sse_encode(self.index, serializer);
        <crate::ffi::types::PaymentKind>::sse_encode(self.kind, serializer);
        <crate::ffi::types::PaymentDirection>::sse_encode(
            self.direction,
            serializer,
        );
        <Option<u64>>::sse_encode(self.amount_sat, serializer);
        <crate::ffi::types::PaymentStatus>::sse_encode(self.status, serializer);
        <Option<String>>::sse_encode(self.note, serializer);
        <i64>::sse_encode(self.created_at, serializer);
    }
}

impl SseEncode for crate::ffi::types::ShortPaymentAndIndex {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <usize>::sse_encode(self.vec_idx, serializer);
        <crate::ffi::types::ShortPayment>::sse_encode(self.payment, serializer);
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for [u8; 16] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Vec<u8>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for [u8; 32] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Vec<u8>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
    }
}

impl SseEncode for crate::ffi::api::UpdateClientRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.pubkey, serializer);
        <Option<bool>>::sse_encode(self.is_revoked, serializer);
    }
}

impl SseEncode for crate::ffi::api::UpdatePaymentNote {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::types::PaymentIndex>::sse_encode(self.index, serializer);
        <Option<String>>::sse_encode(self.note, serializer);
    }
}

impl SseEncode for crate::ffi::types::UserChannelId {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <[u8; 16]>::sse_encode(self.id, serializer);
    }
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.7.1.

    // Section: imports

    use flutter_rust_bridge::{
        for_generated::{
            byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt},
            transform_result_dco, Lifetimeable, Lockable,
        },
        Handler, IntoIntoDart,
    };

    use super::*;
    use crate::{
        ffi::{app::*, gdrive::*, secret_store::*},
        *,
    };

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    #[no_mangle]
    pub extern "C" fn frbgen_app_rs_dart_rust_arc_increment_strong_count_RustOpaque_App(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<App>::increment_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_app_rs_dart_rust_arc_decrement_strong_count_RustOpaque_App(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<App>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_app_rs_dart_rust_arc_increment_strong_count_RustOpaque_GDriveClientInner(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<GDriveClientInner>::increment_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_app_rs_dart_rust_arc_decrement_strong_count_RustOpaque_GDriveClientInner(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<GDriveClientInner>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_app_rs_dart_rust_arc_increment_strong_count_RustOpaque_GDriveRestoreCandidateRs(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<GDriveRestoreCandidateRs>::increment_strong_count(
                ptr as _,
            );
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_app_rs_dart_rust_arc_decrement_strong_count_RustOpaque_GDriveRestoreCandidateRs(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<GDriveRestoreCandidateRs>::decrement_strong_count(
                ptr as _,
            );
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_app_rs_dart_rust_arc_increment_strong_count_RustOpaque_GDriveRestoreClientRs(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<GDriveRestoreClientRs>::increment_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_app_rs_dart_rust_arc_decrement_strong_count_RustOpaque_GDriveRestoreClientRs(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<GDriveRestoreClientRs>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_app_rs_dart_rust_arc_increment_strong_count_RustOpaque_RootSeedRs(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<RootSeedRs>::increment_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_app_rs_dart_rust_arc_decrement_strong_count_RustOpaque_RootSeedRs(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<RootSeedRs>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_app_rs_dart_rust_arc_increment_strong_count_RustOpaque_SecretStoreRs(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<SecretStoreRs>::increment_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_app_rs_dart_rust_arc_decrement_strong_count_RustOpaque_SecretStoreRs(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<SecretStoreRs>::decrement_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_app_rs_dart_rust_arc_increment_strong_count_RustOpaque_SettingsDbRs(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<SettingsDbRs>::increment_strong_count(ptr as _);
        }
    }

    #[no_mangle]
    pub extern "C" fn frbgen_app_rs_dart_rust_arc_decrement_strong_count_RustOpaque_SettingsDbRs(
        ptr: *const std::ffi::c_void,
    ) {
        unsafe {
            StdArc::<SettingsDbRs>::decrement_strong_count(ptr as _);
        }
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
