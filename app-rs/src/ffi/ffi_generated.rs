// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::{
    for_generated::{
        byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt},
        transform_result_dco, Lifetimeable, Lockable,
    },
    Handler, IntoIntoDart,
};

use crate::ffi::ffi::*;

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -536604633;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__ffi__ffi__app_handle_create_invoice_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_create_invoice", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::ffi::CreateInvoiceRequest>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::ffi::AppHandle::create_invoice(&api_that, api_req).await?;  Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__ffi__app_handle_delete_payment_db_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_delete_payment_db", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move ||  {
                         let output_ok = crate::ffi::ffi::AppHandle::delete_payment_db(&api_that)?;  Ok(output_ok)
                    })())
                } })
}
fn wire__crate__ffi__ffi__app_handle_fiat_rates_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_fiat_rates", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::ffi::AppHandle::fiat_rates(&api_that).await?;  Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__ffi__app_handle_get_address_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_address", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::ffi::AppHandle::get_address(&api_that).await?;  Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__ffi__app_handle_get_finalized_not_junk_short_payment_by_scroll_idx_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_finalized_not_junk_short_payment_by_scroll_idx", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);
let api_scroll_idx = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::ffi::AppHandle::get_finalized_not_junk_short_payment_by_scroll_idx(&api_that, api_scroll_idx))?;  Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__ffi__app_handle_get_finalized_short_payment_by_scroll_idx_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_finalized_short_payment_by_scroll_idx", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);
let api_scroll_idx = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::ffi::AppHandle::get_finalized_short_payment_by_scroll_idx(&api_that, api_scroll_idx))?;  Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__ffi__app_handle_get_num_finalized_not_junk_payments_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_num_finalized_not_junk_payments", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::ffi::AppHandle::get_num_finalized_not_junk_payments(&api_that))?;  Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__ffi__app_handle_get_num_finalized_payments_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_num_finalized_payments", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::ffi::AppHandle::get_num_finalized_payments(&api_that))?;  Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__ffi__app_handle_get_num_payments_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_num_payments", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::ffi::AppHandle::get_num_payments(&api_that))?;  Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__ffi__app_handle_get_num_pending_not_junk_payments_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_num_pending_not_junk_payments", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::ffi::AppHandle::get_num_pending_not_junk_payments(&api_that))?;  Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__ffi__app_handle_get_num_pending_payments_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_num_pending_payments", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::ffi::AppHandle::get_num_pending_payments(&api_that))?;  Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__ffi__app_handle_get_payment_by_vec_idx_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_payment_by_vec_idx", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);
let api_vec_idx = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::ffi::AppHandle::get_payment_by_vec_idx(&api_that, api_vec_idx))?;  Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__ffi__app_handle_get_pending_not_junk_short_payment_by_scroll_idx_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_pending_not_junk_short_payment_by_scroll_idx", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);
let api_scroll_idx = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::ffi::AppHandle::get_pending_not_junk_short_payment_by_scroll_idx(&api_that, api_scroll_idx))?;  Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__ffi__app_handle_get_pending_short_payment_by_scroll_idx_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_pending_short_payment_by_scroll_idx", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);
let api_scroll_idx = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::ffi::AppHandle::get_pending_short_payment_by_scroll_idx(&api_that, api_scroll_idx))?;  Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__ffi__app_handle_get_short_payment_by_scroll_idx_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_short_payment_by_scroll_idx", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);
let api_scroll_idx = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::ffi::AppHandle::get_short_payment_by_scroll_idx(&api_that, api_scroll_idx))?;  Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__ffi__app_handle_get_vec_idx_by_payment_index_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_get_vec_idx_by_payment_index", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);
let api_payment_index = <crate::ffi::ffi::PaymentIndex>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::ffi::ffi::AppHandle::get_vec_idx_by_payment_index(&api_that, api_payment_index))?;  Ok(output_ok)
                    })())
                } })
}
fn wire__crate__ffi__ffi__app_handle_load_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_load", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_config = <crate::ffi::ffi::Config>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::ffi::AppHandle::load(api_config).await?;  Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__ffi__app_handle_node_info_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_node_info", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::ffi::AppHandle::node_info(&api_that).await?;  Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__ffi__app_handle_pay_invoice_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_pay_invoice", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::ffi::PayInvoiceRequest>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::ffi::AppHandle::pay_invoice(&api_that, api_req).await?;  Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__ffi__app_handle_pay_onchain_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_pay_onchain", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::ffi::PayOnchainRequest>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::ffi::AppHandle::pay_onchain(&api_that, api_req).await?;  Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__ffi__app_handle_preflight_pay_invoice_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_preflight_pay_invoice", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::ffi::PreflightPayInvoiceRequest>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::ffi::AppHandle::preflight_pay_invoice(&api_that, api_req).await?;  Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__ffi__app_handle_preflight_pay_onchain_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_preflight_pay_onchain", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::ffi::PreflightPayOnchainRequest>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::ffi::AppHandle::preflight_pay_onchain(&api_that, api_req).await?;  Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__ffi__app_handle_restore_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_restore", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_config = <crate::ffi::ffi::Config>::sse_decode(&mut deserializer);
let api_seed_phrase = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::ffi::AppHandle::restore(api_config, api_seed_phrase).await?;  Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__ffi__app_handle_signup_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_signup", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_config = <crate::ffi::ffi::Config>::sse_decode(&mut deserializer);
let api_google_auth_code = <String>::sse_decode(&mut deserializer);
let api_password = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::ffi::AppHandle::signup(api_config, api_google_auth_code, api_password).await?;  Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__ffi__app_handle_sync_payments_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_sync_payments", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::ffi::AppHandle::sync_payments(&api_that).await?;  Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__ffi__app_handle_update_payment_note_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_handle_update_payment_note", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::ffi::ffi::AppHandle>::sse_decode(&mut deserializer);
let api_req = <crate::ffi::ffi::UpdatePaymentNote>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || async move {
                         let output_ok = crate::ffi::ffi::AppHandle::update_payment_note(&api_that, api_req).await?;  Ok(output_ok)
                    })().await)
                } })
}
fn wire__crate__ffi__ffi__debug_delete_latest_provisioned_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "debug_delete_latest_provisioned", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_config = <crate::ffi::ffi::Config>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || {
                     let output_ok = crate::ffi::ffi::debug_delete_latest_provisioned(api_config)?;  Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__ffi__debug_delete_secret_store_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "debug_delete_secret_store", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_config = <crate::ffi::ffi::Config>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || {
                     let output_ok = crate::ffi::ffi::debug_delete_secret_store(api_config)?;  Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__ffi__debug_unconditional_error_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "debug_unconditional_error", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move ||  {
                         let output_ok = crate::ffi::ffi::debug_unconditional_error()?;  Ok(output_ok)
                    })())
                } })
}
fn wire__crate__ffi__ffi__debug_unconditional_panic_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "debug_unconditional_panic", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok({ crate::ffi::ffi::debug_unconditional_panic(); })?;  Ok(output_ok)
                    })())
                } })
}
fn wire__crate__ffi__ffi__deploy_env_from_str_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "deploy_env_from_str", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_s = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || {
                     let output_ok = crate::ffi::ffi::deploy_env_from_str(api_s)?;  Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__ffi__form_validate_bitcoin_address_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "form_validate_bitcoin_address", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_address_str = <String>::sse_decode(&mut deserializer);
let api_current_network = <crate::ffi::ffi::Network>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::ffi::form_validate_bitcoin_address(api_address_str, api_current_network))?;  Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__ffi__form_validate_password_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "form_validate_password", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_password = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::ffi::form_validate_password(api_password))?;  Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__ffi__gen_client_payment_id_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "gen_client_payment_id", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::ffi::ffi::gen_client_payment_id())?;  Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__ffi__init_rust_log_stream_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "init_rust_log_stream", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_rust_log_tx = <StreamSink<String,flutter_rust_bridge::for_generated::SseCodec>>::sse_decode(&mut deserializer);
let api_rust_log = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok({ crate::ffi::ffi::init_rust_log_stream(api_rust_log_tx, api_rust_log); })?;  Ok(output_ok)
                    })())
                } })
}
fn wire__crate__ffi__ffi__network_from_str_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "network_from_str", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_s = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move || {
                     let output_ok = crate::ffi::ffi::network_from_str(api_s)?;  Ok(output_ok)
                })()) })
}
fn wire__crate__ffi__ffi__payment_uri_resolve_best_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "payment_uri_resolve_best", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_network = <crate::ffi::ffi::Network>::sse_decode(&mut deserializer);
let api_uri_str = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>((move ||  {
                         let output_ok = crate::ffi::ffi::payment_uri_resolve_best(api_network, api_uri_str)?;  Ok(output_ok)
                    })())
                } })
}

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!(
            "{}", inner
        );
    }
}

impl SseDecode for RustOpaqueNom<App> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for StreamSink<String, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::ffi::ffi::AppHandle {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_inner = <RustOpaqueNom<App>>::sse_decode(deserializer);
        return crate::ffi::ffi::AppHandle { inner: var_inner };
    }
}

impl SseDecode for crate::ffi::ffi::Balance {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_totalSats = <u64>::sse_decode(deserializer);
        let mut var_lightningSats = <u64>::sse_decode(deserializer);
        let mut var_onchainSats = <u64>::sse_decode(deserializer);
        return crate::ffi::ffi::Balance {
            total_sats: var_totalSats,
            lightning_sats: var_lightningSats,
            onchain_sats: var_onchainSats,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::ffi::ffi::ClientPaymentId {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_id = <[u8; 32]>::sse_decode(deserializer);
        return crate::ffi::ffi::ClientPaymentId { id: var_id };
    }
}

impl SseDecode for crate::ffi::ffi::Config {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_deployEnv =
            <crate::ffi::ffi::DeployEnv>::sse_decode(deserializer);
        let mut var_network =
            <crate::ffi::ffi::Network>::sse_decode(deserializer);
        let mut var_gatewayUrl = <String>::sse_decode(deserializer);
        let mut var_useSgx = <bool>::sse_decode(deserializer);
        let mut var_baseAppDataDir = <String>::sse_decode(deserializer);
        let mut var_useMockSecretStore = <bool>::sse_decode(deserializer);
        return crate::ffi::ffi::Config {
            deploy_env: var_deployEnv,
            network: var_network,
            gateway_url: var_gatewayUrl,
            use_sgx: var_useSgx,
            base_app_data_dir: var_baseAppDataDir,
            use_mock_secret_store: var_useMockSecretStore,
        };
    }
}

impl SseDecode for crate::ffi::ffi::ConfirmationPriority {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::ffi::ffi::ConfirmationPriority::High,
            1 => crate::ffi::ffi::ConfirmationPriority::Normal,
            2 => crate::ffi::ffi::ConfirmationPriority::Background,
            _ => unreachable!(
                "Invalid variant for ConfirmationPriority: {}",
                inner
            ),
        };
    }
}

impl SseDecode for crate::ffi::ffi::CreateInvoiceRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_expirySecs = <u32>::sse_decode(deserializer);
        let mut var_amountSats = <Option<u64>>::sse_decode(deserializer);
        let mut var_description = <Option<String>>::sse_decode(deserializer);
        return crate::ffi::ffi::CreateInvoiceRequest {
            expiry_secs: var_expirySecs,
            amount_sats: var_amountSats,
            description: var_description,
        };
    }
}

impl SseDecode for crate::ffi::ffi::CreateInvoiceResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_invoice =
            <crate::ffi::ffi::Invoice>::sse_decode(deserializer);
        return crate::ffi::ffi::CreateInvoiceResponse {
            invoice: var_invoice,
        };
    }
}

impl SseDecode for crate::ffi::ffi::DeployEnv {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::ffi::ffi::DeployEnv::Dev,
            1 => crate::ffi::ffi::DeployEnv::Staging,
            2 => crate::ffi::ffi::DeployEnv::Prod,
            _ => unreachable!("Invalid variant for DeployEnv: {}", inner),
        };
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::ffi::ffi::FeeEstimate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_amountSats = <u64>::sse_decode(deserializer);
        return crate::ffi::ffi::FeeEstimate {
            amount_sats: var_amountSats,
        };
    }
}

impl SseDecode for crate::ffi::ffi::FiatRate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_fiat = <String>::sse_decode(deserializer);
        let mut var_rate = <f64>::sse_decode(deserializer);
        return crate::ffi::ffi::FiatRate {
            fiat: var_fiat,
            rate: var_rate,
        };
    }
}

impl SseDecode for crate::ffi::ffi::FiatRates {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_timestampMs = <i64>::sse_decode(deserializer);
        let mut var_rates =
            <Vec<crate::ffi::ffi::FiatRate>>::sse_decode(deserializer);
        return crate::ffi::ffi::FiatRates {
            timestamp_ms: var_timestampMs,
            rates: var_rates,
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::ffi::ffi::Invoice {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_string = <String>::sse_decode(deserializer);
        let mut var_description = <Option<String>>::sse_decode(deserializer);
        let mut var_createdAt = <i64>::sse_decode(deserializer);
        let mut var_expiresAt = <i64>::sse_decode(deserializer);
        let mut var_amountSats = <Option<u64>>::sse_decode(deserializer);
        let mut var_payeePubkey = <String>::sse_decode(deserializer);
        return crate::ffi::ffi::Invoice {
            string: var_string,
            description: var_description,
            created_at: var_createdAt,
            expires_at: var_expiresAt,
            amount_sats: var_amountSats,
            payee_pubkey: var_payeePubkey,
        };
    }
}

impl SseDecode for Vec<crate::ffi::ffi::FiatRate> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::ffi::ffi::FiatRate>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::ffi::ffi::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::ffi::ffi::Network::Mainnet,
            1 => crate::ffi::ffi::Network::Testnet,
            2 => crate::ffi::ffi::Network::Regtest,
            _ => unreachable!("Invalid variant for Network: {}", inner),
        };
    }
}

impl SseDecode for crate::ffi::ffi::NodeInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_nodePk = <String>::sse_decode(deserializer);
        let mut var_version = <String>::sse_decode(deserializer);
        let mut var_measurement = <String>::sse_decode(deserializer);
        let mut var_balance =
            <crate::ffi::ffi::Balance>::sse_decode(deserializer);
        return crate::ffi::ffi::NodeInfo {
            node_pk: var_nodePk,
            version: var_version,
            measurement: var_measurement,
            balance: var_balance,
        };
    }
}

impl SseDecode for crate::ffi::ffi::Onchain {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_amountSats = <Option<u64>>::sse_decode(deserializer);
        let mut var_label = <Option<String>>::sse_decode(deserializer);
        let mut var_message = <Option<String>>::sse_decode(deserializer);
        return crate::ffi::ffi::Onchain {
            address: var_address,
            amount_sats: var_amountSats,
            label: var_label,
            message: var_message,
        };
    }
}

impl SseDecode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<usize>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::ffi::ffi::AppHandle> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::ffi::ffi::AppHandle>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::ffi::ffi::FeeEstimate> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::ffi::ffi::FeeEstimate>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::ffi::ffi::Invoice> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::ffi::ffi::Invoice>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::ffi::ffi::Payment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::ffi::ffi::Payment>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::ffi::ffi::ShortPaymentAndIndex> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::ffi::ffi::ShortPaymentAndIndex>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::ffi::ffi::PayInvoiceRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_invoice = <String>::sse_decode(deserializer);
        let mut var_fallbackAmountSats =
            <Option<u64>>::sse_decode(deserializer);
        let mut var_note = <Option<String>>::sse_decode(deserializer);
        return crate::ffi::ffi::PayInvoiceRequest {
            invoice: var_invoice,
            fallback_amount_sats: var_fallbackAmountSats,
            note: var_note,
        };
    }
}

impl SseDecode for crate::ffi::ffi::PayInvoiceResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_index =
            <crate::ffi::ffi::PaymentIndex>::sse_decode(deserializer);
        return crate::ffi::ffi::PayInvoiceResponse { index: var_index };
    }
}

impl SseDecode for crate::ffi::ffi::PayOnchainRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_cid =
            <crate::ffi::ffi::ClientPaymentId>::sse_decode(deserializer);
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_amountSats = <u64>::sse_decode(deserializer);
        let mut var_priority =
            <crate::ffi::ffi::ConfirmationPriority>::sse_decode(deserializer);
        let mut var_note = <Option<String>>::sse_decode(deserializer);
        return crate::ffi::ffi::PayOnchainRequest {
            cid: var_cid,
            address: var_address,
            amount_sats: var_amountSats,
            priority: var_priority,
            note: var_note,
        };
    }
}

impl SseDecode for crate::ffi::ffi::PayOnchainResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_index =
            <crate::ffi::ffi::PaymentIndex>::sse_decode(deserializer);
        let mut var_txid = <String>::sse_decode(deserializer);
        return crate::ffi::ffi::PayOnchainResponse {
            index: var_index,
            txid: var_txid,
        };
    }
}

impl SseDecode for crate::ffi::ffi::Payment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_index =
            <crate::ffi::ffi::PaymentIndex>::sse_decode(deserializer);
        let mut var_kind =
            <crate::ffi::ffi::PaymentKind>::sse_decode(deserializer);
        let mut var_direction =
            <crate::ffi::ffi::PaymentDirection>::sse_decode(deserializer);
        let mut var_invoice =
            <Option<crate::ffi::ffi::Invoice>>::sse_decode(deserializer);
        let mut var_replacement = <Option<String>>::sse_decode(deserializer);
        let mut var_amountSat = <Option<u64>>::sse_decode(deserializer);
        let mut var_feesSat = <u64>::sse_decode(deserializer);
        let mut var_status =
            <crate::ffi::ffi::PaymentStatus>::sse_decode(deserializer);
        let mut var_statusStr = <String>::sse_decode(deserializer);
        let mut var_note = <Option<String>>::sse_decode(deserializer);
        let mut var_createdAt = <i64>::sse_decode(deserializer);
        let mut var_finalizedAt = <Option<i64>>::sse_decode(deserializer);
        return crate::ffi::ffi::Payment {
            index: var_index,
            kind: var_kind,
            direction: var_direction,
            invoice: var_invoice,
            replacement: var_replacement,
            amount_sat: var_amountSat,
            fees_sat: var_feesSat,
            status: var_status,
            status_str: var_statusStr,
            note: var_note,
            created_at: var_createdAt,
            finalized_at: var_finalizedAt,
        };
    }
}

impl SseDecode for crate::ffi::ffi::PaymentDirection {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::ffi::ffi::PaymentDirection::Inbound,
            1 => crate::ffi::ffi::PaymentDirection::Outbound,
            _ =>
                unreachable!("Invalid variant for PaymentDirection: {}", inner),
        };
    }
}

impl SseDecode for crate::ffi::ffi::PaymentIndex {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        return crate::ffi::ffi::PaymentIndex(var_field0);
    }
}

impl SseDecode for crate::ffi::ffi::PaymentKind {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::ffi::ffi::PaymentKind::Onchain,
            1 => crate::ffi::ffi::PaymentKind::Invoice,
            2 => crate::ffi::ffi::PaymentKind::Spontaneous,
            _ => unreachable!("Invalid variant for PaymentKind: {}", inner),
        };
    }
}

impl SseDecode for crate::ffi::ffi::PaymentMethod {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 =
                    <crate::ffi::ffi::Onchain>::sse_decode(deserializer);
                return crate::ffi::ffi::PaymentMethod::Onchain(var_field0);
            }
            1 => {
                let mut var_field0 =
                    <crate::ffi::ffi::Invoice>::sse_decode(deserializer);
                return crate::ffi::ffi::PaymentMethod::Invoice(var_field0);
            }
            2 => {
                return crate::ffi::ffi::PaymentMethod::Offer;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::ffi::ffi::PaymentStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::ffi::ffi::PaymentStatus::Pending,
            1 => crate::ffi::ffi::PaymentStatus::Completed,
            2 => crate::ffi::ffi::PaymentStatus::Failed,
            _ => unreachable!("Invalid variant for PaymentStatus: {}", inner),
        };
    }
}

impl SseDecode for crate::ffi::ffi::PreflightPayInvoiceRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_invoice = <String>::sse_decode(deserializer);
        let mut var_fallbackAmountSats =
            <Option<u64>>::sse_decode(deserializer);
        return crate::ffi::ffi::PreflightPayInvoiceRequest {
            invoice: var_invoice,
            fallback_amount_sats: var_fallbackAmountSats,
        };
    }
}

impl SseDecode for crate::ffi::ffi::PreflightPayInvoiceResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_amountSats = <u64>::sse_decode(deserializer);
        let mut var_feesSats = <u64>::sse_decode(deserializer);
        return crate::ffi::ffi::PreflightPayInvoiceResponse {
            amount_sats: var_amountSats,
            fees_sats: var_feesSats,
        };
    }
}

impl SseDecode for crate::ffi::ffi::PreflightPayOnchainRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_amountSats = <u64>::sse_decode(deserializer);
        return crate::ffi::ffi::PreflightPayOnchainRequest {
            address: var_address,
            amount_sats: var_amountSats,
        };
    }
}

impl SseDecode for crate::ffi::ffi::PreflightPayOnchainResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_high =
            <Option<crate::ffi::ffi::FeeEstimate>>::sse_decode(deserializer);
        let mut var_normal =
            <crate::ffi::ffi::FeeEstimate>::sse_decode(deserializer);
        let mut var_background =
            <crate::ffi::ffi::FeeEstimate>::sse_decode(deserializer);
        return crate::ffi::ffi::PreflightPayOnchainResponse {
            high: var_high,
            normal: var_normal,
            background: var_background,
        };
    }
}

impl SseDecode for crate::ffi::ffi::ShortPayment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_index =
            <crate::ffi::ffi::PaymentIndex>::sse_decode(deserializer);
        let mut var_kind =
            <crate::ffi::ffi::PaymentKind>::sse_decode(deserializer);
        let mut var_direction =
            <crate::ffi::ffi::PaymentDirection>::sse_decode(deserializer);
        let mut var_amountSat = <Option<u64>>::sse_decode(deserializer);
        let mut var_status =
            <crate::ffi::ffi::PaymentStatus>::sse_decode(deserializer);
        let mut var_note = <Option<String>>::sse_decode(deserializer);
        let mut var_createdAt = <i64>::sse_decode(deserializer);
        return crate::ffi::ffi::ShortPayment {
            index: var_index,
            kind: var_kind,
            direction: var_direction,
            amount_sat: var_amountSat,
            status: var_status,
            note: var_note,
            created_at: var_createdAt,
        };
    }
}

impl SseDecode for crate::ffi::ffi::ShortPaymentAndIndex {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_vecIdx = <usize>::sse_decode(deserializer);
        let mut var_payment =
            <crate::ffi::ffi::ShortPayment>::sse_decode(deserializer);
        return crate::ffi::ffi::ShortPaymentAndIndex {
            vec_idx: var_vecIdx,
            payment: var_payment,
        };
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for [u8; 32] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
    }
}

impl SseDecode for crate::ffi::ffi::UpdatePaymentNote {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        let mut var_index =
            <crate::ffi::ffi::PaymentIndex>::sse_decode(deserializer);
        let mut var_note = <Option<String>>::sse_decode(deserializer);
        return crate::ffi::ffi::UpdatePaymentNote {
            index: var_index,
            note: var_note,
        };
    }
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(
        deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer,
    ) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__ffi__ffi__app_handle_create_invoice_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        2 => wire__crate__ffi__ffi__app_handle_delete_payment_db_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        3 => wire__crate__ffi__ffi__app_handle_fiat_rates_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        4 => wire__crate__ffi__ffi__app_handle_get_address_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        16 =>
            wire__crate__ffi__ffi__app_handle_get_vec_idx_by_payment_index_impl(
                port,
                ptr,
                rust_vec_len,
                data_len,
            ),
        17 => wire__crate__ffi__ffi__app_handle_load_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        18 => wire__crate__ffi__ffi__app_handle_node_info_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        19 => wire__crate__ffi__ffi__app_handle_pay_invoice_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        20 => wire__crate__ffi__ffi__app_handle_pay_onchain_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        21 => wire__crate__ffi__ffi__app_handle_preflight_pay_invoice_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        22 => wire__crate__ffi__ffi__app_handle_preflight_pay_onchain_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        23 => wire__crate__ffi__ffi__app_handle_restore_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        24 => wire__crate__ffi__ffi__app_handle_signup_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        25 => wire__crate__ffi__ffi__app_handle_sync_payments_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        26 => wire__crate__ffi__ffi__app_handle_update_payment_note_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        29 => wire__crate__ffi__ffi__debug_unconditional_error_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        30 => wire__crate__ffi__ffi__debug_unconditional_panic_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        35 => wire__crate__ffi__ffi__init_rust_log_stream_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        37 => wire__crate__ffi__ffi__payment_uri_resolve_best_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
                        5 => wire__crate__ffi__ffi__app_handle_get_finalized_not_junk_short_payment_by_scroll_idx_impl(ptr, rust_vec_len, data_len),
6 => wire__crate__ffi__ffi__app_handle_get_finalized_short_payment_by_scroll_idx_impl(ptr, rust_vec_len, data_len),
7 => wire__crate__ffi__ffi__app_handle_get_num_finalized_not_junk_payments_impl(ptr, rust_vec_len, data_len),
8 => wire__crate__ffi__ffi__app_handle_get_num_finalized_payments_impl(ptr, rust_vec_len, data_len),
9 => wire__crate__ffi__ffi__app_handle_get_num_payments_impl(ptr, rust_vec_len, data_len),
10 => wire__crate__ffi__ffi__app_handle_get_num_pending_not_junk_payments_impl(ptr, rust_vec_len, data_len),
11 => wire__crate__ffi__ffi__app_handle_get_num_pending_payments_impl(ptr, rust_vec_len, data_len),
12 => wire__crate__ffi__ffi__app_handle_get_payment_by_vec_idx_impl(ptr, rust_vec_len, data_len),
13 => wire__crate__ffi__ffi__app_handle_get_pending_not_junk_short_payment_by_scroll_idx_impl(ptr, rust_vec_len, data_len),
14 => wire__crate__ffi__ffi__app_handle_get_pending_short_payment_by_scroll_idx_impl(ptr, rust_vec_len, data_len),
15 => wire__crate__ffi__ffi__app_handle_get_short_payment_by_scroll_idx_impl(ptr, rust_vec_len, data_len),
27 => wire__crate__ffi__ffi__debug_delete_latest_provisioned_impl(ptr, rust_vec_len, data_len),
28 => wire__crate__ffi__ffi__debug_delete_secret_store_impl(ptr, rust_vec_len, data_len),
31 => wire__crate__ffi__ffi__deploy_env_from_str_impl(ptr, rust_vec_len, data_len),
32 => wire__crate__ffi__ffi__form_validate_bitcoin_address_impl(ptr, rust_vec_len, data_len),
33 => wire__crate__ffi__ffi__form_validate_password_impl(ptr, rust_vec_len, data_len),
34 => wire__crate__ffi__ffi__gen_client_payment_id_impl(ptr, rust_vec_len, data_len),
36 => wire__crate__ffi__ffi__network_from_str_impl(ptr, rust_vec_len, data_len),
                        _ => unreachable!(),
                    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::AppHandle {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.inner.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::AppHandle
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::AppHandle>
    for crate::ffi::ffi::AppHandle
{
    fn into_into_dart(self) -> crate::ffi::ffi::AppHandle {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::Balance {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.total_sats.into_into_dart().into_dart(),
            self.lightning_sats.into_into_dart().into_dart(),
            self.onchain_sats.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::Balance
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::Balance>
    for crate::ffi::ffi::Balance
{
    fn into_into_dart(self) -> crate::ffi::ffi::Balance {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::ClientPaymentId {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.id.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::ClientPaymentId
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::ClientPaymentId>
    for crate::ffi::ffi::ClientPaymentId
{
    fn into_into_dart(self) -> crate::ffi::ffi::ClientPaymentId {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::Config {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.deploy_env.into_into_dart().into_dart(),
            self.network.into_into_dart().into_dart(),
            self.gateway_url.into_into_dart().into_dart(),
            self.use_sgx.into_into_dart().into_dart(),
            self.base_app_data_dir.into_into_dart().into_dart(),
            self.use_mock_secret_store.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::Config
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::Config>
    for crate::ffi::ffi::Config
{
    fn into_into_dart(self) -> crate::ffi::ffi::Config {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::ConfirmationPriority {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::High => 0.into_dart(),
            Self::Normal => 1.into_dart(),
            Self::Background => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::ConfirmationPriority
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::ConfirmationPriority>
    for crate::ffi::ffi::ConfirmationPriority
{
    fn into_into_dart(self) -> crate::ffi::ffi::ConfirmationPriority {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::CreateInvoiceRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.expiry_secs.into_into_dart().into_dart(),
            self.amount_sats.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::CreateInvoiceRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::CreateInvoiceRequest>
    for crate::ffi::ffi::CreateInvoiceRequest
{
    fn into_into_dart(self) -> crate::ffi::ffi::CreateInvoiceRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::CreateInvoiceResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.invoice.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::CreateInvoiceResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::CreateInvoiceResponse>
    for crate::ffi::ffi::CreateInvoiceResponse
{
    fn into_into_dart(self) -> crate::ffi::ffi::CreateInvoiceResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::DeployEnv {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Dev => 0.into_dart(),
            Self::Staging => 1.into_dart(),
            Self::Prod => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::DeployEnv
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::DeployEnv>
    for crate::ffi::ffi::DeployEnv
{
    fn into_into_dart(self) -> crate::ffi::ffi::DeployEnv {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::FeeEstimate {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.amount_sats.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::FeeEstimate
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::FeeEstimate>
    for crate::ffi::ffi::FeeEstimate
{
    fn into_into_dart(self) -> crate::ffi::ffi::FeeEstimate {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::FiatRate {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.fiat.into_into_dart().into_dart(),
            self.rate.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::FiatRate
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::FiatRate>
    for crate::ffi::ffi::FiatRate
{
    fn into_into_dart(self) -> crate::ffi::ffi::FiatRate {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::FiatRates {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.timestamp_ms.into_into_dart().into_dart(),
            self.rates.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::FiatRates
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::FiatRates>
    for crate::ffi::ffi::FiatRates
{
    fn into_into_dart(self) -> crate::ffi::ffi::FiatRates {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::Invoice {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.string.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
            self.created_at.into_into_dart().into_dart(),
            self.expires_at.into_into_dart().into_dart(),
            self.amount_sats.into_into_dart().into_dart(),
            self.payee_pubkey.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::Invoice
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::Invoice>
    for crate::ffi::ffi::Invoice
{
    fn into_into_dart(self) -> crate::ffi::ffi::Invoice {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::Network {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Mainnet => 0.into_dart(),
            Self::Testnet => 1.into_dart(),
            Self::Regtest => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::Network
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::Network>
    for crate::ffi::ffi::Network
{
    fn into_into_dart(self) -> crate::ffi::ffi::Network {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::NodeInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.node_pk.into_into_dart().into_dart(),
            self.version.into_into_dart().into_dart(),
            self.measurement.into_into_dart().into_dart(),
            self.balance.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::NodeInfo
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::NodeInfo>
    for crate::ffi::ffi::NodeInfo
{
    fn into_into_dart(self) -> crate::ffi::ffi::NodeInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::Onchain {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.address.into_into_dart().into_dart(),
            self.amount_sats.into_into_dart().into_dart(),
            self.label.into_into_dart().into_dart(),
            self.message.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::Onchain
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::Onchain>
    for crate::ffi::ffi::Onchain
{
    fn into_into_dart(self) -> crate::ffi::ffi::Onchain {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::PayInvoiceRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.invoice.into_into_dart().into_dart(),
            self.fallback_amount_sats.into_into_dart().into_dart(),
            self.note.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::PayInvoiceRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::PayInvoiceRequest>
    for crate::ffi::ffi::PayInvoiceRequest
{
    fn into_into_dart(self) -> crate::ffi::ffi::PayInvoiceRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::PayInvoiceResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.index.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::PayInvoiceResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::PayInvoiceResponse>
    for crate::ffi::ffi::PayInvoiceResponse
{
    fn into_into_dart(self) -> crate::ffi::ffi::PayInvoiceResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::PayOnchainRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.cid.into_into_dart().into_dart(),
            self.address.into_into_dart().into_dart(),
            self.amount_sats.into_into_dart().into_dart(),
            self.priority.into_into_dart().into_dart(),
            self.note.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::PayOnchainRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::PayOnchainRequest>
    for crate::ffi::ffi::PayOnchainRequest
{
    fn into_into_dart(self) -> crate::ffi::ffi::PayOnchainRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::PayOnchainResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.index.into_into_dart().into_dart(),
            self.txid.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::PayOnchainResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::PayOnchainResponse>
    for crate::ffi::ffi::PayOnchainResponse
{
    fn into_into_dart(self) -> crate::ffi::ffi::PayOnchainResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::Payment {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.index.into_into_dart().into_dart(),
            self.kind.into_into_dart().into_dart(),
            self.direction.into_into_dart().into_dart(),
            self.invoice.into_into_dart().into_dart(),
            self.replacement.into_into_dart().into_dart(),
            self.amount_sat.into_into_dart().into_dart(),
            self.fees_sat.into_into_dart().into_dart(),
            self.status.into_into_dart().into_dart(),
            self.status_str.into_into_dart().into_dart(),
            self.note.into_into_dart().into_dart(),
            self.created_at.into_into_dart().into_dart(),
            self.finalized_at.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::Payment
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::Payment>
    for crate::ffi::ffi::Payment
{
    fn into_into_dart(self) -> crate::ffi::ffi::Payment {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::PaymentDirection {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Inbound => 0.into_dart(),
            Self::Outbound => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::PaymentDirection
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::PaymentDirection>
    for crate::ffi::ffi::PaymentDirection
{
    fn into_into_dart(self) -> crate::ffi::ffi::PaymentDirection {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::PaymentIndex {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::PaymentIndex
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::PaymentIndex>
    for crate::ffi::ffi::PaymentIndex
{
    fn into_into_dart(self) -> crate::ffi::ffi::PaymentIndex {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::PaymentKind {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Onchain => 0.into_dart(),
            Self::Invoice => 1.into_dart(),
            Self::Spontaneous => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::PaymentKind
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::PaymentKind>
    for crate::ffi::ffi::PaymentKind
{
    fn into_into_dart(self) -> crate::ffi::ffi::PaymentKind {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::PaymentMethod {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::ffi::ffi::PaymentMethod::Onchain(field0) =>
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::ffi::ffi::PaymentMethod::Invoice(field0) =>
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::ffi::ffi::PaymentMethod::Offer =>
                [2.into_dart()].into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::PaymentMethod
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::PaymentMethod>
    for crate::ffi::ffi::PaymentMethod
{
    fn into_into_dart(self) -> crate::ffi::ffi::PaymentMethod {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::PaymentStatus {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Pending => 0.into_dart(),
            Self::Completed => 1.into_dart(),
            Self::Failed => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::PaymentStatus
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::PaymentStatus>
    for crate::ffi::ffi::PaymentStatus
{
    fn into_into_dart(self) -> crate::ffi::ffi::PaymentStatus {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::ffi::ffi::PreflightPayInvoiceRequest
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.invoice.into_into_dart().into_dart(),
            self.fallback_amount_sats.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::PreflightPayInvoiceRequest
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::ffi::ffi::PreflightPayInvoiceRequest,
    > for crate::ffi::ffi::PreflightPayInvoiceRequest
{
    fn into_into_dart(self) -> crate::ffi::ffi::PreflightPayInvoiceRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::ffi::ffi::PreflightPayInvoiceResponse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.amount_sats.into_into_dart().into_dart(),
            self.fees_sats.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::PreflightPayInvoiceResponse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::ffi::ffi::PreflightPayInvoiceResponse,
    > for crate::ffi::ffi::PreflightPayInvoiceResponse
{
    fn into_into_dart(self) -> crate::ffi::ffi::PreflightPayInvoiceResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::ffi::ffi::PreflightPayOnchainRequest
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.address.into_into_dart().into_dart(),
            self.amount_sats.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::PreflightPayOnchainRequest
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::ffi::ffi::PreflightPayOnchainRequest,
    > for crate::ffi::ffi::PreflightPayOnchainRequest
{
    fn into_into_dart(self) -> crate::ffi::ffi::PreflightPayOnchainRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::ffi::ffi::PreflightPayOnchainResponse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.high.into_into_dart().into_dart(),
            self.normal.into_into_dart().into_dart(),
            self.background.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::PreflightPayOnchainResponse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::ffi::ffi::PreflightPayOnchainResponse,
    > for crate::ffi::ffi::PreflightPayOnchainResponse
{
    fn into_into_dart(self) -> crate::ffi::ffi::PreflightPayOnchainResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::ShortPayment {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.index.into_into_dart().into_dart(),
            self.kind.into_into_dart().into_dart(),
            self.direction.into_into_dart().into_dart(),
            self.amount_sat.into_into_dart().into_dart(),
            self.status.into_into_dart().into_dart(),
            self.note.into_into_dart().into_dart(),
            self.created_at.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::ShortPayment
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::ShortPayment>
    for crate::ffi::ffi::ShortPayment
{
    fn into_into_dart(self) -> crate::ffi::ffi::ShortPayment {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::ShortPaymentAndIndex {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.vec_idx.into_into_dart().into_dart(),
            self.payment.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::ShortPaymentAndIndex
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::ShortPaymentAndIndex>
    for crate::ffi::ffi::ShortPaymentAndIndex
{
    fn into_into_dart(self) -> crate::ffi::ffi::ShortPaymentAndIndex {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::ffi::ffi::UpdatePaymentNote {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.index.into_into_dart().into_dart(),
            self.note.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::ffi::ffi::UpdatePaymentNote
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::ffi::ffi::UpdatePaymentNote>
    for crate::ffi::ffi::UpdatePaymentNote
{
    fn into_into_dart(self) -> crate::ffi::ffi::UpdatePaymentNote {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for RustOpaqueNom<App> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for StreamSink<String, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::ffi::ffi::AppHandle {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <RustOpaqueNom<App>>::sse_encode(self.inner, serializer);
    }
}

impl SseEncode for crate::ffi::ffi::Balance {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <u64>::sse_encode(self.total_sats, serializer);
        <u64>::sse_encode(self.lightning_sats, serializer);
        <u64>::sse_encode(self.onchain_sats, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::ffi::ffi::ClientPaymentId {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <[u8; 32]>::sse_encode(self.id, serializer);
    }
}

impl SseEncode for crate::ffi::ffi::Config {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::ffi::DeployEnv>::sse_encode(self.deploy_env, serializer);
        <crate::ffi::ffi::Network>::sse_encode(self.network, serializer);
        <String>::sse_encode(self.gateway_url, serializer);
        <bool>::sse_encode(self.use_sgx, serializer);
        <String>::sse_encode(self.base_app_data_dir, serializer);
        <bool>::sse_encode(self.use_mock_secret_store, serializer);
    }
}

impl SseEncode for crate::ffi::ffi::ConfirmationPriority {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(
            match self {
                crate::ffi::ffi::ConfirmationPriority::High => 0,
                crate::ffi::ffi::ConfirmationPriority::Normal => 1,
                crate::ffi::ffi::ConfirmationPriority::Background => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::ffi::ffi::CreateInvoiceRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <u32>::sse_encode(self.expiry_secs, serializer);
        <Option<u64>>::sse_encode(self.amount_sats, serializer);
        <Option<String>>::sse_encode(self.description, serializer);
    }
}

impl SseEncode for crate::ffi::ffi::CreateInvoiceResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::ffi::Invoice>::sse_encode(self.invoice, serializer);
    }
}

impl SseEncode for crate::ffi::ffi::DeployEnv {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(
            match self {
                crate::ffi::ffi::DeployEnv::Dev => 0,
                crate::ffi::ffi::DeployEnv::Staging => 1,
                crate::ffi::ffi::DeployEnv::Prod => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::ffi::ffi::FeeEstimate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <u64>::sse_encode(self.amount_sats, serializer);
    }
}

impl SseEncode for crate::ffi::ffi::FiatRate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.fiat, serializer);
        <f64>::sse_encode(self.rate, serializer);
    }
}

impl SseEncode for crate::ffi::ffi::FiatRates {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i64>::sse_encode(self.timestamp_ms, serializer);
        <Vec<crate::ffi::ffi::FiatRate>>::sse_encode(self.rates, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::ffi::ffi::Invoice {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.string, serializer);
        <Option<String>>::sse_encode(self.description, serializer);
        <i64>::sse_encode(self.created_at, serializer);
        <i64>::sse_encode(self.expires_at, serializer);
        <Option<u64>>::sse_encode(self.amount_sats, serializer);
        <String>::sse_encode(self.payee_pubkey, serializer);
    }
}

impl SseEncode for Vec<crate::ffi::ffi::FiatRate> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::ffi::ffi::FiatRate>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::ffi::ffi::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(
            match self {
                crate::ffi::ffi::Network::Mainnet => 0,
                crate::ffi::ffi::Network::Testnet => 1,
                crate::ffi::ffi::Network::Regtest => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::ffi::ffi::NodeInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.node_pk, serializer);
        <String>::sse_encode(self.version, serializer);
        <String>::sse_encode(self.measurement, serializer);
        <crate::ffi::ffi::Balance>::sse_encode(self.balance, serializer);
    }
}

impl SseEncode for crate::ffi::ffi::Onchain {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.address, serializer);
        <Option<u64>>::sse_encode(self.amount_sats, serializer);
        <Option<String>>::sse_encode(self.label, serializer);
        <Option<String>>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <usize>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::ffi::ffi::AppHandle> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::ffi::ffi::AppHandle>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::ffi::ffi::FeeEstimate> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::ffi::ffi::FeeEstimate>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::ffi::ffi::Invoice> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::ffi::ffi::Invoice>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::ffi::ffi::Payment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::ffi::ffi::Payment>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::ffi::ffi::ShortPaymentAndIndex> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::ffi::ffi::ShortPaymentAndIndex>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for crate::ffi::ffi::PayInvoiceRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.invoice, serializer);
        <Option<u64>>::sse_encode(self.fallback_amount_sats, serializer);
        <Option<String>>::sse_encode(self.note, serializer);
    }
}

impl SseEncode for crate::ffi::ffi::PayInvoiceResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::ffi::PaymentIndex>::sse_encode(self.index, serializer);
    }
}

impl SseEncode for crate::ffi::ffi::PayOnchainRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::ffi::ClientPaymentId>::sse_encode(self.cid, serializer);
        <String>::sse_encode(self.address, serializer);
        <u64>::sse_encode(self.amount_sats, serializer);
        <crate::ffi::ffi::ConfirmationPriority>::sse_encode(
            self.priority,
            serializer,
        );
        <Option<String>>::sse_encode(self.note, serializer);
    }
}

impl SseEncode for crate::ffi::ffi::PayOnchainResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::ffi::PaymentIndex>::sse_encode(self.index, serializer);
        <String>::sse_encode(self.txid, serializer);
    }
}

impl SseEncode for crate::ffi::ffi::Payment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::ffi::PaymentIndex>::sse_encode(self.index, serializer);
        <crate::ffi::ffi::PaymentKind>::sse_encode(self.kind, serializer);
        <crate::ffi::ffi::PaymentDirection>::sse_encode(
            self.direction,
            serializer,
        );
        <Option<crate::ffi::ffi::Invoice>>::sse_encode(
            self.invoice,
            serializer,
        );
        <Option<String>>::sse_encode(self.replacement, serializer);
        <Option<u64>>::sse_encode(self.amount_sat, serializer);
        <u64>::sse_encode(self.fees_sat, serializer);
        <crate::ffi::ffi::PaymentStatus>::sse_encode(self.status, serializer);
        <String>::sse_encode(self.status_str, serializer);
        <Option<String>>::sse_encode(self.note, serializer);
        <i64>::sse_encode(self.created_at, serializer);
        <Option<i64>>::sse_encode(self.finalized_at, serializer);
    }
}

impl SseEncode for crate::ffi::ffi::PaymentDirection {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(
            match self {
                crate::ffi::ffi::PaymentDirection::Inbound => 0,
                crate::ffi::ffi::PaymentDirection::Outbound => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::ffi::ffi::PaymentIndex {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::ffi::ffi::PaymentKind {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(
            match self {
                crate::ffi::ffi::PaymentKind::Onchain => 0,
                crate::ffi::ffi::PaymentKind::Invoice => 1,
                crate::ffi::ffi::PaymentKind::Spontaneous => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::ffi::ffi::PaymentMethod {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        match self {
            crate::ffi::ffi::PaymentMethod::Onchain(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::ffi::ffi::Onchain>::sse_encode(field0, serializer);
            }
            crate::ffi::ffi::PaymentMethod::Invoice(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::ffi::ffi::Invoice>::sse_encode(field0, serializer);
            }
            crate::ffi::ffi::PaymentMethod::Offer => {
                <i32>::sse_encode(2, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::ffi::ffi::PaymentStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <i32>::sse_encode(
            match self {
                crate::ffi::ffi::PaymentStatus::Pending => 0,
                crate::ffi::ffi::PaymentStatus::Completed => 1,
                crate::ffi::ffi::PaymentStatus::Failed => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::ffi::ffi::PreflightPayInvoiceRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.invoice, serializer);
        <Option<u64>>::sse_encode(self.fallback_amount_sats, serializer);
    }
}

impl SseEncode for crate::ffi::ffi::PreflightPayInvoiceResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <u64>::sse_encode(self.amount_sats, serializer);
        <u64>::sse_encode(self.fees_sats, serializer);
    }
}

impl SseEncode for crate::ffi::ffi::PreflightPayOnchainRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <String>::sse_encode(self.address, serializer);
        <u64>::sse_encode(self.amount_sats, serializer);
    }
}

impl SseEncode for crate::ffi::ffi::PreflightPayOnchainResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Option<crate::ffi::ffi::FeeEstimate>>::sse_encode(
            self.high, serializer,
        );
        <crate::ffi::ffi::FeeEstimate>::sse_encode(self.normal, serializer);
        <crate::ffi::ffi::FeeEstimate>::sse_encode(self.background, serializer);
    }
}

impl SseEncode for crate::ffi::ffi::ShortPayment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::ffi::PaymentIndex>::sse_encode(self.index, serializer);
        <crate::ffi::ffi::PaymentKind>::sse_encode(self.kind, serializer);
        <crate::ffi::ffi::PaymentDirection>::sse_encode(
            self.direction,
            serializer,
        );
        <Option<u64>>::sse_encode(self.amount_sat, serializer);
        <crate::ffi::ffi::PaymentStatus>::sse_encode(self.status, serializer);
        <Option<String>>::sse_encode(self.note, serializer);
        <i64>::sse_encode(self.created_at, serializer);
    }
}

impl SseEncode for crate::ffi::ffi::ShortPaymentAndIndex {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <usize>::sse_encode(self.vec_idx, serializer);
        <crate::ffi::ffi::ShortPayment>::sse_encode(self.payment, serializer);
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for [u8; 32] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <Vec<u8>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
    }
}

impl SseEncode for crate::ffi::ffi::UpdatePaymentNote {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        <crate::ffi::ffi::PaymentIndex>::sse_encode(self.index, serializer);
        <Option<String>>::sse_encode(self.note, serializer);
    }
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(
        self,
        serializer: &mut flutter_rust_bridge::for_generated::SseSerializer,
    ) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "ffi_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
