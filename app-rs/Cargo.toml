[package]
name = "app-rs"
version = "0.1.0"
authors = [
    "Max Fang <protonmail.com@maxfa.ng>",
    "Philip Hayes <philiphayes9@gmail.com>"
]
license = "PolyForm Noncommercial License 1.0.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

# TODO(phlip9): it seems like this option enables _all_ library output types for
#               all targets, even though e.g. iOS doesn't need a dynlib and
#               Android doesn't need a static lib.
#               should figure out the right cargo incantation to avoid this...
[lib]
crate-type = [
    # Rust tests
    "lib",
    # Static linking for most targets
    "staticlib",
    # Android requires dynamically linked native libs
    "cdylib",
]

[dependencies]
common = { path = "../common" }

# Ad hoc error definition, easy error propagation, error chains
anyhow.workspace = true

# High-level memory-safe Rust<->Dart FFI bindings
# Specifies minor version (1.61) because 1.62 generates broken code
flutter_rust_bridge = { version = "1.61", default-features = false, features = [] }
# A wrapper type for carefully handling secrets
secrecy.workspace = true

# --- PATCHED DEPENDENCIES --- #
# - Be sure to use the specific patched versions.
# - See the workspace Cargo.toml for patch declarations.
# - The versions for transitive dependencies (such as hyper, mio, ring, etc) are
#   declared in `common`'s Cargo.toml and propagated to other crates by
#   workspace-level dependency resolution.
tokio = { workspace = true, default-features = false, features = [
    "net",
    "rt",
    "time"
] }

[dev-dependencies]

[build-dependencies]
# # Enable this to get logs from flutter_rust_bridge_codegen in build.rs
# env_logger = { version = "0", default-features = false }
# Specifies minor version (1.61) because 1.62 generates broken code
flutter_rust_bridge_codegen = { version = "1.61", default-features = false, features = [] }
