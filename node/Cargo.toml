[package]
name = "node"
version = "0.1.0"
authors = [
    "Max Fang <protonmail.com@maxfa.ng>",
    "Philip Hayes <philiphayes9@gmail.com>"
]
license = "PolyForm Noncommercial License 1.0.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]

# --- LEXE --- #

common = { path = "../common" }
lexe-ln = { path = "../lexe-ln" }

# --- BITCOIN  --- #

bitcoin.workspace = true
bitcoin-bech32.workspace = true
base64.workspace = true

# --- LIGHTNING --- #

lightning.workspace = true
lightning-invoice.workspace = true
lightning-net-tokio.workspace = true
lightning-transaction-sync.workspace = true

# --- WORKSPACE --- #

anyhow.workspace = true
argh.workspace = true
async-trait.workspace = true
bytes.workspace = true
futures.workspace = true
http.workspace = true
once_cell.workspace = true
rcgen.workspace = true
reqwest = { workspace = true, features = ["json", "rustls-tls-manual-roots"] }
secrecy.workspace = true
serde.workspace = true
serde_qs.workspace = true
serde_json.workspace = true
thiserror.workspace = true
tokio = { workspace = true, features = [
    "io-util",
    "macros",
    "net",
    "rt",
    "sync",
    "time"
] }
tokio-rustls.workspace = true
tracing.workspace = true
tracing-core.workspace = true
tracing-subscriber = { workspace = true, features = [
    "std",
    "fmt",
    "tracing-log",
] }
warp = { workspace = true, features = ["tls"] }

[target.'cfg(target_env = "sgx")'.dependencies]
# print backtrace on panic in SGX enclave
sgx-panic-backtrace = "0.1"

[dev-dependencies]
common = { path = "../common", features = ["test-utils"] }

proptest = { workspace = true, features = ["alloc"] }
proptest-derive.workspace = true
# Tokio features used when testing
tokio = { workspace = true, features = [
    "io-util",
    "macros",
    "rt",
    "sync",
    "test-util", # Used to pause time in inactivity_timer::tests
    "time"
] }

[package.metadata.fortanix-sgx]
# Stack size (in bytes) for each thread, the default stack size is 0x20000.
stack-size=0x20_0000
# The max number of threads we can spawn concurrently inside the SGX enclave.
#
# NOTE: ideally this value should be "threads=1", however, the current fortanix
#       rust-sgx `async_usercalls` implementation requires an extra thread, so
#       until that changes, we're stuck with "threads=2".
#       see: https://github.com/lexe-tech/rust-sgx/blob/70d11205fed08e49886bb25a1ea3df19928e8287/async-usercalls/src/queues.rs#L46
threads=2
