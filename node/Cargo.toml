[package]
name = "node"
version = "0.1.0"
authors = [
    "Max Fang <protonmail.com@maxfa.ng>",
    "Philip Hayes <philiphayes9@gmail.com>"
]
license = "PolyForm Noncommercial License 1.0.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]

# --- LEXE --- #

# Shared code
common = { path = "../common" }
# Shared bitcoin / lightning types
lexe-ln = { path = "../lexe-ln" }

# --- BITCOIN --- #

bitcoin = { version = "0.29", features = ["serde"] }
bitcoin-bech32 = "0.12"
# bech32 = "0.8"
base64 = "0.13.0"

# --- LIGHTNING --- #

lightning = { version = "0.0.111", features = ["max_level_trace"] }
lightning-block-sync = { version = "0.0.111", features = [ "rpc-client" ] }
lightning-invoice = { version = "0.19" }
lightning-net-tokio = { version = "0.0.111" }

# lightning = { git = "https://github.com/lexe-tech/rust-lightning", features = # ["max_level_trace"], branch = "main" }
# lightning-block-sync = { git = "https://github.com/lexe-tech/rust-lightning", # features = [ "rpc-client" ], branch = "main" }
# lightning-invoice = { git = "https://github.com/lexe-tech/rust-lightning", # branch = "main" }
# lightning-net-tokio = { git = "https://github.com/lexe-tech/rust-lightning", # branch = "main" }

# For debugging and testing patches during local development
# lightning = { path = "../../ldk/lightning", features = ["max_level_trace"]}
# lightning-block-sync = { path = "../../ldk/lightning-block-sync", features = [ "rpc-client" ] }
# lightning-invoice = { path = "../../ldk/lightning-invoice" }
# lightning-net-tokio = { path = "../../ldk/lightning-net-tokio" }

# --- GENERAL --- #

# Ad hoc error definition, easy error propagation, error chains
anyhow = "1"
# Derive-based command line argument parsing
argh = "0.1"
# async fn's in trait methods
async-trait = "0.1"
# Working with bytes
bytes = "1"
# Utils for working with futures
futures = "0.3"
# Used to specify the HTTP methods used to interact with the API
http = "0.2"
# Used to hold a Tokio runtime used by the sync fns in the Persister trait impl
once_cell = "1"
# Serialization / deserialization framework
serde = { version = "1", features = ["derive"] }
serde_qs = "0"
serde_json = "1"
# Easily generate self-signed x509 certs with ring
rcgen = { version = "0.9", default-features = false, features = [] }
# Used to make HTTP requests to the API
reqwest = { version = "0.11", default-features = false, features = ["json", "rustls-tls-manual-roots"] }
# A wrapper type for carefully handling secrets
secrecy = "0.8"
# Easy error definition
thiserror = "1"
# lower-level async TLS interface
tokio-rustls = "0.23"
# Logging
tracing = "0.1"
tracing-core = "0.1"
tracing-subscriber = { version = "0.3", default-features = false, features = [
    "std",
    "fmt",
    "tracing-log",
] }
# Filter-based webserver
# NOTE: This branch implements (1) Reply for Result<impl Reply, impl Reply> and
#       (2) allows setting a prebuilt rustls TLS server config
warp = { git = "https://github.com/lexe-tech/warp", branch = "lexe", default-features = false, features = ["tls"] }

# --- PATCHED DEPENDENCIES --- #
# - Be sure to use the specific patched versions.
# - See the workspace Cargo.toml for patch declarations.
# - The versions for transitive dependencies (such as hyper, mio, ring, etc) are
#   declared in `common`'s Cargo.toml and propagated to other crates by
#   workspace-level dependency resolution.

tokio = { version = "=1.15.0", default-features = false, features = [
    "io-util",
    "macros",
    "net",
    "rt",
    "sync",
    "time"
] }

[dev-dependencies]
# Shared code
common = { path = "../common", features = ["test-utils"] }
# property based testing
proptest = { version = "1", default-features = false, features = ["alloc"] }
# Arbitrary derive macro
proptest-derive = "0.3"
# Tokio features used when testing
tokio = { version = "=1.15.0", default-features = false, features = [
    "io-util",
    "macros",
    "rt",
    "sync",
    "test-util", # Used to pause time in inactivity_timer::tests
    "time"
] }

[target.'cfg(not(target_env = "sgx"))'.dev-dependencies]
# Bitcoind regtest
bitcoind = { version = "0.27", features = [ "22_0" ] }
# Include additional useful proptest features when testing outside of SGX
proptest = "1"

[package.metadata.fortanix-sgx]
# Stack size (in bytes) for each thread, the default stack size is 0x20000.
stack-size=0x200000
# The max number of threads we can spawn concurrently inside the SGX enclave.
#
# NOTE: ideally this value should be "threads=1", however, the current fortanix
#       rust-sgx `async_usercalls` implementation requires an extra thread, so
#       until that changes, we're stuck with "threads=2".
#       see: https://github.com/lexe-tech/rust-sgx/blob/70d11205fed08e49886bb25a1ea3df19928e8287/async-usercalls/src/queues.rs#L46
threads=2
