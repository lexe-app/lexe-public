[workspace]
resolver = "2"

members = [
    "app-rs",
    "app-rs-codegen",
    "common",
    "lexe-ln",
    "node",
    "run-sgx",
]

[workspace.dependencies]
# Use this section to declare dependencies used across many lexe crates.
# Lexe crates can then inherit the dependency using `workspace = true`.
# This makes it easier to keep dependency versions in sync. More info:
# https://doc.rust-lang.org/cargo/reference/workspaces.html#the-dependencies-table

# --- BITCOIN --- #

bitcoin = "0.29"
bitcoin-bech32 = "0.12"
bitcoin_hashes = "0.11"

# --- LIGHTNING --- #

lightning = { version = "0.0.113", features = ["max_level_trace"] }
lightning-invoice = { version = "0.21" }
lightning-net-tokio = { version = "0.0.113" }
# TODO(max): Switch to crates.io once LDK #1870 is merged
# lightning-transaction-sync = { version = "0.0.113", features = ["esplora-async"] }
lightning-transaction-sync = { git = "https://github.com/lexe-tech/rust-lightning", branch = "lexe-v0.0.113-thru-2023-02-22-with-2064", features = ["esplora-async"] }
# lightning-transaction-sync = { path = "../../ldk/lightning-transaction-sync", features = ["esplora-async"] }

# --- GENERAL --- #

# Ad hoc error definition, easy error propagation, error chains
anyhow = "1"
# Derive-based command line argument parsing
argh = "0.1"
# async fn's in trait methods
async-trait = "0.1"
# Converting to/from base 64.
base64 = "0.13"
# Abstractions for working with bytes
bytes = "1"
# Write #[cfg(..)] if-else statements without repeating clauses
cfg-if = "1"
# Allows setting environment variables using a .env file.
# dotenvy is a better maintained fork of dotenv
dotenvy = "0.15"
# common HTTP types
http = "0.2"
# High-level memory-safe Rust<->Dart FFI bindings.
flutter_rust_bridge = { version = "1.75.1", default-features = false, features = [] }
# The Rust+Dart codegen for flutter_rust_bridge
flutter_rust_bridge_codegen = { version = "1.75.1", default-features = false, features = [] }
# Utils for working with futures
futures = "0.3"
# Lazy initialization
once_cell = "1"
# Property-based testing
proptest = { version = "1", default-features = false }
# Arbitrary derive macro
proptest-derive = "0.3"
# Easily generate x509 certs with ring
rcgen = { version = "0.10", default-features = false }
# High-level HTTP client
reqwest = { version = "0.11", default-features = false }
# TLS library
rustls = { version = "0.20", default-features = false }
# A wrapper type for carefully handling secrets
secrecy = "0.8"
# Serialization / deserialization framework
serde = { version = "1", features = ["derive"] }
serde_with = { version = "2", default-features = false }
serde_json = "1"
# Easy error definition
thiserror = "1"
# Lower-level async TLS interface
tokio-rustls = { version = "0.23", default-features = false }
# Scoped, structured logging for asynchronous systems
tracing = "0.1"
tracing-core = "0.1"
tracing-subscriber = { version = "0.3", default-features = false }

# --- SGX-PATCHED DEPENDENCIES --- #
# Use this section to declare dependencies which we have patched, and for which
# we thus expect to maintain our patch indefinitely.
# - See the following [patch.crates-io] section for patch declarations.
# - The version specified should be the exact version compatible with our patch.
# - Transitive dependencies (such as hyper, mio, ring, etc) which are not
#   depended on directly by Lexe crates should also be declared here; the
#   pinned version will be propagated to Lexe crates via workspace-level
#   dependency resolution.

# A client for the Intel AESM service. Used during attestation to get quoted.
aesm-client = { version = "=0.5.4", default-features = false, features = ["sgxs"] }
# SGX Quote types
dcap-ql = { version = "=0.3.4", default-features = false }
# Fortanix EDP crate for running SGX applications, includes usercall extensions
enclave-runner = { version = "=0.5.1", default-features = false }
# Low-level HTTP server
hyper = { version = "=0.14.18", default-features = false }
# Required by tokio
mio = "=0.8.4"
# Safe and small crypto primitives based on BoringSSL
ring = "=0.16.20"
# Core SGX types and platform intrinsics (for sealing, reports, etc...)
sgx-isa = "=0.4.0"
sgxs-loaders = "=0.3.3"
# Asynchronous runtime
tokio = { version = "=1.21.2", default-features = false }
# Filter-based webserver
warp = { version = "=0.3.4", default-features = false }

[patch.crates-io]
# NOTE: Make sure to duplicate any changes to the `server`'s root Cargo.toml,
# otherwise the `server`'s dependency versions won't match.
aesm-client = { git = "https://github.com/lexe-tech/rust-sgx", branch = "lexe" }
async-usercalls = { git = "https://github.com/lexe-tech/rust-sgx", branch = "lexe" }
atty = { git = "https://github.com/softprops/atty", rev = "6633c0e1446aa19e6cd00e00e39770da43081bda" }
dcap-ql = { git = "https://github.com/lexe-tech/rust-sgx", branch = "lexe" }
enclave-runner = { git = "https://github.com/lexe-tech/rust-sgx", branch = "lexe" }
hyper = { git = "https://github.com/lexe-tech/hyper", branch = "hyper-sgx-0.14.18" }
mio = { git = "https://github.com/lexe-tech/mio", branch = "mio-sgx-0.8.4" }
reqwest = { git = "https://github.com/lexe-tech/reqwest", branch = "lexe" }
ring = { git = "https://github.com/lexe-tech/ring", branch = "support-sgx-0.16.20" }
sgx-isa = { git = "https://github.com/lexe-tech/rust-sgx", branch = "lexe" }
sgxs-loaders = { git = "https://github.com/lexe-tech/rust-sgx", branch = "lexe" }
tokio = { git = "https://github.com/lexe-tech/tokio", branch = "tokio-sgx-1.21.2" }
# This warp fork:
# * b807792 - trace: extract `Response<Body>` directly to reduce friction
# * 2cbad40 - trace: tweak warp request `tracing` to include request time directly
# * f8c13d9 - add HTTP on-upgrade filter
# * dc560ed - Allow users to provide a preconfigured TLS configuration
warp = { git = "https://github.com/lexe-tech/warp", branch = "lexe" }

# This BDK fork:
# 1) Derives PartialEq, Eq for SyncTime, used in tests
# 2) Makes bdk::Wallet and EsploraBlockchain thread-safe* (finally Send!) under
#    the condition that bdk::Wallet is wrapped in a Mutex of some sort.
#    *See the commit messages in the patch for details.
# 3) Reintroduces the Send bound in bdk-macros' `async_trait`s, required for (2)
bdk = { git = "https://github.com/lexe-tech/bdk", branch = "lexe-v0.26-synctime-threadsafe" }
bdk-macros = { git = "https://github.com/lexe-tech/bdk", branch = "lexe-v0.26-synctime-threadsafe" }
# bdk = { path = "../../bdk", default-features = false, features = ["async-interface", "use-esplora-async"] }

# Like 0.0.112, 0.0.113 is broken; LDK panics with 50% probability if we use
# random nanos: https://github.com/lightningdevkit/rust-lightning/pull/1935
# We also need lightning-transaction-sync which has not been merged yet.
# TODO(max): Switch back to crates.io version once:
# 1) A version of LDK is released which passes our integration tests (0.0.114?)
# 2) LDK#1870 containing the lightning-transaction-sync crate is merged.

# For if we need to run a patched version of LDK instead of crates.io.
lightning = { git = "https://github.com/lexe-tech/rust-lightning", branch = "lexe-v0.0.113-thru-2023-02-22-with-2064" }
lightning-invoice = { git = "https://github.com/lexe-tech/rust-lightning", branch = "lexe-v0.0.113-thru-2023-02-22-with-2064" }
lightning-net-tokio = { git = "https://github.com/lexe-tech/rust-lightning", branch = "lexe-v0.0.113-thru-2023-02-22-with-2064" }
lightning-transaction-sync = { git = "https://github.com/lexe-tech/rust-lightning", branch = "lexe-v0.0.113-thru-2023-02-22-with-2064" }

# For debugging LDK or testing patches during local development
# lightning = { path = "../../ldk/lightning" }
# lightning-invoice = { path = "../../ldk/lightning-invoice" }
# lightning-net-tokio = { path = "../../ldk/lightning-net-tokio" }
# lightning-transaction-sync = { path = "../../ldk/lightning-transaction-sync" }

# [profile.dev]
# This fixes 'warning: can't find symbol' when debugging, but breaks the
# server's build.rs, so it should always be commented out in git. More info:
# https://github.com/rust-lang/rust/issues/40787#issuecomment-1019465942
# https://doc.rust-lang.org/cargo/reference/profiles.html#split-debuginfo
# split-debuginfo = "packed"

# [profile.release]
# panic = "abort"
# NOTE(phlip9): enable for smaller binary size
# codegen-units = 1
# lto = true
# opt-level = "s"
# debug = 0
# strip = "debuginfo"

# [profile.dev]
# panic = "abort"
