[workspace]
resolver = "2"

members = [
    "app-rs",
    "app-rs-codegen",
    "byte-array",
    "common",
    "gdrive",
    "hex",
    "lexe-api",
    "lexe-api-core",
    "lexe-ln",
    "lexe-std",
    "lexe-tls",
    "lexe-tls-core",
    "lexe-tokio",
    "logger",
    "node",
    "payment-uri",
    "payment-uri-core",
    "run-sgx",
    "sdk-core",
    "sdk-sidecar",
    "sgx-test",
    "sgx-toml",
    "sgxs-sign",
    "sha256",
]

[workspace.package]
authors = [
    "Max Fang <max@lexe.app>",
    "Philip Hayes <philip@lexe.app>"
]
edition = "2024"
license = "PolyForm Noncommercial License 1.0.0"
# This is just a default version which can be inherited by workspace members
# that don't actually need semver versioning. Crates that require versioning
# will specify their version in their Cargo.toml as usual.
version = "0.0.0"

[workspace.dependencies]
# Use this section to declare dependencies used across multiple lexe crates.
# Lexe crates can then inherit the dependency using `workspace = true`.
# This makes it easier to keep dependency versions in sync. More info:
# https://doc.rust-lang.org/cargo/reference/workspaces.html#the-dependencies-table

# For verifying SGX Report MACs
aes = { version = "0.8", features = ["zeroize"] }
# Ad hoc error definition, easy error propagation, error chains
anyhow = "1"
# Like `RwLock<Arc<T>>` for read-mostly, write-seldom scenarios.
arc-swap = "1.7"
# Derive-based command line argument parsing
argh = "0.1"
# BER and DER parsers / encoders
# TODO(phlip9): avoid this extra dependency and just use `yasna` directly
asn1-rs = { version = "0.5", default-features = false }
# async fn's in trait methods
async-trait = "0.1"
# Web framework from tokio-rs community based on tokio, hyper, and tower.
axum = { version = "0.7", default-features = false, features = [
    "http1",
    "http2",
    "macros" # Exposes `#[debug_handler]` and other useful macros
] }
# Converting to/from base 64.
# Make sure this tracks `bitcoin`'s version.
base64 = "0.21"
# Binary canonical serialization format
bcs = "0.1"
# BDK (Bitcoin Dev Kit) libraries
bdk_wallet = { version = "2", default-features = false, features = ["std"] }
bdk_chain = { version = "0.23", default-features = false, features = ["std"] }
bdk_esplora = { version = "0.22", default-features = false, features = ["std", "async"] }
# Encoding and decoding of the Bech32 format.
# Make sure this tracks `bitcoin`'s version.
bech32 = "0.11"
# rust-bitcoin suite of libraries
bitcoin = { version = "0.32", features = ["serde"] }
# For casting byte buffers to/from the AESM client from/to structured data.
bytemuck = { version = "1", default-features = false, features = ["derive", "min_const_generics"] }
# Abstractions for working with bytes
bytes = { version = "1", features = ["serde"] }
# Write #[cfg(..)] if-else statements without repeating clauses
cfg-if = "1"
# Datetime utilities
chrono = { version = "0.4", default-features = false, features = [
    "std",
    "clock"
] }
# For verifying SGX Report MACs
cmac = { version = "0.7", features = ["std", "zeroize"] }
# Create and validate transferable DNS proofs (by BlueMatt)
dnssec-prover = { version = "0.6", default-features = false }
# Allows setting environment variables using a .env file.
# dotenvy is a better maintained fork of dotenv
dotenvy = "0.15"
# General purpose sum type with two cases (left and right)
either = "1"
# QR code generation on the app
fast_qr = { version = "0.12", default-features = false }
# High-level memory-safe Rust<->Dart FFI bindings.
# Keep this version in sync with `app_rs_dart/pubspec.yaml`.
flutter_rust_bridge = { version = "=2.11.1", default-features = false }
# The Rust+Dart codegen for flutter_rust_bridge
# Keep this version in sync with `app_rs_dart/pubspec.yaml`.
flutter_rust_bridge_codegen = { version = "=2.11.1", default-features = false, features = [] }
# Utils for working with futures
futures = "0.3"
# Core HTTP types and utils
http = "1"
http-body-util = "0.1"
# Low-level async HTTP library and server
hyper = { version = "1", default-features = false, features = ["http2"] }
# Recursively walk directory, respecting .gitignore and other glob filters.
ignore = "0.4"
# Cross-platform access to host secret storage
keyring = { version = "2.0", default-features = false }
# Efficient LRU cache backed by a linked list.
lru = { version = "0.14", default-features = false }
# For symbolizing backtrace frames from the enclave
object = { version = "0.30", default-features = false, features = ["read_core", "compression", "elf"] }
# Pieter Wuille's simpler alternative to Bitcoin Script
# The version should match that used by BDK.
miniscript = { version = "12", default-features = false }
# Small conversion from fixed ECDSA signature to ASN.1 format
num-bigint = { version = "0.4", default-features = false, features = [] }
# Encode/decode URLs with %-escaped characters
percent-encoding = "2.3"
# Property-based testing
proptest = { version = "1", default-features = false }
# Arbitrary derive macro
proptest-derive = "0.5"
# Traits and utilities for generating randomness
rand = { version = "0.8", default-features = false }
rand_core = { version = "0.6", default-features = false, features = ["alloc"] }
# Easily generate x509 certs with ring
rcgen = { version = "0.12", default-features = false, features = ["ring", "zeroize"] }
# Safely cast &T to &U when T is a single field new-type
ref-cast = "1"
# Efficient sparse bitmap data structure
roaring = "0.10"
# Pure Rust RSA implementation by RustCrypto. Used for SGX .sigstruct signing.
rsa = { version = "0.9.6", default-features = false, features = ["u64_digit"] }
# Decimal number representation suitable for financial calculations
rust_decimal = { version = "1", default-features = false, features = ["serde"] }
rust_decimal_macros = { version = "1", default-features = false }
# For demangling backtrace symbols into human-readable format
rustc-demangle = "0.1"
# TLS library
rustls = { version = "0.22", default-features = false, features = ["ring"] }
# Required to name our signature algorithms.
# The version should match that used by rustls.
# For some reason this breaks if we don't specify `package = "rustls-webpki"`
rustls-webpki = { version = "0.102", package = "rustls-webpki" }
# Rust bindings to libsecp256k1. Implements ECDSA and BIP 340 signatures.
# Version should match that used by the `bitcoin` crate.
secp256k1 = "0.29"
# A wrapper type for carefully handling secrets
secrecy = "0.8"
# SemVer version newtype for parsing and precedence
semver = "1"
# Serialization / deserialization framework
serde = { version = "1", features = ["derive"] }
serde_json = "1"
serde_urlencoded = "0.7" # keep in sync with axum version
serde_with = { version = "3", default-features = false, features = ["macros"] }
# Enum #[derive(..)] helpers
strum = { version = "0.26", features = ["derive"] }
# Temporary files and directories
tempfile = "3"
# Easy error definition
thiserror = "1"
# Datetime library used by rcgen. Should match rcgen's `time` version
time = "0.3"
# Lower-level async TLS interface
tokio-rustls = { version = "0.25", default-features = false }
# Utilities for testing futures
tokio-test = "0.4"
# serde-compatible TOML-parsing library
toml = "0.8"
# `Service` and `Layer`-based async middleware
tower = "0.4"
tower-http = "0.5"
tower-service = "0.3"
# Scoped, structured logging for asynchronous systems
tracing = "0.1"
tracing-core = "0.1"
tracing-subscriber = { version = "0.3", default-features = false, features = ["smallvec"] }
# Verify x509 certificates
webpki = { version = "0.22", default-features = false, features = ["std"] }
# Mozilla's set of trusted webpki root certificates hard-coded into a const
webpki-roots = "0.26"
# Parsing x509 cert extensions
# TODO(phlip9): avoid this extra dependency and just use `yasna` directly
x509-parser = { version = "0.15", default-features = false }
# For constructing/parsing ASN.1 data in x509 certs
yasna = { version = "0.5", default-features = false, features = ["num-bigint"] }

# --- PATCHED DEPENDENCIES --- #
# Use this section to declare patched dependencies.
# - See the following [patch.crates-io] section for patch declarations.
# - The version should use `=` to pin the exact version our patch applies to.
#   `=` ensures `cargo update` doesn't accidentally update the dependency,
#   leading to it becoming incompatible with our patch.

# A client for the Intel AESM service. Used during attestation to get quoted.
aesm-client = { version = "=0.6.0", default-features = false }
# High level webserver based on axum, tokio, hyper, and tower
axum-server = "=0.6.0"
# BIP39 mnemonic codes
bip39 = { version = "=2.1.0", default-features = false }
# SGX Quote types
dcap-ql = { version = "=0.4.0", default-features = false }
# Fortanix EDP crate for running SGX applications, includes usercall extensions
enclave-runner = { version = "=0.6.0", default-features = false }
# Async Esplora client
esplora-client = { version = "=0.12", default-features = false, features = ["async", "tokio"] }
# Hyper-related utilities
hyper-util = { version = "=0.1.11", default-features = false, features = ["http2"] }
# LDK (rust-lightning) libraries
lightning = { version = "=0.1.5", features = [] }
lightning-invoice = { version = "=0.33.2", features = ["std"] }
lightning-transaction-sync = { version = "=0.1.0", features = ["esplora-async", "time"] }
lightning-types = "=0.2.0"
# Required by tokio
mio = "=0.8.11"
# High-level HTTP client
reqwest = { version = "=0.12.1", default-features = false, features = ["http2", "rustls-tls-manual-roots"] }
# Safe and small crypto primitives based on BoringSSL
ring = "=0.17.8"
# Core SGX types and platform intrinsics (for sealing, reports, etc...)
sgx-isa = "=0.4.1"
sgxs = "=0.8.0"
sgxs-loaders = "=0.4.0"
# Asynchronous runtime
tokio = { version = "=1.36.0", default-features = false }

[patch.crates-io]
# NOTE: Make sure to duplicate any changes to the root Cargo.toml.

# Fortanix EDP (rust-sgx) crates:
# These patches remain licensed under MPL 2.0.
# * rust-sgx: hide all fortanixvme crates
# * ftx-sgx-tools: can build just `ftxsgx-elf2sgxs` on non-x86_64
# * enclave-runner: allow redirecting enclave standard input/output
# * enclave-runner: tighten tokio+futures features
# * Fix compile error introduced by the new toolchain (cherry-pick)
# * lint: silence warnings on rust 1.87.0
aesm-client = { git = "https://github.com/lexe-app/rust-sgx", branch = "lexe-b77c27f2-2025_06_30" }
async-usercalls = { git = "https://github.com/lexe-app/rust-sgx", branch = "lexe-b77c27f2-2025_06_30" }
dcap-ql = { git = "https://github.com/lexe-app/rust-sgx", branch = "lexe-b77c27f2-2025_06_30" }
enclave-runner = { git = "https://github.com/lexe-app/rust-sgx", branch = "lexe-b77c27f2-2025_06_30" }
sgx-isa = { git = "https://github.com/lexe-app/rust-sgx", branch = "lexe-b77c27f2-2025_06_30" }
sgxs = { git = "https://github.com/lexe-app/rust-sgx", branch = "lexe-b77c27f2-2025_06_30" }
sgxs-loaders = { git = "https://github.com/lexe-app/rust-sgx", branch = "lexe-b77c27f2-2025_06_30" }
# aesm-client.path = "../../rust-sgx/intel-sgx/aesm-client"
# async-usercalls.path = "../../rust-sgx/intel-sgx/async-usercalls"
# dcap-ql.path = "../../rust-sgx/intel-sgx/dcap-ql"
# enclave-runner.path = "../../rust-sgx/intel-sgx/enclave-runner"
# sgx-isa.path = "../../rust-sgx/intel-sgx/sgx-isa"
# sgxs.path = "../../rust-sgx/intel-sgx/sgxs"
# sgxs-loaders.path = "../../rust-sgx/intel-sgx/sgxs-loaders"

# * license: Add dual license information
# * server: Propagate current span across `tokio::spawn`
# * cargo: rustls->0.22.1, tokio-rustls->0.25.0
# * fix: propagate graceful shutdown to inner hyper connection
#   PR: <https://github.com/programatik29/axum-server/pull/119>
axum-server = { git = "https://github.com/lexe-app/axum-server", branch = "lexe-v0.6.0-2024_10_11" }

# * deps: use lexe dep versions to avoid duplicates
bip39 = { git = "https://github.com/lexe-app/rust-bip39", branch = "lexe-v2.1.0-2025_06_12" }

# * license: Add dual license information
# * async: Log every request
# * doc: fix cargo doc builds when non-default features are enabled
#   PR: <https://github.com/bitcoindevkit/rust-esplora-client/pull/129>
esplora-client = { git = "https://github.com/lexe-app/rust-esplora-client", branch = "lexe-v0.12.0-2025_06_12" }
# esplora-client.path = "../../esplora-client"

# * license: Add dual license information
# * sgx: socket2 requires `client-legacy-socket2` cfg
# * sgx: Disable socket2 in SGX
hyper-util = { git = "https://github.com/lexe-app/hyper-util", branch = "lexe-v0.1.11-2025_05_15" }
# hyper-util.path = "../../forks/hyper-util"

# * license: Add dual license information
# * ln: onion-messenger: just queue forwards to offline peers
# * onion-messenger: bump MAX_TIMER_TICKS to 3 (~30 sec)
# * Do not fail to load `ChannelManager` when we see claiming payments (#3772)
# * lightning-transaction-sync: bump esplora-client 0.11 -> 0.12
# * graph: reduce time-to-prune for chans w/ no recent announce to 5d
lightning = { git = "https://github.com/lexe-app/rust-lightning", branch = "lexe-v0.1.5-2025_10_06" }
lightning-invoice = { git = "https://github.com/lexe-app/rust-lightning", branch = "lexe-v0.1.5-2025_10_06" }
lightning-transaction-sync = { git = "https://github.com/lexe-app/rust-lightning", branch = "lexe-v0.1.5-2025_10_06" }
lightning-types = { git = "https://github.com/lexe-app/rust-lightning", branch = "lexe-v0.1.5-2025_10_06" }
# lightning.path = "../../ldk/lightning"
# lightning-invoice.path = "../../ldk/lightning-invoice"
# lightning-transaction-sync.path = "../../ldk/lightning-transaction-sync"
# lightning-types.path = "../../ldk/lightning-types"

# * fortanix: SGX port
# * license: Add dual license information
# * test: fix testing script
# * net: add `TcpStream::try_into_std`, used by our `tokio` SGX patchset
# * Revert "Support compilers with stdlibs that don't have `Send` `User<T>` types"
mio = { git = "https://github.com/lexe-app/mio", branch = "lexe-v0.8.11-2024_10_11" }

# * license: Add dual license information
# * proxy: Expose `ProxyScheme`, `set_custom_http_auth`
# * lib: Fail compilation if using insecure TLS roots
reqwest = { git = "https://github.com/lexe-app/reqwest", branch = "lexe-v0.12.1-2024_10_11" }

# * license: Add dual license information
# * cpu: use static cpuid feature set in SGX enclaves
# * rand: Use `RDRAND` implementation in SGX
# * build: Always build from source
# * build.rs: windows: also look for `nasm` in $PATH
ring = { git = "https://github.com/lexe-app/ring", branch = "lexe-v0.17.8-2025_05_15" }

# * license: Add dual license information
# * fortanix: SGX port
# * test: fix testing script
# * net: add SGX `TcpStream::into_std` used by `lightning-net-tokio` TODO(phlip9): Remove
tokio = { git = "https://github.com/lexe-app/tokio",  branch = "lexe-v1.36.0-2024_10_11" }

[profile.release]
# Enable "thin" LTO (link-time optimization) for better perf+binary size. "fat"
# LTO is marginally better perf-wise but much slower linking time.
lto = "thin"
strip = "debuginfo"

# For some reason, the `ring` build via nix + x86_64-unknown-linux-gnu is
# failing in its `build.rs` because it's compiling the native code with `-O0`
# (no optimizations)...
[profile.release.build-override]
opt-level = 3

# The Rust profile used when building the node SGX enclave in release mode.
# These options are tuned through trial and error to minimize reproducibility
# issues :)
[profile.release-sgx]
inherits = "release"
# panic = "unwind" # sometimes repro diff?
# TODO(phlip9): fix `panic` -> `catch_unwind` -> `resume_unwind` swallowing
# panic message and backtrace in enclave.
panic = "abort"
codegen-units = 1
# lto = "fat" # big repro diff
lto = "thin"
# opt-level = 3 # big repro diff
opt-level = 2
debug = 0
strip = "debuginfo"

# NOTE: dev includes `check`, `clippy`, `test`, etc
[profile.dev]
# Our debug binaries are seriously bloated with sections like `.debug_pubtypes`
# eating literally _hundreds_ of MiB. All this debug info is useless outside of
# a debugger, which we rarely use.
#
# > Generates the minimal amount of debug info for backtraces with filename/line
# > number info, but not anything else, i.e. no variable or function parameter
# > info.
debug = "line-tables-only"
# This fixes 'warning: can't find symbol' when debugging, but breaks the
# server's build.rs, so it should always be commented out in git. More info:
# https://github.com/rust-lang/rust/issues/40787#issuecomment-1019465942
# https://doc.rust-lang.org/cargo/reference/profiles.html#split-debuginfo
# split-debuginfo = "packed"

#
# optimize some hot crypto/low-level packages even in debug mode
#

# ring
[profile.dev.package.ring]
opt-level = 3
[profile.dev.package.spin]
opt-level = 3
[profile.dev.package.untrusted]
opt-level = 3

# bitcoin
[profile.dev.package.secp256k1]
opt-level = 3
[profile.dev.package.secp256k1-sys]
opt-level = 3
[profile.dev.package.bitcoin_hashes]
opt-level = 3

# misc encoding
[profile.dev.package.base64]
opt-level = 3
[profile.dev.package.bytes]
opt-level = 3

# proptest
[profile.dev.package.proptest]
opt-level = 3
[profile.dev.package.rand_chacha]
opt-level = 3
[profile.dev.package.rand_xorshift]
opt-level = 3
