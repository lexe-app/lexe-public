[workspace]
resolver = "2"

members = [
    "app-rs",
    "app-rs-codegen",
    "common",
    "const-utils",
    "gdrive",
    "hex",
    "lazy-lock",
    "lexe-ln",
    "logger",
    "node",
    "payment-uri",
    "run-sgx",
    "sgx-test",
    "sgx-toml",
    "sgxs-sign",
    "sha256",
]

[workspace.package]
authors = [
    "Max Fang <max@lexe.app>",
    "Philip Hayes <philip@lexe.app>"
]
edition = "2021"
license = "PolyForm Noncommercial License 1.0.0"
# This is just a default version which can be inherited by workspace members
# that don't actually need semver versioning. Crates that require versioning
# will specify their version in their Cargo.toml as usual.
version = "0.1.0"

[workspace.dependencies]
# Use this section to declare dependencies used across multiple lexe crates.
# Lexe crates can then inherit the dependency using `workspace = true`.
# This makes it easier to keep dependency versions in sync. More info:
# https://doc.rust-lang.org/cargo/reference/workspaces.html#the-dependencies-table

# Ad hoc error definition, easy error propagation, error chains
anyhow = "1"
# Like `RwLock<Arc<T>>` for read-mostly, write-seldom scenarios.
arc-swap = "1.6"
# Derive-based command line argument parsing
argh = "0.1"
# async fn's in trait methods
async-trait = "0.1"
# Web framework from tokio-rs community based on tokio, hyper, and tower.
axum = { version = "0.7", default-features = false, features = [
    "http1",
    "http2",
    "macros" # Exposes `#[debug_handler]` and other useful macros
] }
# Converting to/from base 64.
base64 = "0.22"
# rust-bitcoin suite of libraries
bitcoin = { version = "0.30", features = ["serde"] }
bitcoin-bech32 = "0.12"
bitcoin_hashes = "0.12"
# Abstractions for working with bytes
bytes = "1"
# Write #[cfg(..)] if-else statements without repeating clauses
cfg-if = "1"
# Datetime utilities
chrono = { version = "0.4", default-features = false, features = [
    "std",
    "clock"
] }
# Allows setting environment variables using a .env file.
# dotenvy is a better maintained fork of dotenv
dotenvy = "0.15"
# High-level memory-safe Rust<->Dart FFI bindings.
# Keep this version in sync with `app_rs_dart/pubspec.yaml`.
flutter_rust_bridge = { version = "=2.1.0", default-features = false }
# The Rust+Dart codegen for flutter_rust_bridge
# Keep this version in sync with `app_rs_dart/pubspec.yaml`.
flutter_rust_bridge_codegen = { version = "=2.1.0", default-features = false, features = [] }
# Utils for working with futures
futures = "0.3"
# Core HTTP types and utils
http = "1"
http-body-util = "0.1"
# Low-level async HTTP library and server
# Use both hyper 0.14.28 and 1.0 at the same time while we transition
hyper = { version = "1", default-features = false, features = ["http2"] }
hyper_old = { version = "=0.14.28", package = "hyper", default-features = false, features = ["deprecated"] }
# Property-based testing
proptest = { version = "1", default-features = false }
# Arbitrary derive macro
proptest-derive = "0.5"
# Traits and utilities for generating randomness
rand = { version = "0.8", default-features = false }
rand_core = { version = "0.6", default-features = false, features = ["alloc"] }
# Easily generate x509 certs with ring
rcgen = { version = "0.12", default-features = false, features = ["ring", "zeroize"] }
# Safely cast &T to &U when T is a single field new-type
ref-cast = "1"
# Decimal number representation suitable for financial calculations
rust_decimal = { version = "1", default-features = false, features = ["serde"] }
rust_decimal_macros = { version = "1", default-features = false }
# TLS library
rustls = { version = "0.22", default-features = false }
# Rust bindings to libsecp256k1. Implements ECDSA and BIP 340 signatures.
# Version should match that used by the `bitcoin` crate.
secp256k1 = "0.27"
# A wrapper type for carefully handling secrets
secrecy = "0.8"
# SemVer version newtype for parsing and precedence
semver = "1"
# Serialization / deserialization framework
serde = { version = "1", features = ["derive"] }
serde_with = { version = "3", default-features = false, features = ["macros"] }
serde_json = "1"
# Enum #[derive(..)] helpers
strum = { version = "0.26", features = ["derive"] }
# Temporary files and directories
tempfile = "3"
# Easy error definition
thiserror = "1"
# Datetime library used by rcgen. Should match rcgen's `time` version
time = "0.3"
# serde-compatible TOML-parsing library
toml = "0.7"
# `Service` and `Layer`-based async middleware
tower = "0.4"
# Scoped, structured logging for asynchronous systems
tracing = "0.1"
tracing-core = "0.1"
tracing-subscriber = { version = "0.3", default-features = false, features = ["smallvec"] }

# --- PATCHED DEPENDENCIES --- #
# Use this section to declare patched dependencies.
# - See the following [patch.crates-io] section for patch declarations.
# - The version should use `=` to pin the exact version our patch applies to.
#   `=` ensures `cargo update` doesn't accidentally update the dependency,
#   leading to it becoming incompatible with our patch.

# A client for the Intel AESM service. Used during attestation to get quoted.
aesm-client = { version = "=0.6.0", default-features = false }
# High level webserver based on axum, tokio, hyper, and tower
axum-server = "=0.6.0"
# SGX Quote types
dcap-ql = { version = "=0.4.0", default-features = false }
# Fortanix EDP crate for running SGX applications, includes usercall extensions
enclave-runner = { version = "=0.6.0", default-features = false }
# Hyper-related utilities
hyper-util = { version = "=0.1.5", default-features = false, features = ["http2"] }
# LDK (rust-lightning) libraries
lightning = { version = "=0.0.121", features = ["max_level_trace"] }
lightning-invoice = { version = "=0.29" }
lightning-net-tokio = { version = "=0.0.121" }
lightning-transaction-sync = { version = "=0.0.121", features = ["esplora-async"] }
# Required by tokio
mio = "=0.8.11"
# High-level HTTP client
reqwest = { version = "=0.12.1", default-features = false, features = ["http2", "rustls-tls-manual-roots"] }
# TODO(max): Remove once esplora-client no longer needs it
reqwest11 = { version = "=0.11.26", package = "reqwest", default-features = false }
# Safe and small crypto primitives based on BoringSSL
ring = "=0.17.8"
ring16 = { version = "=0.16.20", package = "ring" } # TODO(max): Remove
# Core SGX types and platform intrinsics (for sealing, reports, etc...)
sgx-isa = "=0.4.1"
sgxs = "=0.8.0"
sgxs-loaders = "=0.4.0"
# Asynchronous runtime
tokio = { version = "=1.36.0", default-features = false }

[patch.crates-io]
# NOTE: Make sure to duplicate any changes to the root Cargo.toml.

# Fortanix EDP (rust-sgx) crates:
# * rust-sgx: hide all fortanixvme crates
# * ftx-sgx-tools: can build just `ftxsgx-elf2sgxs` on non-x86_64
# * enclave-runner: allow redirecting enclave standard input/output
# * enclave-runner: tighten tokio+futures features
aesm-client = { git = "https://github.com/lexe-app/rust-sgx", branch = "lexe-b6f02626-2024_06_28" }
async-usercalls = { git = "https://github.com/lexe-app/rust-sgx", branch = "lexe-b6f02626-2024_06_28" }
dcap-ql = { git = "https://github.com/lexe-app/rust-sgx", branch = "lexe-b6f02626-2024_06_28" }
enclave-runner = { git = "https://github.com/lexe-app/rust-sgx", branch = "lexe-b6f02626-2024_06_28" }
sgx-isa = { git = "https://github.com/lexe-app/rust-sgx", branch = "lexe-b6f02626-2024_06_28" }
sgxs = { git = "https://github.com/lexe-app/rust-sgx", branch = "lexe-b6f02626-2024_06_28" }
sgxs-loaders = { git = "https://github.com/lexe-app/rust-sgx", branch = "lexe-b6f02626-2024_06_28" }

# * server: Propagate current span across `tokio::spawn`
# * fix: propagate graceful shutdown to inner hyper connection
#   PR: <https://github.com/programatik29/axum-server/pull/119>
axum-server = { git = "https://github.com/lexe-app/axum-server", branch = "lexe-v0.6.0-2024_05_20" }

# * Replace RefCell with tokio::sync::RwLock 
# * Wallet and EsploraBlockchain are thread-safe*+
# * Reduce CACHE_ADDR_BATCH_SIZE from 100 -> 1
bdk = { git = "https://github.com/lexe-app/bdk", branch = "lexe-v0.29.0-2024_07_24" }
bdk-macros = { git = "https://github.com/lexe-app/bdk", branch = "lexe-v0.29.0-2024_07_24" }
# bdk = { path = "../../bdk" }
# bdk-macros = { path = "../../bdk/macros" }

# * sgx: socket2 requires `client-legacy-socket2` cfg
# * sgx: Skip DNS resolution in SGX
hyper-util = { git = "https://github.com/lexe-app/hyper-util", branch = "lexe-v0.1.5-2024_06_03" }

# * support sgx: Remove socket2 dependency. Just use tokio APIs directly. 
# TODO(max): Remove this patch once everything updates to hyper 1.0
hyper_old = { package = "hyper", git = "https://github.com/lexe-app/hyper", branch = "lexe-v0.14.28-2024_03_08" }

# * fortanix: SGX port
# * test: fix testing script
# * net: add `TcpStream::try_into_std`, used by our `tokio` SGX patchset
# * Revert "Support compilers with stdlibs that don't have `Send` `User<T>` types"
mio = { git = "https://github.com/lexe-app/mio", branch = "lexe-v0.8.11-2024_07_01" }

# * proxy: Expose `ProxyScheme`, `set_custom_http_auth`
# * lib: Fail compilation if using insecure TLS roots
reqwest = { git = "https://github.com/lexe-app/reqwest", branch = "lexe-v0.12.1-2024_03_22" }
reqwest11 = { package = "reqwest", git = "https://github.com/lexe-app/reqwest", branch = "lexe-v0.11.26-2024_03_12" }

# * cpu: use static cpuid feature set in SGX enclaves
# * rand: Use `RDRAND` implementation in SGX
# * build: Always build from source
ring = { git = "https://github.com/lexe-app/ring", branch = "lexe-v0.17.8-2024_03_21" }
ring16 = { package = "ring", git = "https://github.com/lexe-app/ring", branch = "lexe-v0.16.20-2023_09_26" }

# * fortanix: SGX port
# * test: fix testing script
# * net: add SGX `TcpStream::into_std` used by `lightning-net-tokio`
tokio = { git = "https://github.com/lexe-app/tokio",  branch = "lexe-v1.36.0-2024_07_01" }

# * lightning-invoice: Add `Description::as_inner`
#   - Upstream PR: https://github.com/lightningdevkit/rust-lightning/pull/3203
#   - TODO(max): Remove once we update to LDK v0.0.124
# * lightning-net-tokio: Propagate tracing spans
# TODO(max): Re-add "propagate tracing spans" patch once LDK is fully updated
lightning = { git = "https://github.com/lexe-app/rust-lightning", branch = "lexe-v0.0.121-2024_07_25" }
lightning-invoice = { git = "https://github.com/lexe-app/rust-lightning", branch = "lexe-v0.0.121-2024_07_25" }
lightning-net-tokio = { git = "https://github.com/lexe-app/rust-lightning", branch = "lexe-v0.0.121-2024_07_25" }
lightning-transaction-sync = { git = "https://github.com/lexe-app/rust-lightning", branch = "lexe-v0.0.121-2024_07_25" }
# lightning = { path = "../../ldk/lightning" }
# lightning-invoice = { path = "../../ldk/lightning-invoice" }
# lightning-net-tokio = { path = "../../ldk/lightning-net-tokio" }
# lightning-transaction-sync = { path = "../../ldk/lightning-transaction-sync" }

[profile.release]
# Enable "thin" LTO (link-time optimization) for better perf+binary size. "fat"
# LTO is marginally better perf-wise but much slower linking time.
lto = "thin"
strip = "debuginfo"

# For some reason, the `ring` build via nix + x86_64-unknown-linux-gnu is
# failing in its `build.rs` because it's compiling the native code with `-O0`
# (no optimizations)...
[profile.release.build-override]
opt-level = 3

# The Rust profile used when building the node SGX enclave in release mode.
# These options are tuned through trial and error to minimize reproducibility
# issues :)
[profile.release-sgx]
inherits = "release"
panic = "unwind" # sometimes repro diff?
# panic = "abort"
codegen-units = 1
# lto = "fat" # big repro diff
lto = "thin"
# opt-level = 3 # big repro diff
opt-level = 2
debug = "none"
strip = "debuginfo"

# NOTE: dev includes `check`, `clippy`, `test`, etc
[profile.dev]
# Our debug binaries are seriously bloated with sections like `.debug_pubtypes`
# eating literally _hundreds_ of MiB. All this debug info is useless outside of
# a debugger, which we rarely use.
#
# > Generates the minimal amount of debug info for backtraces with filename/line
# > number info, but not anything else, i.e. no variable or function parameter
# > info.
debug = "line-tables-only"
# This fixes 'warning: can't find symbol' when debugging, but breaks the
# server's build.rs, so it should always be commented out in git. More info:
# https://github.com/rust-lang/rust/issues/40787#issuecomment-1019465942
# https://doc.rust-lang.org/cargo/reference/profiles.html#split-debuginfo
# split-debuginfo = "packed"

#
# optimize some hot crypto/low-level packages even in debug mode
#

# ring
[profile.dev.package.ring]
opt-level = 3
[profile.dev.package.spin]
opt-level = 3
[profile.dev.package.untrusted]
opt-level = 3

# bitcoin
[profile.dev.package.secp256k1]
opt-level = 3
[profile.dev.package.secp256k1-sys]
opt-level = 3
[profile.dev.package.bitcoin_hashes]
opt-level = 3

# misc encoding
[profile.dev.package.base64]
opt-level = 3
[profile.dev.package.bytes]
opt-level = 3

# proptest
[profile.dev.package.proptest]
opt-level = 3
[profile.dev.package.rand_chacha]
opt-level = 3
[profile.dev.package.rand_xorshift]
opt-level = 3
