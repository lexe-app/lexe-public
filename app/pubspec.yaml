name: lexeapp
description: A secure, non-custodial, hosted BTC+LN wallet
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: '>=2.18.5 <3.0.0'

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.2

  # The low-level runtime interface for generated dart ffi bindings.
  ffi: ^2.0.1
  # flutter SDK
  flutter:
    sdk: flutter
  # The high-level memory safe interface for generated Rust<->dart ffi bindings.
  flutter_rust_bridge: ^1.75.1
  # Immutable record types and Rust-style enums in Dart.
  freezed_annotation: ^2.2.0
  # International number, currency, and date formatting
  intl: ^0.18.0
  # Used by the generated Rust<->dart ffi bindings.
  meta: ^1.8.0
  # Reactive primitives for asynchronous programming
  rxdart: ^0.27.7
  # Even more rxdart!
  rxdart_ext: ^0.2.8

dev_dependencies:
  # Used by freezed for codegen.
  build_runner: ^2.3.3

  # Used by flutter_rust_bridge to generate the dart ffi bingings at build-time.
  ffigen: ^7.2.4

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^2.0.0

  flutter_test:
    sdk: flutter

  # Codegen for immutable record types and Rust-style enums in Dart.
  freezed: ^2.3.2

  integration_test:
    sdk: flutter

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages
  
  # These are the (current) fonts used in the Lexe app.
  #
  # Until the UI/design stabilizes, I've decided to use
  # [variable fonts](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide).
  #
  # These variable fonts combine all the different styles and variations
  # (normal vs italic, font weights, font slant, optical sizing, etc...) in one
  # file, which is convenient while the UI is still in flux.
  #
  # When we go to launch, we could probably shave off ~1.5 MiB from the app size
  # by only shipping the exact, static font variantions that we ultimately use.
  fonts:
    - family: "Mona Sans"
      fonts:
        - asset: fonts/Mona-Sans.ttf
    - family: "Hubot Sans"
      fonts:
        - asset: fonts/Hubot-Sans.ttf
    - family: "Inter V"
      fonts:
        - asset: fonts/InterV.ttf
        - asset: fonts/InterV-Italic.ttf
          style: italic

  # GLSL GPU fragment shaders
  #
  # These are programs run on the GPU, usually to produce cool visual effects.
  # The actual fragment shader is invoked independently on each pixel in a
  # clipping area, like:
  #
  # ```
  # for each (x, y) in area {
  #   set_color(x, y, shader(x, y, ...other uniforms);
  # }
  # ```
  shaders:
    - shaders/inku.frag
