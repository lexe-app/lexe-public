name: lexeapp
description: A secure, non-custodial, hosted BTC+LN wallet
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: '>=3.4.1 <4.0.0'
  flutter: ^3.22.1

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  # Register Lexe to handle payment URIs ("bitcoin:", "lightning:", ...)
  app_links: ^6.1.1

  # Used by the generated flutter_rust_bridge FFI bindings.
  collection: ^1.18.0

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  # TODO(phlip9): disable pre-release
  cupertino_icons: ^1.0.6

  # Pretty duration formatting.
  duration: ^3.0.13

  # Used by the generated flutter_rust_bridge FFI bindings.
  ffi: ^2.1.0

  # flutter SDK
  flutter:
    sdk: flutter

  # flutter_markdown: ^0.7.1

  # The high-level memory safe interface for generated Rust<->dart ffi bindings.
  flutter_rust_bridge: 2.0.0

  # QR code scanning
  # NOTE: I tried `mobile_scanner`, but that adds a ton of closed source, MLKit
  # junk, which is kinda sketch and added a bunch of build headaches.
  #
  # NOTE: If we need to add `flutter_zxing` as a gitdep, then it requires a few
  # extra steps to "un-submodule-ify" it:
  #
  # ```bash
  # $ git fetch upstream && git switch -c gitdep_hack upstream/main
  # $ git submodule update --init --recursive
  # $ git rm --cached src/zxing
  # $ git rm .gitmodules
  # $ rm -rf src/zxing/.git
  # $ fd --extension="png" --exec-batch="rm" . ./src/zxing/
  # $ ./scripts/update_ios_macos_src.sh
  # $ git commit -a -m "gitdep hack"
  # $ git push
  # ```
  flutter_zxing:
    # version: ^1.7.1
    # TODO(phlip9): remove after master gets published
    git:
      url: https://github.com/phlip9/flutter_zxing.git
      ref: phlip9/revert-leak-fix-with-gitdep-hack

  # Immutable record types and Rust-style enums in Dart.
  freezed_annotation: ^2.4.1

  # International number, currency, and date formatting
  google_sign_in: ^6.2.1
  intl: ^0.19.0

  # Use up-to-date Material 3 icons
  # TODO(phlip9): before release, build explicit icon set.
  material_symbols_icons: ^4.2719.3

  # Used by the generated flutter_rust_bridge ffi bindings.
  meta: ^1.10.0

  # Platform-specific paths (used to find app data directory).
  path_provider: ^2.1.1

  # Reactive primitives for asynchronous programming
  rxdart: ^0.27.7
  # rxdart extensions
  rxdart_ext: ^0.2.9

  # Share button functionality.
  share_plus: ^9.0.0

  # Open URLs and custom URIs (e.g., "bitcoin:" and "lightning:" URIs)
  url_launcher: ^6.3.0

dev_dependencies:
  # Used by freezed for codegen. app-rs-codegen runs this after generating the
  # flutter_rust_bridge bindings.
  build_runner: ^2.4.7

  # Used by flutter_rust_bridge to generate the dart ffi bingings at build-time.
  ffigen: ^9.0.1

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^4.0.0

  flutter_test:
    sdk: flutter

  # Codegen for immutable record types and Rust-style enums in Dart.
  freezed: ^2.4.5

  # NOTE(phlip9): disabled until we upgrade to flutter_rust_bridge v2.0
  #
  # integration_test:
  #   sdk: flutter

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  # TODO(phlip9): disable pre-release
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages
  
  # These are the (current) fonts used in the Lexe app.
  #
  # Until the UI/design stabilizes, I've decided to use
  # [variable fonts](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide).
  #
  # These variable fonts combine all the different styles and variations
  # (normal vs italic, font weights, font slant, optical sizing, etc...) in one
  # file, which is convenient while the UI is still in flux.
  #
  # When we go to launch, we could probably shave off ~1.5 MiB from the app size
  # by only shipping the exact, static font variantions that we ultimately use.
  fonts:
    # - family: "Mona Sans"
    #   fonts:
    #     - asset: fonts/Mona-Sans.ttf
    - family: "Hubot Sans"
      fonts:
        - asset: fonts/Hubot-Sans.ttf
    - family: "Inter V"
      fonts:
        - asset: fonts/InterV.ttf
        - asset: fonts/InterV-Italic.ttf
          style: italic

  # GLSL GPU fragment shaders
  #
  # These are programs run on the GPU, usually to produce cool visual effects.
  # The actual fragment shader is invoked independently on each pixel in a
  # clipping area, like:
  #
  # ```
  # for each (x, y) in area {
  #   set_color(x, y, shader(x, y, ...other uniforms);
  # }
  # ```
  shaders:
    - shaders/inku.frag
