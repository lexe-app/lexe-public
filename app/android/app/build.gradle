plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace "app.lexe.lexeapp"
    compileSdk flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "app.lexe.lexeapp"
        // The app name. ex: displayed under the icon on the user's home screen.
        resValue "string", "app_name", "Lexe"

        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.

        // `super_clipboard` requires at least Android 23
        // <https://pub.dev/packages/super_clipboard#android-support>
        //
        // `flutter_zxing` requires at least Android 21
        // <https://pub.dev/packages/flutter_zxing#supported-platforms>
        minSdkVersion 23
        // minSdkVersion flutter.minSdkVersion

        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "flavor"

    productFlavors {
        // TODO(phlip9): add separate prod/staging/dev flavors?

        // Lexe design mode
        design {
            dimension "flavor"
            // The app name. ex: displayed under the icon on the user's home screen.
            resValue "string", "app_name", "Lexe Design"
            applicationIdSuffix ".design"
            versionNameSuffix "-design"
        }
    }
}

flutter {
    source "../.."
}

//
// Setup Android gradle build x Rust `cargo ndk build` integration.
//
// This will run `../build_rust.sh` before building all the flutter/java code.
// The script runs `cargo ndk build` and dumps the native .so libs in
// `./src/main/jniLibs/`
//

// For each build type (e.g. debug, profile, release)
// buildType: [ApplicationBuildType](https://developer.android.com/reference/tools/gradle-api/8.4/com/android/build/api/dsl/ApplicationBuildType)
android.buildTypes.all { buildType ->
    def profileName = buildType.name.capitalize()
    def profileArg = buildType.isDebuggable() ? null : '--release'
    // println "register: cargoBuild$profileName"

    // Register a new task that runs `cargo ndk build` with the right debug vs
    // release build profile. We don't currently build the native Rust lib
    // differently for different `productFlavors`.
    //
    // tasks: [TaskCollection](https://docs.gradle.org/current/kotlin-dsl/gradle/org.gradle.api.tasks/-task-collection/index.html)
    // [Exec](https://docs.gradle.org/current/kotlin-dsl/gradle/org.gradle.api.tasks/-exec/index.html)
    tasks.register("cargoBuild$profileName", Exec) {
        workingDir "../.."
        commandLine "android/build_rust.sh"
        if (profileArg != null) {
            args profileArg
        }
    }

    // For each product flavor build (e.g., "" (default), "design"), make sure
    // they run the right `cargo ndk build`.
    //
    // flavor: [ApplicationProductFlavor](https://developer.android.com/reference/tools/gradle-api/8.4/com/android/build/api/dsl/ApplicationProductFlavor)
    (android.productFlavors*.name + "").each { flavorName ->
        def taskPostfix = flavorName.capitalize() + profileName

        // task: [Task](https://docs.gradle.org/current/kotlin-dsl/gradle/org.gradle.api/-task/depends-on.html)
        tasks.whenTaskAdded { task ->
            if (task.name == "javaPreCompile$taskPostfix") {
                // println "javaPreCompile$taskPostfix -> cargoBuild$profileName"
                task.dependsOn "cargoBuild$profileName"
            }
        }
    }
}

