plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace "app.lexe.lexeapp"
    compileSdk flutter.compileSdkVersion

    // Needs to match the value in `app_rs_dart/android/build.gradle`.
    ndkVersion "27.0.11902837"
    // ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "app.lexe.lexeapp"

        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.

        // `super_clipboard` requires at least Android 23
        // <https://pub.dev/packages/super_clipboard#android-support>
        //
        // `flutter_zxing` requires at least Android 21
        // <https://pub.dev/packages/flutter_zxing#supported-platforms>
        minSdkVersion 23
        // minSdkVersion flutter.minSdkVersion

        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "flavor"

    // We're now using different application "flavors" to differentiate
    // prod/staging/dev/design instead of flutter `--dart-define` args.
    //
    // The key advantage is that each flavor gets its own separately installed
    // app on-device. This way we can have multiple flavors installed
    // simultaneously. The app variants then don't step on each other's toes.
    productFlavors {
        // (Default) Local development against a local lexe backend.
        dev {
            dimension "flavor"
            // The app name. ex: displayed under the icon on the user's home screen.
            resValue "string", "app_name", "Lexe Dev"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
        }

        // Lexe testnet/staging backend.
        staging {
            dimension "flavor"
            // The app name. ex: displayed under the icon on the user's home screen.
            resValue "string", "app_name", "Lexe Staging"
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
        }

        // Lexe mainnet/production backend.
        prod {
            dimension "flavor"
            // The app name. ex: displayed under the icon on the user's home screen.
            resValue "string", "app_name", "Lexe"
        }

        // Lexe design mode.
        design {
            dimension "flavor"
            // The app name. ex: displayed under the icon on the user's home screen.
            resValue "string", "app_name", "Lexe Design"
            applicationIdSuffix ".design"
            versionNameSuffix "-design"
        }
    }
}

flutter {
    source "../.."
}
