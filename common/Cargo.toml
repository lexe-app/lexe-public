[package]
name = "common"
version = "0.1.0"
authors = [
    "Max Fang <protonmail.com@maxfa.ng>",
    "Philip Hayes <philiphayes9@gmail.com>"
]
license = "PolyForm Noncommercial License 1.0.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
# --- BITCOIN --- #

bitcoin = { version = "0.28.1", features = ["std", "use-serde"] }
bitcoin-bech32 = "0.12"

# --- LIGHTNING --- #

# lightning = { version = "0.0.108", features = ["max_level_trace"] }
# lightning-block-sync = { version = "0.0.108", features = [ "rpc-client" ] }
# lightning-invoice = { version = "0.16" }
# lightning-net-tokio = { version = "0.0.108" }

# TODO Switch to back to crates.io version after LDK with lightning-net-tokio
# patch is released
# lightning = { git = "https://github.com/lexe-tech/rust-lightning", features = ["max_level_trace"], branch = "net-tokio-connect-v0.0.108" }
# lightning-block-sync = { git = "https://github.com/lexe-tech/rust-lightning", features = [ "rpc-client" ], branch = "net-tokio-connect-v0.0.108" }
lightning-invoice = { git = "https://github.com/lexe-tech/rust-lightning", branch = "net-tokio-connect-v0.0.108" }
# lightning-net-tokio = { git = "https://github.com/lexe-tech/rust-lightning", branch = "net-tokio-connect-v0.0.108" }

# NOTE For debugging and testing patches during local development
# lightning = { path = "../../ldk/lightning", features = ["max_level_trace"]}
# lightning-block-sync = { path = "../../ldk/lightning-block-sync", features = [ "rpc-client" ] }
# lightning-invoice = { path = "../../ldk/lightning-invoice" }
# lightning-net-tokio = { path = "../../ldk/lightning-net-tokio" }

# --- GENERAL --- #

# Ad hoc error definition, easy error propagation, error chains
anyhow = "1"
# Derive-based command line argument parsing
argh = "0.1"
# Working with bytes
bytes = "1"
# Conveniently write #[cfg(..)] if-else statements without repeating clauses
cfg-if = "1"
# SGX Quote types
# NOTE: version must exactly match patched version
dcap-ql = { version = "=0.3.4", default-features = false, features = [] }
# Small conversion from fixed ECDSA signature to ASN.1 format
num-bigint = { version = "0.4", default-features = false, features = [] }
# Lazily parse the Intel SGX Root CA cert
once_cell = "1"
# Core rand traits for generating randomness
rand_core = { version = "0.6.3", default-features = false, features = ["alloc"] }
# Easily generate x509 certs with ring
rcgen = { version = "0.9", default-features = false, features = [] }
# Used to make HTTP requests to the API
reqwest = { version = "0.11", default-features = false, features = ["json", "rustls-tls-manual-roots"] }
# Safe and small crypto primitives based on BoringSSL
# NOTE: version must exactly match patched version
ring = "=0.16.20"
# TLS library
rustls = { version = "0.20", default-features = false, features = [
    "dangerous_configuration",
] }
# Deserialize PEM certs
rustls-pemfile = "1"
# A wrapper type for carefully handling secrets
secrecy = "0.8"
# Serializing/deserializing types
serde = { version = "1", features = ["derive"] }
# Core SGX types
# NOTE: version must exactly match patched version
sgx-isa = "=0.4.0"
# Easy error definition
thiserror = "1"
# Verify x509 certificates
webpki = "0.22"
# Parsing x509 cert extensions
# TODO(phlip9): avoid this extra dependency and just use `yasna` directly
x509-parser = { version = "0.14", default-features = false }
# TODO(phlip9): avoid this extra dependency and just use `yasna` directly
asn1-rs = { version = "0.5", default-features = false }
# For constructing/parsing ASN.1 data in x509 certs
yasna = { version = "0.5", default-features = false, features = ["num-bigint"] }

[target.'cfg(target_env = "sgx")'.dependencies]
# For verifying SGX Report MACs
aes = { version = "0.8", features = ["zeroize"] }
# A client for the Intel AESM service. Used in the attestation process to get quoted.
aesm-client = "=0.5.4"
# For casting byte buffers to/from the AESM client from/to actual structured data.
bytemuck = { version = "1.9.1", default-features = false, features = ["derive", "min_const_generics"] }
# For verifying SGX Report MACs
cmac = { version = "0.7", features = ["std", "zeroize"] }

[dev-dependencies]
# property based testing
proptest = { version = "1", default-features = false, features = ["alloc"] }
# Arbitrary derive macro
proptest-derive = "0.3"
# Testing serde
serde_json = "1"
# Tokio features used when testing
# NOTE: version must exactly match patched version
tokio = { version = "=1.15.0", default-features = false, features = [
    "io-util",
    "macros",
    "rt",
    "sync",
    "test-util",
    "time"
] }
# lower-level async TLS interface
tokio-rustls = { version = "0.23", default-features = false }

[target.'cfg(target_env = "sgx")'.dev-dependencies]
# Print backtraces in tests
sgx-panic-backtrace = "0.1"

[target.'cfg(not(target_env = "sgx"))'.dev-dependencies]
# Add some useful proptest features when testing during development
proptest = "1"

[package.metadata.fortanix-sgx]
# stack size (in bytes) for each thread, the default stack size is 0x20000.
stack-size=0x200_000
# Gotcha: Don't forget to count the main thread when counting number of threads
threads=4
