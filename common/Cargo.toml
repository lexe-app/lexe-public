[package]
name = "common"
authors.workspace = true
edition.workspace = true
license.workspace = true
version.workspace = true

[features]
# Explicitly specify that no features should be enabled by default.
default = []
# Enables various test hooks and utilities. Should be disabled in staging/prod.
test-utils = [
  "dep:chrono",
  "dep:proptest",
  "dep:proptest-derive",
  "dep:serde_urlencoded",
]

[package.metadata.fortanix-sgx]
# stack size (in bytes) for each thread, the default stack size is 0x20_000.
stack-size = 0x20_0000
# The max number of threads we can spawn concurrently inside the SGX enclave.
# We give some extra room because the current fortanix rust-sgx
# `async_usercalls` implementation requires an extra thread. see:
# https://github.com/lexe-app/rust-sgx/blob/70d11205fed08e49886bb25a1ea3df19928e8287/async-usercalls/src/queues.rs#L46
threads = 4

[dependencies]

# --- LEXE --- #

byte-array.path = "../byte-array"
hex = { path = "../hex", features = ["bytes"] }
lexe-std = { path = "../lexe-std", features = ["ref-cast"] }
sha256.path = "../sha256"

# --- WORKSPACE --- #

anyhow.workspace = true
asn1-rs.workspace = true
async-trait.workspace = true
bcs.workspace = true
bip39.workspace = true
bitcoin = { workspace = true, features = ["serde"] }
bitcoin_hashes.workspace = true
bitcoin-bech32.workspace = true
base64.workspace = true
bytes.workspace = true
cfg-if.workspace = true
dotenvy.workspace = true
http.workspace = true
http-body-util.workspace = true
lightning.workspace = true
lightning-invoice.workspace = true
rand.workspace = true
rand_core.workspace = true
rcgen.workspace = true
ref-cast.workspace = true
# TODO(max): reqwest can be removed from common; move out certs
reqwest = { workspace = true, features = ["json"] }
ring.workspace = true
rust_decimal.workspace = true
rust_decimal_macros.workspace = true
secrecy.workspace = true
semver = { workspace = true, features = ["serde"] }
serde.workspace = true
serde_with.workspace = true
serde_json.workspace = true
sgx-isa.workspace = true
strum.workspace = true
thiserror.workspace = true
tracing.workspace = true
x509-parser.workspace = true
yasna.workspace = true

# --- OPTIONAL --- #
# These must have `optional = true` to prevent infecting production binaries.

chrono = { optional = true, workspace = true }
proptest = { optional = true, workspace = true, features = ["alloc"] }
proptest-derive = { optional = true, workspace = true }
serde_urlencoded = { optional = true, workspace = true }

[target.'cfg(not(target_env = "sgx"))'.dependencies]
# Include std impls when testing outside of SGX
proptest = { optional = true, workspace = true, features = ["std"] }

[dev-dependencies]
chrono.workspace = true
proptest = { workspace = true, features = ["alloc"] }
proptest-derive.workspace = true
serde_urlencoded.workspace = true

[target.'cfg(not(target_env = "sgx"))'.dev-dependencies]
# Include std impls when testing outside of SGX
proptest = { workspace = true, features = ["std"] }
