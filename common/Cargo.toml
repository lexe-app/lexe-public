[package]
name = "common"
authors.workspace = true
edition.workspace = true
license.workspace = true
version.workspace = true

[features]
# Explicitly specify that no features should be enabled by default.
default = []
# Enables various test hooks and utilities. Should be disabled in staging/prod.
test-utils = [
  "dep:electrsd",
  "dep:proptest",
  "dep:proptest-derive",
  "dep:serde_urlencoded",
]

[package.metadata.fortanix-sgx]
# stack size (in bytes) for each thread, the default stack size is 0x20_000.
stack-size = 0x20_0000
# The max number of threads we can spawn concurrently inside the SGX enclave.
# We give some extra room because `#[tokio::test(start_paused = true)]` etc
# spawns threads in the background. Additionally, the current fortanix rust-sgx
# `async_usercalls` implementation requires an extra thread. see:
# https://github.com/lexe-app/rust-sgx/blob/70d11205fed08e49886bb25a1ea3df19928e8287/async-usercalls/src/queues.rs#L46
threads = 8

[dependencies]

# --- WORKSPACE --- #

anyhow.workspace = true
async-trait.workspace = true
bitcoin = { workspace = true, features = ["serde"] }
bitcoin_hashes.workspace = true
bitcoin-bech32.workspace = true
base64.workspace = true
bytes.workspace = true
chrono.workspace = true
cfg-if.workspace = true
dcap-ql.workspace = true
dotenvy.workspace = true
futures.workspace = true
# Use both hyper 0.14.28 and 1.0 at the same time while we transition
hyper = { workspace = true, features = ["http1", "http2", "server"] }
hyper_old = { workspace = true, features = ["http1", "http2", "server", "tcp"] }
lightning.workspace = true
lightning-invoice.workspace = true
# lightning-net-tokio.workspace = true
# lightning-transaction-sync.workspace = true
rand_core.workspace = true
rcgen.workspace = true
reqwest = { workspace = true, features = ["json", "rustls-tls-manual-roots"] }
rustls = { workspace = true, features = ["dangerous_configuration"] }
ring.workspace = true
rust_decimal.workspace = true
rust_decimal_macros.workspace = true
secrecy.workspace = true
semver = { workspace = true, features = ["serde"] }
serde.workspace = true
serde_with = { workspace = true, features = ["macros"] }
serde_json.workspace = true
sgx-isa.workspace = true
thiserror.workspace = true
time.workspace = true
tokio = { workspace = true, features = [
    "io-util",
    "macros",
    "rt",
    "sync",
    "time"
] }
tracing.workspace = true
warp = { workspace = true, features = ["tls"] }

# --- CRATE-SPECIFIC --- #

# hyper and tower Service-based webserver
axum-server = { version = "0.6", default-features = false }
# Binary canonical serialization format
bcs = "0.1"
# BIP39 mnemonic codes
bip39 = { version = "2", features = ["zeroize"] }
# Small conversion from fixed ECDSA signature to ASN.1 format
num-bigint = { version = "0.4", default-features = false, features = [] }
# Safely cast &T to &U when T is a single field new-type
ref-cast = "1"
# Deserialize PEM certs
rustls-pemfile = "1"
# Const SHA256 hash
sha2-const = "0.1"
# Verify x509 certificates
webpki = { version = "0.22", default-features = false, features = ["std"] }
# Parsing x509 cert extensions
# TODO(phlip9): avoid this extra dependency and just use `yasna` directly
x509-parser = { version = "0.14", default-features = false }
# TODO(phlip9): avoid this extra dependency and just use `yasna` directly
asn1-rs = { version = "0.5", default-features = false }
# For constructing/parsing ASN.1 data in x509 certs
yasna = { version = "0.5", default-features = false, features = ["num-bigint"] }

# --- FEATURE-CONDITIONAL --- #
# These must have `optional = true` to prevent infecting production binaries.

proptest = { optional = true, workspace = true, features = ["alloc"] }
proptest-derive = { optional = true, workspace = true }
# This version should track the one that `warp` uses internally.
serde_urlencoded = { optional = true, version = "0.7" }

[target.'cfg(target_env = "sgx")'.dependencies]
# For verifying SGX Report MACs
aes = { version = "0.8", features = ["zeroize"] }
# A client for the Intel AESM service. Used in the attestation process to get quoted.
aesm-client = "=0.5.4"
# For casting byte buffers to/from the AESM client from/to actual structured data.
bytemuck = { version = "1", default-features = false, features = ["derive", "min_const_generics"] }
# For verifying SGX Report MACs
cmac = { version = "0.7", features = ["std", "zeroize"] }

[target.'cfg(not(target_env = "sgx"))'.dependencies]
# Bitcoind + electrum + esplora regtest
# Note that electrsd reexports bitcoind and electrum-client in its crate root.
# Note that this crate is additionally declared in the non-SGX dev dependencies.
# TODO(max): Upgrade to bitcoind 23_0 once flakiness is fixed:
# https://github.com/RCasatta/bitcoind/issues/101
# https://github.com/RCasatta/bitcoind/issues/85
electrsd = { optional = true, version = "0.22", features = [ "bitcoind_22_0", "esplora_a33e97e1", "legacy" ] }
# Include std impls when testing outside of SGX
proptest = { optional = true, workspace = true, features = ["std"] }

[dev-dependencies]
proptest = { workspace = true, features = ["alloc"] }
proptest-derive.workspace = true
serde_json.workspace = true
# This version should track the one that `warp` uses internally.
serde_urlencoded = "0.7"
tokio = { workspace = true, features = [
    "io-util",
    "macros",
    "rt",
    "sync",
    "test-util",
    "time"
] }
# Lower-level async TLS interface
tokio-rustls = { version = "0.24", default-features = false }
# Utilities for testing futures
tokio-test = "0.4"

[target.'cfg(target_env = "sgx")'.dev-dependencies]
# Print backtraces in tests
sgx-panic-backtrace = "0.1"

[target.'cfg(not(target_env = "sgx"))'.dev-dependencies]
# Bitcoind + electrum + esplora regtest
electrsd = { version = "0.22", features = [ "bitcoind_22_0", "esplora_a33e97e1", "legacy" ] }
# Include std impls when testing outside of SGX
proptest = { workspace = true, features = ["std"] }
