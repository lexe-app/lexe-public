use serde::{Deserialize, Serialize};

/// Basically `bdk::Balance`, so that `common` doesn't need to depend on `bdk`.
///
/// Partitions a wallet balance into different categories.
#[derive(Serialize, Deserialize, Debug, PartialEq, Eq, Clone, Default)]
pub struct Balance {
    /// All coinbase outputs not yet matured
    pub immature_sat: u64,
    /// Unconfirmed UTXOs generated by a wallet tx
    pub trusted_pending_sat: u64,
    /// Unconfirmed UTXOs received from an external wallet
    pub untrusted_pending_sat: u64,
    /// Confirmed and immediately spendable balance
    pub confirmed_sat: u64,
}

impl Balance {
    /// Get sum of trusted pending and confirmed coins
    pub fn get_spendable(&self) -> u64 {
        self.confirmed_sat + self.trusted_pending_sat
    }

    /// Get the whole balance visible to the wallet
    pub fn get_total(&self) -> u64 {
        self.confirmed_sat
            + self.trusted_pending_sat
            + self.untrusted_pending_sat
            + self.immature_sat
    }
}

impl std::fmt::Display for Balance {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let spendable = self.get_spendable();
        let total = self.get_total();
        write!(
            f,
            "{{ spendable balance: {spendable} sats, total: {total} sats }}"
        )
    }
}

impl std::ops::Add for Balance {
    type Output = Self;

    fn add(self, other: Self) -> Self {
        Self {
            immature_sat: self.immature_sat + other.immature_sat,
            trusted_pending_sat: self.trusted_pending_sat
                + other.trusted_pending_sat,
            untrusted_pending_sat: self.untrusted_pending_sat
                + other.untrusted_pending_sat,
            confirmed_sat: self.confirmed_sat + other.confirmed_sat,
        }
    }
}

impl std::iter::Sum for Balance {
    fn sum<I: Iterator<Item = Self>>(iter: I) -> Self {
        iter.fold(
            Balance {
                ..Default::default()
            },
            |a, b| a + b,
        )
    }
}
