// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.1.

//
// From: `dart_preamble` in `app-rs-codegen/src/lib.rs`
// ignore_for_file: invalid_internal_annotation, always_use_package_imports, directives_ordering, prefer_const_constructors, sort_unnamed_constructors_first
//

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';
import 'ffi/api.dart';
import 'ffi/app.dart';
import 'ffi/debug.dart';
import 'ffi/form.dart';
import 'ffi/gdrive.dart';
import 'ffi/logger.dart';
import 'ffi/payment_uri.dart';
import 'ffi/settings.dart';
import 'ffi/types.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class AppRs extends BaseEntrypoint<AppRsApi, AppRsApiImpl, AppRsWire> {
  @internal
  static final instance = AppRs._();

  AppRs._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    AppRsApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required AppRsApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<AppRsApiImpl, AppRsWire> get apiImplConstructor =>
      AppRsApiImpl.new;

  @override
  WireConstructor<AppRsWire> get wireConstructor =>
      AppRsWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.7.1';

  @override
  int get rustContentHash => -25217711;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'app_rs',
    ioDirectory: '../app-rs/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class AppRsApi extends BaseApi {
  Future<void> crateFfiAppAppHandleCloseChannel(
      {required AppHandle that, required CloseChannelRequest req});

  Future<CreateInvoiceResponse> crateFfiAppAppHandleCreateInvoice(
      {required AppHandle that, required CreateInvoiceRequest req});

  Future<void> crateFfiAppAppHandleDeletePaymentDb({required AppHandle that});

  Future<FiatRates> crateFfiAppAppHandleFiatRates({required AppHandle that});

  Future<String> crateFfiAppAppHandleGetAddress({required AppHandle that});

  ShortPaymentAndIndex?
      crateFfiAppAppHandleGetFinalizedNotJunkShortPaymentByScrollIdx(
          {required AppHandle that, required int scrollIdx});

  ShortPaymentAndIndex? crateFfiAppAppHandleGetFinalizedShortPaymentByScrollIdx(
      {required AppHandle that, required int scrollIdx});

  int crateFfiAppAppHandleGetNumFinalizedNotJunkPayments(
      {required AppHandle that});

  int crateFfiAppAppHandleGetNumFinalizedPayments({required AppHandle that});

  int crateFfiAppAppHandleGetNumPayments({required AppHandle that});

  int crateFfiAppAppHandleGetNumPendingNotJunkPayments(
      {required AppHandle that});

  int crateFfiAppAppHandleGetNumPendingPayments({required AppHandle that});

  Payment? crateFfiAppAppHandleGetPaymentByVecIdx(
      {required AppHandle that, required int vecIdx});

  ShortPaymentAndIndex?
      crateFfiAppAppHandleGetPendingNotJunkShortPaymentByScrollIdx(
          {required AppHandle that, required int scrollIdx});

  ShortPaymentAndIndex? crateFfiAppAppHandleGetPendingShortPaymentByScrollIdx(
      {required AppHandle that, required int scrollIdx});

  ShortPaymentAndIndex? crateFfiAppAppHandleGetShortPaymentByScrollIdx(
      {required AppHandle that, required int scrollIdx});

  Future<int?> crateFfiAppAppHandleGetVecIdxByPaymentIndex(
      {required AppHandle that, required PaymentIndex paymentIndex});

  Future<ListChannelsResponse> crateFfiAppAppHandleListChannels(
      {required AppHandle that});

  Future<AppHandle?> crateFfiAppAppHandleLoad({required Config config});

  Future<NodeInfo> crateFfiAppAppHandleNodeInfo({required AppHandle that});

  Future<OpenChannelResponse> crateFfiAppAppHandleOpenChannel(
      {required AppHandle that, required OpenChannelRequest req});

  Future<PayInvoiceResponse> crateFfiAppAppHandlePayInvoice(
      {required AppHandle that, required PayInvoiceRequest req});

  Future<PayOnchainResponse> crateFfiAppAppHandlePayOnchain(
      {required AppHandle that, required PayOnchainRequest req});

  Future<PreflightCloseChannelResponse>
      crateFfiAppAppHandlePreflightCloseChannel(
          {required AppHandle that, required CloseChannelRequest req});

  Future<PreflightOpenChannelResponse> crateFfiAppAppHandlePreflightOpenChannel(
      {required AppHandle that, required PreflightOpenChannelRequest req});

  Future<PreflightPayInvoiceResponse> crateFfiAppAppHandlePreflightPayInvoice(
      {required AppHandle that, required PreflightPayInvoiceRequest req});

  Future<PreflightPayOnchainResponse> crateFfiAppAppHandlePreflightPayOnchain(
      {required AppHandle that, required PreflightPayOnchainRequest req});

  Future<AppHandle> crateFfiAppAppHandleRestore(
      {required Config config,
      required String googleAuthCode,
      required RootSeed rootSeed});

  SettingsDb crateFfiAppAppHandleSettingsDb({required AppHandle that});

  Future<AppHandle> crateFfiAppAppHandleSignup(
      {required Config config,
      required String googleAuthCode,
      required String password,
      String? signupCode});

  Future<bool> crateFfiAppAppHandleSyncPayments({required AppHandle that});

  Future<void> crateFfiAppAppHandleUpdatePaymentNote(
      {required AppHandle that, required UpdatePaymentNote req});

  AppUserInfo crateFfiAppAppHandleUserInfo({required AppHandle that});

  ClientPaymentId crateFfiTypesClientPaymentIdGenNew();

  void crateFfiDebugDeleteLatestProvisioned({required Config config});

  void crateFfiDebugDeleteSecretStore({required Config config});

  DeployEnv crateFfiTypesDeployEnvFromStr({required String s});

  GDriveRestoreClient crateFfiGdriveGDriveClientIntoRestoreClient(
      {required GDriveClient that});

  String? crateFfiGdriveGDriveClientServerCode({required GDriveClient that});

  Future<GDriveClient> crateFfiGdriveGDriveOAuth2FlowExchange(
      {required GDriveOAuth2Flow that, required String resultUri});

  GDriveOAuth2Flow crateFfiGdriveGDriveOAuth2FlowInit(
      {required String clientId, required String serverClientId});

  RootSeed crateFfiGdriveGDriveRestoreCandidateTryDecrypt(
      {required GDriveRestoreCandidate that, required String password});

  String crateFfiGdriveGDriveRestoreCandidateUserPk(
      {required GDriveRestoreCandidate that});

  Future<List<GDriveRestoreCandidate>>
      crateFfiGdriveGDriveRestoreClientFindRestoreCandidates(
          {required GDriveRestoreClient that,
          required DeployEnv deployEnv,
          required Network network,
          required bool useSgx});

  Stream<String> crateFfiLoggerInitRustLogStream({required String rustLog});

  Network crateFfiTypesNetworkFromStr({required String s});

  Future<PaymentMethod> crateFfiPaymentUriResolveBest(
      {required Network network, required String uriStr});

  Settings crateFfiSettingsSettingsDbRead({required SettingsDb that});

  void crateFfiSettingsSettingsDbReset({required SettingsDb that});

  void crateFfiSettingsSettingsDbUpdate(
      {required SettingsDb that, required Settings update});

  Future<void> crateFfiDebugUnconditionalError();

  Future<void> crateFfiDebugUnconditionalPanic();

  UserChannelId crateFfiTypesUserChannelIdGenNew();

  String? crateFfiFormValidatePassword({required String password});

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_App;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_App;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AppPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_GDriveClientInner;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_GDriveClientInner;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_GDriveClientInnerPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_GDriveRestoreCandidateRs;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_GDriveRestoreCandidateRs;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_GDriveRestoreCandidateRsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_GDriveRestoreClientRs;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_GDriveRestoreClientRs;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_GDriveRestoreClientRsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RootSeedRs;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RootSeedRs;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RootSeedRsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SettingsDbRs;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SettingsDbRs;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SettingsDbRsPtr;
}

class AppRsApiImpl extends AppRsApiImplPlatform implements AppRsApi {
  AppRsApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateFfiAppAppHandleCloseChannel(
      {required AppHandle that, required CloseChannelRequest req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        sse_encode_box_autoadd_close_channel_request(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiAppAppHandleCloseChannelConstMeta,
      argValues: [that, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleCloseChannelConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_close_channel",
        argNames: ["that", "req"],
      );

  @override
  Future<CreateInvoiceResponse> crateFfiAppAppHandleCreateInvoice(
      {required AppHandle that, required CreateInvoiceRequest req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        sse_encode_box_autoadd_create_invoice_request(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_create_invoice_response,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiAppAppHandleCreateInvoiceConstMeta,
      argValues: [that, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleCreateInvoiceConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_create_invoice",
        argNames: ["that", "req"],
      );

  @override
  Future<void> crateFfiAppAppHandleDeletePaymentDb({required AppHandle that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiAppAppHandleDeletePaymentDbConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleDeletePaymentDbConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_delete_payment_db",
        argNames: ["that"],
      );

  @override
  Future<FiatRates> crateFfiAppAppHandleFiatRates({required AppHandle that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_fiat_rates,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiAppAppHandleFiatRatesConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleFiatRatesConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_fiat_rates",
        argNames: ["that"],
      );

  @override
  Future<String> crateFfiAppAppHandleGetAddress({required AppHandle that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiAppAppHandleGetAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleGetAddressConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_get_address",
        argNames: ["that"],
      );

  @override
  ShortPaymentAndIndex?
      crateFfiAppAppHandleGetFinalizedNotJunkShortPaymentByScrollIdx(
          {required AppHandle that, required int scrollIdx}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        sse_encode_CastedPrimitive_usize(scrollIdx, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_short_payment_and_index,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateFfiAppAppHandleGetFinalizedNotJunkShortPaymentByScrollIdxConstMeta,
      argValues: [that, scrollIdx],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateFfiAppAppHandleGetFinalizedNotJunkShortPaymentByScrollIdxConstMeta =>
          const TaskConstMeta(
            debugName:
                "app_handle_get_finalized_not_junk_short_payment_by_scroll_idx",
            argNames: ["that", "scrollIdx"],
          );

  @override
  ShortPaymentAndIndex? crateFfiAppAppHandleGetFinalizedShortPaymentByScrollIdx(
      {required AppHandle that, required int scrollIdx}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        sse_encode_CastedPrimitive_usize(scrollIdx, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_short_payment_and_index,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateFfiAppAppHandleGetFinalizedShortPaymentByScrollIdxConstMeta,
      argValues: [that, scrollIdx],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateFfiAppAppHandleGetFinalizedShortPaymentByScrollIdxConstMeta =>
          const TaskConstMeta(
            debugName: "app_handle_get_finalized_short_payment_by_scroll_idx",
            argNames: ["that", "scrollIdx"],
          );

  @override
  int crateFfiAppAppHandleGetNumFinalizedNotJunkPayments(
      {required AppHandle that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_CastedPrimitive_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiAppAppHandleGetNumFinalizedNotJunkPaymentsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateFfiAppAppHandleGetNumFinalizedNotJunkPaymentsConstMeta =>
          const TaskConstMeta(
            debugName: "app_handle_get_num_finalized_not_junk_payments",
            argNames: ["that"],
          );

  @override
  int crateFfiAppAppHandleGetNumFinalizedPayments({required AppHandle that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_CastedPrimitive_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiAppAppHandleGetNumFinalizedPaymentsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleGetNumFinalizedPaymentsConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_get_num_finalized_payments",
        argNames: ["that"],
      );

  @override
  int crateFfiAppAppHandleGetNumPayments({required AppHandle that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_CastedPrimitive_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiAppAppHandleGetNumPaymentsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleGetNumPaymentsConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_get_num_payments",
        argNames: ["that"],
      );

  @override
  int crateFfiAppAppHandleGetNumPendingNotJunkPayments(
      {required AppHandle that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_CastedPrimitive_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiAppAppHandleGetNumPendingNotJunkPaymentsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateFfiAppAppHandleGetNumPendingNotJunkPaymentsConstMeta =>
          const TaskConstMeta(
            debugName: "app_handle_get_num_pending_not_junk_payments",
            argNames: ["that"],
          );

  @override
  int crateFfiAppAppHandleGetNumPendingPayments({required AppHandle that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_CastedPrimitive_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiAppAppHandleGetNumPendingPaymentsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleGetNumPendingPaymentsConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_get_num_pending_payments",
        argNames: ["that"],
      );

  @override
  Payment? crateFfiAppAppHandleGetPaymentByVecIdx(
      {required AppHandle that, required int vecIdx}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        sse_encode_CastedPrimitive_usize(vecIdx, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_payment,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiAppAppHandleGetPaymentByVecIdxConstMeta,
      argValues: [that, vecIdx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleGetPaymentByVecIdxConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_get_payment_by_vec_idx",
        argNames: ["that", "vecIdx"],
      );

  @override
  ShortPaymentAndIndex?
      crateFfiAppAppHandleGetPendingNotJunkShortPaymentByScrollIdx(
          {required AppHandle that, required int scrollIdx}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        sse_encode_CastedPrimitive_usize(scrollIdx, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_short_payment_and_index,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateFfiAppAppHandleGetPendingNotJunkShortPaymentByScrollIdxConstMeta,
      argValues: [that, scrollIdx],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateFfiAppAppHandleGetPendingNotJunkShortPaymentByScrollIdxConstMeta =>
          const TaskConstMeta(
            debugName:
                "app_handle_get_pending_not_junk_short_payment_by_scroll_idx",
            argNames: ["that", "scrollIdx"],
          );

  @override
  ShortPaymentAndIndex? crateFfiAppAppHandleGetPendingShortPaymentByScrollIdx(
      {required AppHandle that, required int scrollIdx}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        sse_encode_CastedPrimitive_usize(scrollIdx, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_short_payment_and_index,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateFfiAppAppHandleGetPendingShortPaymentByScrollIdxConstMeta,
      argValues: [that, scrollIdx],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateFfiAppAppHandleGetPendingShortPaymentByScrollIdxConstMeta =>
          const TaskConstMeta(
            debugName: "app_handle_get_pending_short_payment_by_scroll_idx",
            argNames: ["that", "scrollIdx"],
          );

  @override
  ShortPaymentAndIndex? crateFfiAppAppHandleGetShortPaymentByScrollIdx(
      {required AppHandle that, required int scrollIdx}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        sse_encode_CastedPrimitive_usize(scrollIdx, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_short_payment_and_index,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiAppAppHandleGetShortPaymentByScrollIdxConstMeta,
      argValues: [that, scrollIdx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleGetShortPaymentByScrollIdxConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_get_short_payment_by_scroll_idx",
        argNames: ["that", "scrollIdx"],
      );

  @override
  Future<int?> crateFfiAppAppHandleGetVecIdxByPaymentIndex(
      {required AppHandle that, required PaymentIndex paymentIndex}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        sse_encode_box_autoadd_payment_index(paymentIndex, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_CastedPrimitive_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiAppAppHandleGetVecIdxByPaymentIndexConstMeta,
      argValues: [that, paymentIndex],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleGetVecIdxByPaymentIndexConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_get_vec_idx_by_payment_index",
        argNames: ["that", "paymentIndex"],
      );

  @override
  Future<ListChannelsResponse> crateFfiAppAppHandleListChannels(
      {required AppHandle that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_channels_response,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiAppAppHandleListChannelsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleListChannelsConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_list_channels",
        argNames: ["that"],
      );

  @override
  Future<AppHandle?> crateFfiAppAppHandleLoad({required Config config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_config(config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_app_handle,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiAppAppHandleLoadConstMeta,
      argValues: [config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleLoadConstMeta => const TaskConstMeta(
        debugName: "app_handle_load",
        argNames: ["config"],
      );

  @override
  Future<NodeInfo> crateFfiAppAppHandleNodeInfo({required AppHandle that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_node_info,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiAppAppHandleNodeInfoConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleNodeInfoConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_node_info",
        argNames: ["that"],
      );

  @override
  Future<OpenChannelResponse> crateFfiAppAppHandleOpenChannel(
      {required AppHandle that, required OpenChannelRequest req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        sse_encode_box_autoadd_open_channel_request(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_open_channel_response,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiAppAppHandleOpenChannelConstMeta,
      argValues: [that, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleOpenChannelConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_open_channel",
        argNames: ["that", "req"],
      );

  @override
  Future<PayInvoiceResponse> crateFfiAppAppHandlePayInvoice(
      {required AppHandle that, required PayInvoiceRequest req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        sse_encode_box_autoadd_pay_invoice_request(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_pay_invoice_response,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiAppAppHandlePayInvoiceConstMeta,
      argValues: [that, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandlePayInvoiceConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_pay_invoice",
        argNames: ["that", "req"],
      );

  @override
  Future<PayOnchainResponse> crateFfiAppAppHandlePayOnchain(
      {required AppHandle that, required PayOnchainRequest req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        sse_encode_box_autoadd_pay_onchain_request(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_pay_onchain_response,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiAppAppHandlePayOnchainConstMeta,
      argValues: [that, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandlePayOnchainConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_pay_onchain",
        argNames: ["that", "req"],
      );

  @override
  Future<PreflightCloseChannelResponse>
      crateFfiAppAppHandlePreflightCloseChannel(
          {required AppHandle that, required CloseChannelRequest req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        sse_encode_box_autoadd_close_channel_request(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_preflight_close_channel_response,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiAppAppHandlePreflightCloseChannelConstMeta,
      argValues: [that, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandlePreflightCloseChannelConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_preflight_close_channel",
        argNames: ["that", "req"],
      );

  @override
  Future<PreflightOpenChannelResponse> crateFfiAppAppHandlePreflightOpenChannel(
      {required AppHandle that, required PreflightOpenChannelRequest req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        sse_encode_box_autoadd_preflight_open_channel_request(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_preflight_open_channel_response,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiAppAppHandlePreflightOpenChannelConstMeta,
      argValues: [that, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandlePreflightOpenChannelConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_preflight_open_channel",
        argNames: ["that", "req"],
      );

  @override
  Future<PreflightPayInvoiceResponse> crateFfiAppAppHandlePreflightPayInvoice(
      {required AppHandle that, required PreflightPayInvoiceRequest req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        sse_encode_box_autoadd_preflight_pay_invoice_request(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_preflight_pay_invoice_response,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiAppAppHandlePreflightPayInvoiceConstMeta,
      argValues: [that, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandlePreflightPayInvoiceConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_preflight_pay_invoice",
        argNames: ["that", "req"],
      );

  @override
  Future<PreflightPayOnchainResponse> crateFfiAppAppHandlePreflightPayOnchain(
      {required AppHandle that, required PreflightPayOnchainRequest req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        sse_encode_box_autoadd_preflight_pay_onchain_request(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_preflight_pay_onchain_response,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiAppAppHandlePreflightPayOnchainConstMeta,
      argValues: [that, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandlePreflightPayOnchainConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_preflight_pay_onchain",
        argNames: ["that", "req"],
      );

  @override
  Future<AppHandle> crateFfiAppAppHandleRestore(
      {required Config config,
      required String googleAuthCode,
      required RootSeed rootSeed}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_config(config, serializer);
        sse_encode_String(googleAuthCode, serializer);
        sse_encode_box_autoadd_root_seed(rootSeed, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_app_handle,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiAppAppHandleRestoreConstMeta,
      argValues: [config, googleAuthCode, rootSeed],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleRestoreConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_restore",
        argNames: ["config", "googleAuthCode", "rootSeed"],
      );

  @override
  SettingsDb crateFfiAppAppHandleSettingsDb({required AppHandle that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_settings_db,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiAppAppHandleSettingsDbConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleSettingsDbConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_settings_db",
        argNames: ["that"],
      );

  @override
  Future<AppHandle> crateFfiAppAppHandleSignup(
      {required Config config,
      required String googleAuthCode,
      required String password,
      String? signupCode}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_config(config, serializer);
        sse_encode_String(googleAuthCode, serializer);
        sse_encode_String(password, serializer);
        sse_encode_opt_String(signupCode, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_app_handle,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiAppAppHandleSignupConstMeta,
      argValues: [config, googleAuthCode, password, signupCode],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleSignupConstMeta => const TaskConstMeta(
        debugName: "app_handle_signup",
        argNames: ["config", "googleAuthCode", "password", "signupCode"],
      );

  @override
  Future<bool> crateFfiAppAppHandleSyncPayments({required AppHandle that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiAppAppHandleSyncPaymentsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleSyncPaymentsConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_sync_payments",
        argNames: ["that"],
      );

  @override
  Future<void> crateFfiAppAppHandleUpdatePaymentNote(
      {required AppHandle that, required UpdatePaymentNote req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        sse_encode_box_autoadd_update_payment_note(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiAppAppHandleUpdatePaymentNoteConstMeta,
      argValues: [that, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleUpdatePaymentNoteConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_update_payment_note",
        argNames: ["that", "req"],
      );

  @override
  AppUserInfo crateFfiAppAppHandleUserInfo({required AppHandle that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_app_handle(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 33)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_app_user_info,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiAppAppHandleUserInfoConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiAppAppHandleUserInfoConstMeta =>
      const TaskConstMeta(
        debugName: "app_handle_user_info",
        argNames: ["that"],
      );

  @override
  ClientPaymentId crateFfiTypesClientPaymentIdGenNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 34)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_client_payment_id,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiTypesClientPaymentIdGenNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiTypesClientPaymentIdGenNewConstMeta =>
      const TaskConstMeta(
        debugName: "client_payment_id_gen_new",
        argNames: [],
      );

  @override
  void crateFfiDebugDeleteLatestProvisioned({required Config config}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_config(config, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 35)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiDebugDeleteLatestProvisionedConstMeta,
      argValues: [config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiDebugDeleteLatestProvisionedConstMeta =>
      const TaskConstMeta(
        debugName: "delete_latest_provisioned",
        argNames: ["config"],
      );

  @override
  void crateFfiDebugDeleteSecretStore({required Config config}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_config(config, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 36)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiDebugDeleteSecretStoreConstMeta,
      argValues: [config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiDebugDeleteSecretStoreConstMeta =>
      const TaskConstMeta(
        debugName: "delete_secret_store",
        argNames: ["config"],
      );

  @override
  DeployEnv crateFfiTypesDeployEnvFromStr({required String s}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 37)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_deploy_env,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiTypesDeployEnvFromStrConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiTypesDeployEnvFromStrConstMeta =>
      const TaskConstMeta(
        debugName: "deploy_env_from_str",
        argNames: ["s"],
      );

  @override
  GDriveRestoreClient crateFfiGdriveGDriveClientIntoRestoreClient(
      {required GDriveClient that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_g_drive_client(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 38)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_g_drive_restore_client,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiGdriveGDriveClientIntoRestoreClientConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiGdriveGDriveClientIntoRestoreClientConstMeta =>
      const TaskConstMeta(
        debugName: "g_drive_client_into_restore_client",
        argNames: ["that"],
      );

  @override
  String? crateFfiGdriveGDriveClientServerCode({required GDriveClient that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_g_drive_client(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 39)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiGdriveGDriveClientServerCodeConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiGdriveGDriveClientServerCodeConstMeta =>
      const TaskConstMeta(
        debugName: "g_drive_client_server_code",
        argNames: ["that"],
      );

  @override
  Future<GDriveClient> crateFfiGdriveGDriveOAuth2FlowExchange(
      {required GDriveOAuth2Flow that, required String resultUri}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_g_drive_o_auth_2_flow(that, serializer);
        sse_encode_String(resultUri, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 40, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_g_drive_client,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiGdriveGDriveOAuth2FlowExchangeConstMeta,
      argValues: [that, resultUri],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiGdriveGDriveOAuth2FlowExchangeConstMeta =>
      const TaskConstMeta(
        debugName: "g_drive_o_auth_2_flow_exchange",
        argNames: ["that", "resultUri"],
      );

  @override
  GDriveOAuth2Flow crateFfiGdriveGDriveOAuth2FlowInit(
      {required String clientId, required String serverClientId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(clientId, serializer);
        sse_encode_String(serverClientId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_g_drive_o_auth_2_flow,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiGdriveGDriveOAuth2FlowInitConstMeta,
      argValues: [clientId, serverClientId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiGdriveGDriveOAuth2FlowInitConstMeta =>
      const TaskConstMeta(
        debugName: "g_drive_o_auth_2_flow_init",
        argNames: ["clientId", "serverClientId"],
      );

  @override
  RootSeed crateFfiGdriveGDriveRestoreCandidateTryDecrypt(
      {required GDriveRestoreCandidate that, required String password}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_g_drive_restore_candidate(that, serializer);
        sse_encode_String(password, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_root_seed,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiGdriveGDriveRestoreCandidateTryDecryptConstMeta,
      argValues: [that, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiGdriveGDriveRestoreCandidateTryDecryptConstMeta =>
      const TaskConstMeta(
        debugName: "g_drive_restore_candidate_try_decrypt",
        argNames: ["that", "password"],
      );

  @override
  String crateFfiGdriveGDriveRestoreCandidateUserPk(
      {required GDriveRestoreCandidate that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_g_drive_restore_candidate(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiGdriveGDriveRestoreCandidateUserPkConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiGdriveGDriveRestoreCandidateUserPkConstMeta =>
      const TaskConstMeta(
        debugName: "g_drive_restore_candidate_user_pk",
        argNames: ["that"],
      );

  @override
  Future<List<GDriveRestoreCandidate>>
      crateFfiGdriveGDriveRestoreClientFindRestoreCandidates(
          {required GDriveRestoreClient that,
          required DeployEnv deployEnv,
          required Network network,
          required bool useSgx}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_g_drive_restore_client(that, serializer);
        sse_encode_deploy_env(deployEnv, serializer);
        sse_encode_network(network, serializer);
        sse_encode_bool(useSgx, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 44, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_g_drive_restore_candidate,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateFfiGdriveGDriveRestoreClientFindRestoreCandidatesConstMeta,
      argValues: [that, deployEnv, network, useSgx],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateFfiGdriveGDriveRestoreClientFindRestoreCandidatesConstMeta =>
          const TaskConstMeta(
            debugName: "g_drive_restore_client_find_restore_candidates",
            argNames: ["that", "deployEnv", "network", "useSgx"],
          );

  @override
  Stream<String> crateFfiLoggerInitRustLogStream({required String rustLog}) {
    final rustLogTx = RustStreamSink<String>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_String_Sse(rustLogTx, serializer);
        sse_encode_String(rustLog, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 45, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiLoggerInitRustLogStreamConstMeta,
      argValues: [rustLogTx, rustLog],
      apiImpl: this,
    )));
    return rustLogTx.stream;
  }

  TaskConstMeta get kCrateFfiLoggerInitRustLogStreamConstMeta =>
      const TaskConstMeta(
        debugName: "init_rust_log_stream",
        argNames: ["rustLogTx", "rustLog"],
      );

  @override
  Network crateFfiTypesNetworkFromStr({required String s}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 46)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_network,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiTypesNetworkFromStrConstMeta,
      argValues: [s],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiTypesNetworkFromStrConstMeta =>
      const TaskConstMeta(
        debugName: "network_from_str",
        argNames: ["s"],
      );

  @override
  Future<PaymentMethod> crateFfiPaymentUriResolveBest(
      {required Network network, required String uriStr}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_network(network, serializer);
        sse_encode_String(uriStr, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 47, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_payment_method,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiPaymentUriResolveBestConstMeta,
      argValues: [network, uriStr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiPaymentUriResolveBestConstMeta =>
      const TaskConstMeta(
        debugName: "resolve_best",
        argNames: ["network", "uriStr"],
      );

  @override
  Settings crateFfiSettingsSettingsDbRead({required SettingsDb that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_settings_db(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 48)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_settings,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiSettingsSettingsDbReadConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiSettingsSettingsDbReadConstMeta =>
      const TaskConstMeta(
        debugName: "settings_db_read",
        argNames: ["that"],
      );

  @override
  void crateFfiSettingsSettingsDbReset({required SettingsDb that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_settings_db(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 49)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiSettingsSettingsDbResetConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiSettingsSettingsDbResetConstMeta =>
      const TaskConstMeta(
        debugName: "settings_db_reset",
        argNames: ["that"],
      );

  @override
  void crateFfiSettingsSettingsDbUpdate(
      {required SettingsDb that, required Settings update}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_settings_db(that, serializer);
        sse_encode_box_autoadd_settings(update, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 50)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiSettingsSettingsDbUpdateConstMeta,
      argValues: [that, update],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiSettingsSettingsDbUpdateConstMeta =>
      const TaskConstMeta(
        debugName: "settings_db_update",
        argNames: ["that", "update"],
      );

  @override
  Future<void> crateFfiDebugUnconditionalError() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 51, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateFfiDebugUnconditionalErrorConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiDebugUnconditionalErrorConstMeta =>
      const TaskConstMeta(
        debugName: "unconditional_error",
        argNames: [],
      );

  @override
  Future<void> crateFfiDebugUnconditionalPanic() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 52, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiDebugUnconditionalPanicConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiDebugUnconditionalPanicConstMeta =>
      const TaskConstMeta(
        debugName: "unconditional_panic",
        argNames: [],
      );

  @override
  UserChannelId crateFfiTypesUserChannelIdGenNew() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 53)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_user_channel_id,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiTypesUserChannelIdGenNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiTypesUserChannelIdGenNewConstMeta =>
      const TaskConstMeta(
        debugName: "user_channel_id_gen_new",
        argNames: [],
      );

  @override
  String? crateFfiFormValidatePassword({required String password}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(password, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 54)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateFfiFormValidatePasswordConstMeta,
      argValues: [password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFfiFormValidatePasswordConstMeta =>
      const TaskConstMeta(
        debugName: "validate_password",
        argNames: ["password"],
      );

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_App =>
      wire.rust_arc_increment_strong_count_RustOpaque_App;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_App =>
      wire.rust_arc_decrement_strong_count_RustOpaque_App;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_GDriveClientInner =>
          wire.rust_arc_increment_strong_count_RustOpaque_GDriveClientInner;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_GDriveClientInner =>
          wire.rust_arc_decrement_strong_count_RustOpaque_GDriveClientInner;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_GDriveRestoreCandidateRs => wire
          .rust_arc_increment_strong_count_RustOpaque_GDriveRestoreCandidateRs;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_GDriveRestoreCandidateRs => wire
          .rust_arc_decrement_strong_count_RustOpaque_GDriveRestoreCandidateRs;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_GDriveRestoreClientRs =>
          wire.rust_arc_increment_strong_count_RustOpaque_GDriveRestoreClientRs;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_GDriveRestoreClientRs =>
          wire.rust_arc_decrement_strong_count_RustOpaque_GDriveRestoreClientRs;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RootSeedRs =>
          wire.rust_arc_increment_strong_count_RustOpaque_RootSeedRs;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RootSeedRs =>
          wire.rust_arc_decrement_strong_count_RustOpaque_RootSeedRs;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SettingsDbRs =>
          wire.rust_arc_increment_strong_count_RustOpaque_SettingsDbRs;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SettingsDbRs =>
          wire.rust_arc_decrement_strong_count_RustOpaque_SettingsDbRs;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  int dco_decode_CastedPrimitive_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  int dco_decode_CastedPrimitive_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  int dco_decode_CastedPrimitive_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  App dco_decode_RustOpaque_App(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AppImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  GDriveClientInner dco_decode_RustOpaque_GDriveClientInner(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GDriveClientInnerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  GDriveRestoreCandidateRs dco_decode_RustOpaque_GDriveRestoreCandidateRs(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GDriveRestoreCandidateRsImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  GDriveRestoreClientRs dco_decode_RustOpaque_GDriveRestoreClientRs(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GDriveRestoreClientRsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RootSeedRs dco_decode_RustOpaque_RootSeedRs(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RootSeedRsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SettingsDbRs dco_decode_RustOpaque_SettingsDbRs(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SettingsDbRsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<String> dco_decode_StreamSink_String_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AppHandle dco_decode_app_handle(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return AppHandle(
      inner: dco_decode_RustOpaque_App(arr[0]),
    );
  }

  @protected
  AppUserInfo dco_decode_app_user_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return AppUserInfo(
      userPk: dco_decode_String(arr[0]),
      nodePk: dco_decode_String(arr[1]),
      nodePkProof: dco_decode_String(arr[2]),
    );
  }

  @protected
  Balance dco_decode_balance(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Balance(
      totalSats: dco_decode_CastedPrimitive_u_64(arr[0]),
      onchainSats: dco_decode_CastedPrimitive_u_64(arr[1]),
      lightningSats: dco_decode_CastedPrimitive_u_64(arr[2]),
      lightningSendableSats: dco_decode_CastedPrimitive_u_64(arr[3]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  AppHandle dco_decode_box_autoadd_app_handle(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_app_handle(raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CloseChannelRequest dco_decode_box_autoadd_close_channel_request(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_close_channel_request(raw);
  }

  @protected
  Config dco_decode_box_autoadd_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_config(raw);
  }

  @protected
  CreateInvoiceRequest dco_decode_box_autoadd_create_invoice_request(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_create_invoice_request(raw);
  }

  @protected
  FeeEstimate dco_decode_box_autoadd_fee_estimate(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_fee_estimate(raw);
  }

  @protected
  GDriveClient dco_decode_box_autoadd_g_drive_client(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_g_drive_client(raw);
  }

  @protected
  GDriveOAuth2Flow dco_decode_box_autoadd_g_drive_o_auth_2_flow(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_g_drive_o_auth_2_flow(raw);
  }

  @protected
  GDriveRestoreCandidate dco_decode_box_autoadd_g_drive_restore_candidate(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_g_drive_restore_candidate(raw);
  }

  @protected
  GDriveRestoreClient dco_decode_box_autoadd_g_drive_restore_client(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_g_drive_restore_client(raw);
  }

  @protected
  Invoice dco_decode_box_autoadd_invoice(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_invoice(raw);
  }

  @protected
  Onchain dco_decode_box_autoadd_onchain(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_onchain(raw);
  }

  @protected
  OpenChannelRequest dco_decode_box_autoadd_open_channel_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_open_channel_request(raw);
  }

  @protected
  PayInvoiceRequest dco_decode_box_autoadd_pay_invoice_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_pay_invoice_request(raw);
  }

  @protected
  PayOnchainRequest dco_decode_box_autoadd_pay_onchain_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_pay_onchain_request(raw);
  }

  @protected
  Payment dco_decode_box_autoadd_payment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_payment(raw);
  }

  @protected
  PaymentIndex dco_decode_box_autoadd_payment_index(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_payment_index(raw);
  }

  @protected
  PreflightOpenChannelRequest
      dco_decode_box_autoadd_preflight_open_channel_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_preflight_open_channel_request(raw);
  }

  @protected
  PreflightPayInvoiceRequest
      dco_decode_box_autoadd_preflight_pay_invoice_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_preflight_pay_invoice_request(raw);
  }

  @protected
  PreflightPayOnchainRequest
      dco_decode_box_autoadd_preflight_pay_onchain_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_preflight_pay_onchain_request(raw);
  }

  @protected
  RootSeed dco_decode_box_autoadd_root_seed(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_root_seed(raw);
  }

  @protected
  Settings dco_decode_box_autoadd_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_settings(raw);
  }

  @protected
  SettingsDb dco_decode_box_autoadd_settings_db(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_settings_db(raw);
  }

  @protected
  ShortPaymentAndIndex dco_decode_box_autoadd_short_payment_and_index(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_short_payment_and_index(raw);
  }

  @protected
  UpdatePaymentNote dco_decode_box_autoadd_update_payment_note(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_update_payment_note(raw);
  }

  @protected
  ClientPaymentId dco_decode_client_payment_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ClientPaymentId(
      id: dco_decode_u_8_array_32(arr[0]),
    );
  }

  @protected
  CloseChannelRequest dco_decode_close_channel_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CloseChannelRequest(
      channelId: dco_decode_String(arr[0]),
    );
  }

  @protected
  Config dco_decode_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return Config(
      deployEnv: dco_decode_deploy_env(arr[0]),
      network: dco_decode_network(arr[1]),
      gatewayUrl: dco_decode_String(arr[2]),
      useSgx: dco_decode_bool(arr[3]),
      baseAppDataDir: dco_decode_String(arr[4]),
      useMockSecretStore: dco_decode_bool(arr[5]),
      userAgent: dco_decode_String(arr[6]),
    );
  }

  @protected
  ConfirmationPriority dco_decode_confirmation_priority(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ConfirmationPriority.values[raw as int];
  }

  @protected
  CreateInvoiceRequest dco_decode_create_invoice_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return CreateInvoiceRequest(
      expirySecs: dco_decode_u_32(arr[0]),
      amountSats: dco_decode_opt_CastedPrimitive_u_64(arr[1]),
      description: dco_decode_opt_String(arr[2]),
    );
  }

  @protected
  CreateInvoiceResponse dco_decode_create_invoice_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CreateInvoiceResponse(
      invoice: dco_decode_invoice(arr[0]),
    );
  }

  @protected
  DeployEnv dco_decode_deploy_env(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DeployEnv.values[raw as int];
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FeeEstimate dco_decode_fee_estimate(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FeeEstimate(
      amountSats: dco_decode_CastedPrimitive_u_64(arr[0]),
    );
  }

  @protected
  FiatRate dco_decode_fiat_rate(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FiatRate(
      fiat: dco_decode_String(arr[0]),
      rate: dco_decode_f_64(arr[1]),
    );
  }

  @protected
  FiatRates dco_decode_fiat_rates(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FiatRates(
      timestampMs: dco_decode_CastedPrimitive_i_64(arr[0]),
      rates: dco_decode_list_fiat_rate(arr[1]),
    );
  }

  @protected
  GDriveClient dco_decode_g_drive_client(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return GDriveClient(
      inner: dco_decode_RustOpaque_GDriveClientInner(arr[0]),
    );
  }

  @protected
  GDriveOAuth2Flow dco_decode_g_drive_o_auth_2_flow(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return GDriveOAuth2Flow(
      clientId: dco_decode_String(arr[0]),
      codeVerifier: dco_decode_String(arr[1]),
      redirectUri: dco_decode_String(arr[2]),
      redirectUriScheme: dco_decode_String(arr[3]),
      url: dco_decode_String(arr[4]),
    );
  }

  @protected
  GDriveRestoreCandidate dco_decode_g_drive_restore_candidate(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return GDriveRestoreCandidate(
      inner: dco_decode_RustOpaque_GDriveRestoreCandidateRs(arr[0]),
    );
  }

  @protected
  GDriveRestoreClient dco_decode_g_drive_restore_client(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return GDriveRestoreClient(
      inner: dco_decode_RustOpaque_GDriveRestoreClientRs(arr[0]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  Invoice dco_decode_invoice(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Invoice(
      string: dco_decode_String(arr[0]),
      description: dco_decode_opt_String(arr[1]),
      createdAt: dco_decode_CastedPrimitive_i_64(arr[2]),
      expiresAt: dco_decode_CastedPrimitive_i_64(arr[3]),
      amountSats: dco_decode_opt_CastedPrimitive_u_64(arr[4]),
      payeePubkey: dco_decode_String(arr[5]),
    );
  }

  @protected
  ListChannelsResponse dco_decode_list_channels_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ListChannelsResponse(
      channels: dco_decode_list_lx_channel_details(arr[0]),
    );
  }

  @protected
  List<FiatRate> dco_decode_list_fiat_rate(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_fiat_rate).toList();
  }

  @protected
  List<GDriveRestoreCandidate> dco_decode_list_g_drive_restore_candidate(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_g_drive_restore_candidate)
        .toList();
  }

  @protected
  List<LxChannelDetails> dco_decode_list_lx_channel_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_lx_channel_details).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  LxChannelDetails dco_decode_lx_channel_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return LxChannelDetails(
      channelId: dco_decode_String(arr[0]),
      counterpartyNodeId: dco_decode_String(arr[1]),
      channelValueSats: dco_decode_CastedPrimitive_u_64(arr[2]),
      isUsable: dco_decode_bool(arr[3]),
      ourBalanceSats: dco_decode_CastedPrimitive_u_64(arr[4]),
      outboundCapacitySats: dco_decode_CastedPrimitive_u_64(arr[5]),
      nextOutboundHtlcLimitSats: dco_decode_CastedPrimitive_u_64(arr[6]),
      theirBalanceSats: dco_decode_CastedPrimitive_u_64(arr[7]),
      inboundCapacitySats: dco_decode_CastedPrimitive_u_64(arr[8]),
    );
  }

  @protected
  Network dco_decode_network(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Network.values[raw as int];
  }

  @protected
  NodeInfo dco_decode_node_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return NodeInfo(
      nodePk: dco_decode_String(arr[0]),
      version: dco_decode_String(arr[1]),
      measurement: dco_decode_String(arr[2]),
      balance: dco_decode_balance(arr[3]),
    );
  }

  @protected
  Onchain dco_decode_onchain(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Onchain(
      address: dco_decode_String(arr[0]),
      amountSats: dco_decode_opt_CastedPrimitive_u_64(arr[1]),
      label: dco_decode_opt_String(arr[2]),
      message: dco_decode_opt_String(arr[3]),
    );
  }

  @protected
  OpenChannelRequest dco_decode_open_channel_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OpenChannelRequest(
      userChannelId: dco_decode_user_channel_id(arr[0]),
      valueSats: dco_decode_CastedPrimitive_u_64(arr[1]),
    );
  }

  @protected
  OpenChannelResponse dco_decode_open_channel_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return OpenChannelResponse(
      channelId: dco_decode_String(arr[0]),
    );
  }

  @protected
  int? dco_decode_opt_CastedPrimitive_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_CastedPrimitive_i_64(raw);
  }

  @protected
  int? dco_decode_opt_CastedPrimitive_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_CastedPrimitive_u_64(raw);
  }

  @protected
  int? dco_decode_opt_CastedPrimitive_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_CastedPrimitive_usize(raw);
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  AppHandle? dco_decode_opt_box_autoadd_app_handle(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_app_handle(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  FeeEstimate? dco_decode_opt_box_autoadd_fee_estimate(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_fee_estimate(raw);
  }

  @protected
  Invoice? dco_decode_opt_box_autoadd_invoice(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_invoice(raw);
  }

  @protected
  Payment? dco_decode_opt_box_autoadd_payment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_payment(raw);
  }

  @protected
  ShortPaymentAndIndex? dco_decode_opt_box_autoadd_short_payment_and_index(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_short_payment_and_index(raw);
  }

  @protected
  PayInvoiceRequest dco_decode_pay_invoice_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return PayInvoiceRequest(
      invoice: dco_decode_String(arr[0]),
      fallbackAmountSats: dco_decode_opt_CastedPrimitive_u_64(arr[1]),
      note: dco_decode_opt_String(arr[2]),
    );
  }

  @protected
  PayInvoiceResponse dco_decode_pay_invoice_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PayInvoiceResponse(
      index: dco_decode_payment_index(arr[0]),
    );
  }

  @protected
  PayOnchainRequest dco_decode_pay_onchain_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return PayOnchainRequest(
      cid: dco_decode_client_payment_id(arr[0]),
      address: dco_decode_String(arr[1]),
      amountSats: dco_decode_CastedPrimitive_u_64(arr[2]),
      priority: dco_decode_confirmation_priority(arr[3]),
      note: dco_decode_opt_String(arr[4]),
    );
  }

  @protected
  PayOnchainResponse dco_decode_pay_onchain_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PayOnchainResponse(
      index: dco_decode_payment_index(arr[0]),
      txid: dco_decode_String(arr[1]),
    );
  }

  @protected
  Payment dco_decode_payment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return Payment(
      index: dco_decode_payment_index(arr[0]),
      kind: dco_decode_payment_kind(arr[1]),
      direction: dco_decode_payment_direction(arr[2]),
      invoice: dco_decode_opt_box_autoadd_invoice(arr[3]),
      txid: dco_decode_opt_String(arr[4]),
      replacement: dco_decode_opt_String(arr[5]),
      amountSat: dco_decode_opt_CastedPrimitive_u_64(arr[6]),
      feesSat: dco_decode_CastedPrimitive_u_64(arr[7]),
      status: dco_decode_payment_status(arr[8]),
      statusStr: dco_decode_String(arr[9]),
      note: dco_decode_opt_String(arr[10]),
      createdAt: dco_decode_CastedPrimitive_i_64(arr[11]),
      finalizedAt: dco_decode_opt_CastedPrimitive_i_64(arr[12]),
    );
  }

  @protected
  PaymentDirection dco_decode_payment_direction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PaymentDirection.values[raw as int];
  }

  @protected
  PaymentIndex dco_decode_payment_index(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PaymentIndex(
      field0: dco_decode_String(arr[0]),
    );
  }

  @protected
  PaymentKind dco_decode_payment_kind(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PaymentKind.values[raw as int];
  }

  @protected
  PaymentMethod dco_decode_payment_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return PaymentMethod_Onchain(
          dco_decode_box_autoadd_onchain(raw[1]),
        );
      case 1:
        return PaymentMethod_Invoice(
          dco_decode_box_autoadd_invoice(raw[1]),
        );
      case 2:
        return PaymentMethod_Offer();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  PaymentStatus dco_decode_payment_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PaymentStatus.values[raw as int];
  }

  @protected
  PreflightCloseChannelResponse dco_decode_preflight_close_channel_response(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PreflightCloseChannelResponse(
      feeEstimateSats: dco_decode_CastedPrimitive_u_64(arr[0]),
    );
  }

  @protected
  PreflightOpenChannelRequest dco_decode_preflight_open_channel_request(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PreflightOpenChannelRequest(
      valueSats: dco_decode_CastedPrimitive_u_64(arr[0]),
    );
  }

  @protected
  PreflightOpenChannelResponse dco_decode_preflight_open_channel_response(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PreflightOpenChannelResponse(
      feeEstimateSats: dco_decode_CastedPrimitive_u_64(arr[0]),
    );
  }

  @protected
  PreflightPayInvoiceRequest dco_decode_preflight_pay_invoice_request(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PreflightPayInvoiceRequest(
      invoice: dco_decode_String(arr[0]),
      fallbackAmountSats: dco_decode_opt_CastedPrimitive_u_64(arr[1]),
    );
  }

  @protected
  PreflightPayInvoiceResponse dco_decode_preflight_pay_invoice_response(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PreflightPayInvoiceResponse(
      amountSats: dco_decode_CastedPrimitive_u_64(arr[0]),
      feesSats: dco_decode_CastedPrimitive_u_64(arr[1]),
    );
  }

  @protected
  PreflightPayOnchainRequest dco_decode_preflight_pay_onchain_request(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PreflightPayOnchainRequest(
      address: dco_decode_String(arr[0]),
      amountSats: dco_decode_CastedPrimitive_u_64(arr[1]),
    );
  }

  @protected
  PreflightPayOnchainResponse dco_decode_preflight_pay_onchain_response(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return PreflightPayOnchainResponse(
      high: dco_decode_opt_box_autoadd_fee_estimate(arr[0]),
      normal: dco_decode_fee_estimate(arr[1]),
      background: dco_decode_fee_estimate(arr[2]),
    );
  }

  @protected
  RootSeed dco_decode_root_seed(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RootSeed(
      inner: dco_decode_RustOpaque_RootSeedRs(arr[0]),
    );
  }

  @protected
  Settings dco_decode_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Settings(
      locale: dco_decode_opt_String(arr[0]),
      fiatCurrency: dco_decode_opt_String(arr[1]),
      showSplitBalances: dco_decode_opt_box_autoadd_bool(arr[2]),
    );
  }

  @protected
  SettingsDb dco_decode_settings_db(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SettingsDb(
      inner: dco_decode_RustOpaque_SettingsDbRs(arr[0]),
    );
  }

  @protected
  ShortPayment dco_decode_short_payment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return ShortPayment(
      index: dco_decode_payment_index(arr[0]),
      kind: dco_decode_payment_kind(arr[1]),
      direction: dco_decode_payment_direction(arr[2]),
      amountSat: dco_decode_opt_CastedPrimitive_u_64(arr[3]),
      status: dco_decode_payment_status(arr[4]),
      note: dco_decode_opt_String(arr[5]),
      createdAt: dco_decode_CastedPrimitive_i_64(arr[6]),
    );
  }

  @protected
  ShortPaymentAndIndex dco_decode_short_payment_and_index(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ShortPaymentAndIndex(
      vecIdx: dco_decode_CastedPrimitive_usize(arr[0]),
      payment: dco_decode_short_payment(arr[1]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  U8Array16 dco_decode_u_8_array_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array16(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  U8Array32 dco_decode_u_8_array_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array32(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  UpdatePaymentNote dco_decode_update_payment_note(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return UpdatePaymentNote(
      index: dco_decode_payment_index(arr[0]),
      note: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  UserChannelId dco_decode_user_channel_id(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return UserChannelId(
      id: dco_decode_u_8_array_16(arr[0]),
    );
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  int sse_decode_CastedPrimitive_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_64(deserializer);
    return inner.toInt();
  }

  @protected
  int sse_decode_CastedPrimitive_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_u_64(deserializer);
    return inner.toInt();
  }

  @protected
  int sse_decode_CastedPrimitive_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return inner.toInt();
  }

  @protected
  App sse_decode_RustOpaque_App(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AppImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  GDriveClientInner sse_decode_RustOpaque_GDriveClientInner(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GDriveClientInnerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  GDriveRestoreCandidateRs sse_decode_RustOpaque_GDriveRestoreCandidateRs(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GDriveRestoreCandidateRsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  GDriveRestoreClientRs sse_decode_RustOpaque_GDriveRestoreClientRs(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GDriveRestoreClientRsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RootSeedRs sse_decode_RustOpaque_RootSeedRs(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RootSeedRsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SettingsDbRs sse_decode_RustOpaque_SettingsDbRs(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SettingsDbRsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<String> sse_decode_StreamSink_String_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AppHandle sse_decode_app_handle(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inner = sse_decode_RustOpaque_App(deserializer);
    return AppHandle(inner: var_inner);
  }

  @protected
  AppUserInfo sse_decode_app_user_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_userPk = sse_decode_String(deserializer);
    var var_nodePk = sse_decode_String(deserializer);
    var var_nodePkProof = sse_decode_String(deserializer);
    return AppUserInfo(
        userPk: var_userPk, nodePk: var_nodePk, nodePkProof: var_nodePkProof);
  }

  @protected
  Balance sse_decode_balance(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_totalSats = sse_decode_CastedPrimitive_u_64(deserializer);
    var var_onchainSats = sse_decode_CastedPrimitive_u_64(deserializer);
    var var_lightningSats = sse_decode_CastedPrimitive_u_64(deserializer);
    var var_lightningSendableSats =
        sse_decode_CastedPrimitive_u_64(deserializer);
    return Balance(
        totalSats: var_totalSats,
        onchainSats: var_onchainSats,
        lightningSats: var_lightningSats,
        lightningSendableSats: var_lightningSendableSats);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  AppHandle sse_decode_box_autoadd_app_handle(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_app_handle(deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  CloseChannelRequest sse_decode_box_autoadd_close_channel_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_close_channel_request(deserializer));
  }

  @protected
  Config sse_decode_box_autoadd_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_config(deserializer));
  }

  @protected
  CreateInvoiceRequest sse_decode_box_autoadd_create_invoice_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_create_invoice_request(deserializer));
  }

  @protected
  FeeEstimate sse_decode_box_autoadd_fee_estimate(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_fee_estimate(deserializer));
  }

  @protected
  GDriveClient sse_decode_box_autoadd_g_drive_client(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_g_drive_client(deserializer));
  }

  @protected
  GDriveOAuth2Flow sse_decode_box_autoadd_g_drive_o_auth_2_flow(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_g_drive_o_auth_2_flow(deserializer));
  }

  @protected
  GDriveRestoreCandidate sse_decode_box_autoadd_g_drive_restore_candidate(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_g_drive_restore_candidate(deserializer));
  }

  @protected
  GDriveRestoreClient sse_decode_box_autoadd_g_drive_restore_client(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_g_drive_restore_client(deserializer));
  }

  @protected
  Invoice sse_decode_box_autoadd_invoice(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_invoice(deserializer));
  }

  @protected
  Onchain sse_decode_box_autoadd_onchain(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_onchain(deserializer));
  }

  @protected
  OpenChannelRequest sse_decode_box_autoadd_open_channel_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_open_channel_request(deserializer));
  }

  @protected
  PayInvoiceRequest sse_decode_box_autoadd_pay_invoice_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_pay_invoice_request(deserializer));
  }

  @protected
  PayOnchainRequest sse_decode_box_autoadd_pay_onchain_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_pay_onchain_request(deserializer));
  }

  @protected
  Payment sse_decode_box_autoadd_payment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_payment(deserializer));
  }

  @protected
  PaymentIndex sse_decode_box_autoadd_payment_index(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_payment_index(deserializer));
  }

  @protected
  PreflightOpenChannelRequest
      sse_decode_box_autoadd_preflight_open_channel_request(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_preflight_open_channel_request(deserializer));
  }

  @protected
  PreflightPayInvoiceRequest
      sse_decode_box_autoadd_preflight_pay_invoice_request(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_preflight_pay_invoice_request(deserializer));
  }

  @protected
  PreflightPayOnchainRequest
      sse_decode_box_autoadd_preflight_pay_onchain_request(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_preflight_pay_onchain_request(deserializer));
  }

  @protected
  RootSeed sse_decode_box_autoadd_root_seed(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_root_seed(deserializer));
  }

  @protected
  Settings sse_decode_box_autoadd_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_settings(deserializer));
  }

  @protected
  SettingsDb sse_decode_box_autoadd_settings_db(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_settings_db(deserializer));
  }

  @protected
  ShortPaymentAndIndex sse_decode_box_autoadd_short_payment_and_index(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_short_payment_and_index(deserializer));
  }

  @protected
  UpdatePaymentNote sse_decode_box_autoadd_update_payment_note(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_update_payment_note(deserializer));
  }

  @protected
  ClientPaymentId sse_decode_client_payment_id(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_8_array_32(deserializer);
    return ClientPaymentId(id: var_id);
  }

  @protected
  CloseChannelRequest sse_decode_close_channel_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_channelId = sse_decode_String(deserializer);
    return CloseChannelRequest(channelId: var_channelId);
  }

  @protected
  Config sse_decode_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_deployEnv = sse_decode_deploy_env(deserializer);
    var var_network = sse_decode_network(deserializer);
    var var_gatewayUrl = sse_decode_String(deserializer);
    var var_useSgx = sse_decode_bool(deserializer);
    var var_baseAppDataDir = sse_decode_String(deserializer);
    var var_useMockSecretStore = sse_decode_bool(deserializer);
    var var_userAgent = sse_decode_String(deserializer);
    return Config(
        deployEnv: var_deployEnv,
        network: var_network,
        gatewayUrl: var_gatewayUrl,
        useSgx: var_useSgx,
        baseAppDataDir: var_baseAppDataDir,
        useMockSecretStore: var_useMockSecretStore,
        userAgent: var_userAgent);
  }

  @protected
  ConfirmationPriority sse_decode_confirmation_priority(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ConfirmationPriority.values[inner];
  }

  @protected
  CreateInvoiceRequest sse_decode_create_invoice_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_expirySecs = sse_decode_u_32(deserializer);
    var var_amountSats = sse_decode_opt_CastedPrimitive_u_64(deserializer);
    var var_description = sse_decode_opt_String(deserializer);
    return CreateInvoiceRequest(
        expirySecs: var_expirySecs,
        amountSats: var_amountSats,
        description: var_description);
  }

  @protected
  CreateInvoiceResponse sse_decode_create_invoice_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_invoice = sse_decode_invoice(deserializer);
    return CreateInvoiceResponse(invoice: var_invoice);
  }

  @protected
  DeployEnv sse_decode_deploy_env(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return DeployEnv.values[inner];
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  FeeEstimate sse_decode_fee_estimate(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_amountSats = sse_decode_CastedPrimitive_u_64(deserializer);
    return FeeEstimate(amountSats: var_amountSats);
  }

  @protected
  FiatRate sse_decode_fiat_rate(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_fiat = sse_decode_String(deserializer);
    var var_rate = sse_decode_f_64(deserializer);
    return FiatRate(fiat: var_fiat, rate: var_rate);
  }

  @protected
  FiatRates sse_decode_fiat_rates(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_timestampMs = sse_decode_CastedPrimitive_i_64(deserializer);
    var var_rates = sse_decode_list_fiat_rate(deserializer);
    return FiatRates(timestampMs: var_timestampMs, rates: var_rates);
  }

  @protected
  GDriveClient sse_decode_g_drive_client(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inner = sse_decode_RustOpaque_GDriveClientInner(deserializer);
    return GDriveClient(inner: var_inner);
  }

  @protected
  GDriveOAuth2Flow sse_decode_g_drive_o_auth_2_flow(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_clientId = sse_decode_String(deserializer);
    var var_codeVerifier = sse_decode_String(deserializer);
    var var_redirectUri = sse_decode_String(deserializer);
    var var_redirectUriScheme = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    return GDriveOAuth2Flow(
        clientId: var_clientId,
        codeVerifier: var_codeVerifier,
        redirectUri: var_redirectUri,
        redirectUriScheme: var_redirectUriScheme,
        url: var_url);
  }

  @protected
  GDriveRestoreCandidate sse_decode_g_drive_restore_candidate(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inner =
        sse_decode_RustOpaque_GDriveRestoreCandidateRs(deserializer);
    return GDriveRestoreCandidate(inner: var_inner);
  }

  @protected
  GDriveRestoreClient sse_decode_g_drive_restore_client(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inner = sse_decode_RustOpaque_GDriveRestoreClientRs(deserializer);
    return GDriveRestoreClient(inner: var_inner);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  Invoice sse_decode_invoice(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_string = sse_decode_String(deserializer);
    var var_description = sse_decode_opt_String(deserializer);
    var var_createdAt = sse_decode_CastedPrimitive_i_64(deserializer);
    var var_expiresAt = sse_decode_CastedPrimitive_i_64(deserializer);
    var var_amountSats = sse_decode_opt_CastedPrimitive_u_64(deserializer);
    var var_payeePubkey = sse_decode_String(deserializer);
    return Invoice(
        string: var_string,
        description: var_description,
        createdAt: var_createdAt,
        expiresAt: var_expiresAt,
        amountSats: var_amountSats,
        payeePubkey: var_payeePubkey);
  }

  @protected
  ListChannelsResponse sse_decode_list_channels_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_channels = sse_decode_list_lx_channel_details(deserializer);
    return ListChannelsResponse(channels: var_channels);
  }

  @protected
  List<FiatRate> sse_decode_list_fiat_rate(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FiatRate>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_fiat_rate(deserializer));
    }
    return ans_;
  }

  @protected
  List<GDriveRestoreCandidate> sse_decode_list_g_drive_restore_candidate(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <GDriveRestoreCandidate>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_g_drive_restore_candidate(deserializer));
    }
    return ans_;
  }

  @protected
  List<LxChannelDetails> sse_decode_list_lx_channel_details(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <LxChannelDetails>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_lx_channel_details(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  LxChannelDetails sse_decode_lx_channel_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_channelId = sse_decode_String(deserializer);
    var var_counterpartyNodeId = sse_decode_String(deserializer);
    var var_channelValueSats = sse_decode_CastedPrimitive_u_64(deserializer);
    var var_isUsable = sse_decode_bool(deserializer);
    var var_ourBalanceSats = sse_decode_CastedPrimitive_u_64(deserializer);
    var var_outboundCapacitySats =
        sse_decode_CastedPrimitive_u_64(deserializer);
    var var_nextOutboundHtlcLimitSats =
        sse_decode_CastedPrimitive_u_64(deserializer);
    var var_theirBalanceSats = sse_decode_CastedPrimitive_u_64(deserializer);
    var var_inboundCapacitySats = sse_decode_CastedPrimitive_u_64(deserializer);
    return LxChannelDetails(
        channelId: var_channelId,
        counterpartyNodeId: var_counterpartyNodeId,
        channelValueSats: var_channelValueSats,
        isUsable: var_isUsable,
        ourBalanceSats: var_ourBalanceSats,
        outboundCapacitySats: var_outboundCapacitySats,
        nextOutboundHtlcLimitSats: var_nextOutboundHtlcLimitSats,
        theirBalanceSats: var_theirBalanceSats,
        inboundCapacitySats: var_inboundCapacitySats);
  }

  @protected
  Network sse_decode_network(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Network.values[inner];
  }

  @protected
  NodeInfo sse_decode_node_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_nodePk = sse_decode_String(deserializer);
    var var_version = sse_decode_String(deserializer);
    var var_measurement = sse_decode_String(deserializer);
    var var_balance = sse_decode_balance(deserializer);
    return NodeInfo(
        nodePk: var_nodePk,
        version: var_version,
        measurement: var_measurement,
        balance: var_balance);
  }

  @protected
  Onchain sse_decode_onchain(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_String(deserializer);
    var var_amountSats = sse_decode_opt_CastedPrimitive_u_64(deserializer);
    var var_label = sse_decode_opt_String(deserializer);
    var var_message = sse_decode_opt_String(deserializer);
    return Onchain(
        address: var_address,
        amountSats: var_amountSats,
        label: var_label,
        message: var_message);
  }

  @protected
  OpenChannelRequest sse_decode_open_channel_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_userChannelId = sse_decode_user_channel_id(deserializer);
    var var_valueSats = sse_decode_CastedPrimitive_u_64(deserializer);
    return OpenChannelRequest(
        userChannelId: var_userChannelId, valueSats: var_valueSats);
  }

  @protected
  OpenChannelResponse sse_decode_open_channel_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_channelId = sse_decode_String(deserializer);
    return OpenChannelResponse(channelId: var_channelId);
  }

  @protected
  int? sse_decode_opt_CastedPrimitive_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_CastedPrimitive_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_CastedPrimitive_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_CastedPrimitive_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_CastedPrimitive_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_CastedPrimitive_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  AppHandle? sse_decode_opt_box_autoadd_app_handle(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_app_handle(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  FeeEstimate? sse_decode_opt_box_autoadd_fee_estimate(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_fee_estimate(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Invoice? sse_decode_opt_box_autoadd_invoice(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_invoice(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Payment? sse_decode_opt_box_autoadd_payment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_payment(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ShortPaymentAndIndex? sse_decode_opt_box_autoadd_short_payment_and_index(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_short_payment_and_index(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PayInvoiceRequest sse_decode_pay_invoice_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_invoice = sse_decode_String(deserializer);
    var var_fallbackAmountSats =
        sse_decode_opt_CastedPrimitive_u_64(deserializer);
    var var_note = sse_decode_opt_String(deserializer);
    return PayInvoiceRequest(
        invoice: var_invoice,
        fallbackAmountSats: var_fallbackAmountSats,
        note: var_note);
  }

  @protected
  PayInvoiceResponse sse_decode_pay_invoice_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_index = sse_decode_payment_index(deserializer);
    return PayInvoiceResponse(index: var_index);
  }

  @protected
  PayOnchainRequest sse_decode_pay_onchain_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_cid = sse_decode_client_payment_id(deserializer);
    var var_address = sse_decode_String(deserializer);
    var var_amountSats = sse_decode_CastedPrimitive_u_64(deserializer);
    var var_priority = sse_decode_confirmation_priority(deserializer);
    var var_note = sse_decode_opt_String(deserializer);
    return PayOnchainRequest(
        cid: var_cid,
        address: var_address,
        amountSats: var_amountSats,
        priority: var_priority,
        note: var_note);
  }

  @protected
  PayOnchainResponse sse_decode_pay_onchain_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_index = sse_decode_payment_index(deserializer);
    var var_txid = sse_decode_String(deserializer);
    return PayOnchainResponse(index: var_index, txid: var_txid);
  }

  @protected
  Payment sse_decode_payment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_index = sse_decode_payment_index(deserializer);
    var var_kind = sse_decode_payment_kind(deserializer);
    var var_direction = sse_decode_payment_direction(deserializer);
    var var_invoice = sse_decode_opt_box_autoadd_invoice(deserializer);
    var var_txid = sse_decode_opt_String(deserializer);
    var var_replacement = sse_decode_opt_String(deserializer);
    var var_amountSat = sse_decode_opt_CastedPrimitive_u_64(deserializer);
    var var_feesSat = sse_decode_CastedPrimitive_u_64(deserializer);
    var var_status = sse_decode_payment_status(deserializer);
    var var_statusStr = sse_decode_String(deserializer);
    var var_note = sse_decode_opt_String(deserializer);
    var var_createdAt = sse_decode_CastedPrimitive_i_64(deserializer);
    var var_finalizedAt = sse_decode_opt_CastedPrimitive_i_64(deserializer);
    return Payment(
        index: var_index,
        kind: var_kind,
        direction: var_direction,
        invoice: var_invoice,
        txid: var_txid,
        replacement: var_replacement,
        amountSat: var_amountSat,
        feesSat: var_feesSat,
        status: var_status,
        statusStr: var_statusStr,
        note: var_note,
        createdAt: var_createdAt,
        finalizedAt: var_finalizedAt);
  }

  @protected
  PaymentDirection sse_decode_payment_direction(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return PaymentDirection.values[inner];
  }

  @protected
  PaymentIndex sse_decode_payment_index(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    return PaymentIndex(field0: var_field0);
  }

  @protected
  PaymentKind sse_decode_payment_kind(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return PaymentKind.values[inner];
  }

  @protected
  PaymentMethod sse_decode_payment_method(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_onchain(deserializer);
        return PaymentMethod_Onchain(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_invoice(deserializer);
        return PaymentMethod_Invoice(var_field0);
      case 2:
        return PaymentMethod_Offer();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  PaymentStatus sse_decode_payment_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return PaymentStatus.values[inner];
  }

  @protected
  PreflightCloseChannelResponse sse_decode_preflight_close_channel_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_feeEstimateSats = sse_decode_CastedPrimitive_u_64(deserializer);
    return PreflightCloseChannelResponse(feeEstimateSats: var_feeEstimateSats);
  }

  @protected
  PreflightOpenChannelRequest sse_decode_preflight_open_channel_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_valueSats = sse_decode_CastedPrimitive_u_64(deserializer);
    return PreflightOpenChannelRequest(valueSats: var_valueSats);
  }

  @protected
  PreflightOpenChannelResponse sse_decode_preflight_open_channel_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_feeEstimateSats = sse_decode_CastedPrimitive_u_64(deserializer);
    return PreflightOpenChannelResponse(feeEstimateSats: var_feeEstimateSats);
  }

  @protected
  PreflightPayInvoiceRequest sse_decode_preflight_pay_invoice_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_invoice = sse_decode_String(deserializer);
    var var_fallbackAmountSats =
        sse_decode_opt_CastedPrimitive_u_64(deserializer);
    return PreflightPayInvoiceRequest(
        invoice: var_invoice, fallbackAmountSats: var_fallbackAmountSats);
  }

  @protected
  PreflightPayInvoiceResponse sse_decode_preflight_pay_invoice_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_amountSats = sse_decode_CastedPrimitive_u_64(deserializer);
    var var_feesSats = sse_decode_CastedPrimitive_u_64(deserializer);
    return PreflightPayInvoiceResponse(
        amountSats: var_amountSats, feesSats: var_feesSats);
  }

  @protected
  PreflightPayOnchainRequest sse_decode_preflight_pay_onchain_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_String(deserializer);
    var var_amountSats = sse_decode_CastedPrimitive_u_64(deserializer);
    return PreflightPayOnchainRequest(
        address: var_address, amountSats: var_amountSats);
  }

  @protected
  PreflightPayOnchainResponse sse_decode_preflight_pay_onchain_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_high = sse_decode_opt_box_autoadd_fee_estimate(deserializer);
    var var_normal = sse_decode_fee_estimate(deserializer);
    var var_background = sse_decode_fee_estimate(deserializer);
    return PreflightPayOnchainResponse(
        high: var_high, normal: var_normal, background: var_background);
  }

  @protected
  RootSeed sse_decode_root_seed(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inner = sse_decode_RustOpaque_RootSeedRs(deserializer);
    return RootSeed(inner: var_inner);
  }

  @protected
  Settings sse_decode_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_locale = sse_decode_opt_String(deserializer);
    var var_fiatCurrency = sse_decode_opt_String(deserializer);
    var var_showSplitBalances = sse_decode_opt_box_autoadd_bool(deserializer);
    return Settings(
        locale: var_locale,
        fiatCurrency: var_fiatCurrency,
        showSplitBalances: var_showSplitBalances);
  }

  @protected
  SettingsDb sse_decode_settings_db(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inner = sse_decode_RustOpaque_SettingsDbRs(deserializer);
    return SettingsDb(inner: var_inner);
  }

  @protected
  ShortPayment sse_decode_short_payment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_index = sse_decode_payment_index(deserializer);
    var var_kind = sse_decode_payment_kind(deserializer);
    var var_direction = sse_decode_payment_direction(deserializer);
    var var_amountSat = sse_decode_opt_CastedPrimitive_u_64(deserializer);
    var var_status = sse_decode_payment_status(deserializer);
    var var_note = sse_decode_opt_String(deserializer);
    var var_createdAt = sse_decode_CastedPrimitive_i_64(deserializer);
    return ShortPayment(
        index: var_index,
        kind: var_kind,
        direction: var_direction,
        amountSat: var_amountSat,
        status: var_status,
        note: var_note,
        createdAt: var_createdAt);
  }

  @protected
  ShortPaymentAndIndex sse_decode_short_payment_and_index(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_vecIdx = sse_decode_CastedPrimitive_usize(deserializer);
    var var_payment = sse_decode_short_payment(deserializer);
    return ShortPaymentAndIndex(vecIdx: var_vecIdx, payment: var_payment);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  U8Array16 sse_decode_u_8_array_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array16(inner);
  }

  @protected
  U8Array32 sse_decode_u_8_array_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array32(inner);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  UpdatePaymentNote sse_decode_update_payment_note(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_index = sse_decode_payment_index(deserializer);
    var var_note = sse_decode_opt_String(deserializer);
    return UpdatePaymentNote(index: var_index, note: var_note);
  }

  @protected
  UserChannelId sse_decode_user_channel_id(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_8_array_16(deserializer);
    return UserChannelId(id: var_id);
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_CastedPrimitive_i_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(sseEncodeCastedPrimitiveI64(self), serializer);
  }

  @protected
  void sse_encode_CastedPrimitive_u_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(sseEncodeCastedPrimitiveU64(self), serializer);
  }

  @protected
  void sse_encode_CastedPrimitive_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(sseEncodeCastedPrimitiveU64(self), serializer);
  }

  @protected
  void sse_encode_RustOpaque_App(App self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AppImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_GDriveClientInner(
      GDriveClientInner self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as GDriveClientInnerImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_GDriveRestoreCandidateRs(
      GDriveRestoreCandidateRs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as GDriveRestoreCandidateRsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_GDriveRestoreClientRs(
      GDriveRestoreClientRs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as GDriveRestoreClientRsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_RootSeedRs(
      RootSeedRs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as RootSeedRsImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_SettingsDbRs(
      SettingsDbRs self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SettingsDbRsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_String_Sse(
      RustStreamSink<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_app_handle(AppHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_App(self.inner, serializer);
  }

  @protected
  void sse_encode_app_user_info(AppUserInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.userPk, serializer);
    sse_encode_String(self.nodePk, serializer);
    sse_encode_String(self.nodePkProof, serializer);
  }

  @protected
  void sse_encode_balance(Balance self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_CastedPrimitive_u_64(self.totalSats, serializer);
    sse_encode_CastedPrimitive_u_64(self.onchainSats, serializer);
    sse_encode_CastedPrimitive_u_64(self.lightningSats, serializer);
    sse_encode_CastedPrimitive_u_64(self.lightningSendableSats, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_app_handle(
      AppHandle self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_app_handle(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_close_channel_request(
      CloseChannelRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_close_channel_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_config(Config self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_config(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_create_invoice_request(
      CreateInvoiceRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_create_invoice_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_fee_estimate(
      FeeEstimate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_fee_estimate(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_g_drive_client(
      GDriveClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_g_drive_client(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_g_drive_o_auth_2_flow(
      GDriveOAuth2Flow self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_g_drive_o_auth_2_flow(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_g_drive_restore_candidate(
      GDriveRestoreCandidate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_g_drive_restore_candidate(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_g_drive_restore_client(
      GDriveRestoreClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_g_drive_restore_client(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_invoice(Invoice self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_invoice(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_onchain(Onchain self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_onchain(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_open_channel_request(
      OpenChannelRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_open_channel_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_pay_invoice_request(
      PayInvoiceRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_pay_invoice_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_pay_onchain_request(
      PayOnchainRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_pay_onchain_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_payment(Payment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_payment(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_payment_index(
      PaymentIndex self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_payment_index(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_preflight_open_channel_request(
      PreflightOpenChannelRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_preflight_open_channel_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_preflight_pay_invoice_request(
      PreflightPayInvoiceRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_preflight_pay_invoice_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_preflight_pay_onchain_request(
      PreflightPayOnchainRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_preflight_pay_onchain_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_root_seed(
      RootSeed self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_root_seed(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_settings(
      Settings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_settings_db(
      SettingsDb self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_settings_db(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_short_payment_and_index(
      ShortPaymentAndIndex self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_short_payment_and_index(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_update_payment_note(
      UpdatePaymentNote self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_update_payment_note(self, serializer);
  }

  @protected
  void sse_encode_client_payment_id(
      ClientPaymentId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_32(self.id, serializer);
  }

  @protected
  void sse_encode_close_channel_request(
      CloseChannelRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.channelId, serializer);
  }

  @protected
  void sse_encode_config(Config self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_deploy_env(self.deployEnv, serializer);
    sse_encode_network(self.network, serializer);
    sse_encode_String(self.gatewayUrl, serializer);
    sse_encode_bool(self.useSgx, serializer);
    sse_encode_String(self.baseAppDataDir, serializer);
    sse_encode_bool(self.useMockSecretStore, serializer);
    sse_encode_String(self.userAgent, serializer);
  }

  @protected
  void sse_encode_confirmation_priority(
      ConfirmationPriority self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_create_invoice_request(
      CreateInvoiceRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.expirySecs, serializer);
    sse_encode_opt_CastedPrimitive_u_64(self.amountSats, serializer);
    sse_encode_opt_String(self.description, serializer);
  }

  @protected
  void sse_encode_create_invoice_response(
      CreateInvoiceResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_invoice(self.invoice, serializer);
  }

  @protected
  void sse_encode_deploy_env(DeployEnv self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_fee_estimate(FeeEstimate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_CastedPrimitive_u_64(self.amountSats, serializer);
  }

  @protected
  void sse_encode_fiat_rate(FiatRate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.fiat, serializer);
    sse_encode_f_64(self.rate, serializer);
  }

  @protected
  void sse_encode_fiat_rates(FiatRates self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_CastedPrimitive_i_64(self.timestampMs, serializer);
    sse_encode_list_fiat_rate(self.rates, serializer);
  }

  @protected
  void sse_encode_g_drive_client(GDriveClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_GDriveClientInner(self.inner, serializer);
  }

  @protected
  void sse_encode_g_drive_o_auth_2_flow(
      GDriveOAuth2Flow self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.clientId, serializer);
    sse_encode_String(self.codeVerifier, serializer);
    sse_encode_String(self.redirectUri, serializer);
    sse_encode_String(self.redirectUriScheme, serializer);
    sse_encode_String(self.url, serializer);
  }

  @protected
  void sse_encode_g_drive_restore_candidate(
      GDriveRestoreCandidate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_GDriveRestoreCandidateRs(self.inner, serializer);
  }

  @protected
  void sse_encode_g_drive_restore_client(
      GDriveRestoreClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_GDriveRestoreClientRs(self.inner, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_invoice(Invoice self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.string, serializer);
    sse_encode_opt_String(self.description, serializer);
    sse_encode_CastedPrimitive_i_64(self.createdAt, serializer);
    sse_encode_CastedPrimitive_i_64(self.expiresAt, serializer);
    sse_encode_opt_CastedPrimitive_u_64(self.amountSats, serializer);
    sse_encode_String(self.payeePubkey, serializer);
  }

  @protected
  void sse_encode_list_channels_response(
      ListChannelsResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_lx_channel_details(self.channels, serializer);
  }

  @protected
  void sse_encode_list_fiat_rate(
      List<FiatRate> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_fiat_rate(item, serializer);
    }
  }

  @protected
  void sse_encode_list_g_drive_restore_candidate(
      List<GDriveRestoreCandidate> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_g_drive_restore_candidate(item, serializer);
    }
  }

  @protected
  void sse_encode_list_lx_channel_details(
      List<LxChannelDetails> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_lx_channel_details(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_lx_channel_details(
      LxChannelDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.channelId, serializer);
    sse_encode_String(self.counterpartyNodeId, serializer);
    sse_encode_CastedPrimitive_u_64(self.channelValueSats, serializer);
    sse_encode_bool(self.isUsable, serializer);
    sse_encode_CastedPrimitive_u_64(self.ourBalanceSats, serializer);
    sse_encode_CastedPrimitive_u_64(self.outboundCapacitySats, serializer);
    sse_encode_CastedPrimitive_u_64(self.nextOutboundHtlcLimitSats, serializer);
    sse_encode_CastedPrimitive_u_64(self.theirBalanceSats, serializer);
    sse_encode_CastedPrimitive_u_64(self.inboundCapacitySats, serializer);
  }

  @protected
  void sse_encode_network(Network self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_node_info(NodeInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.nodePk, serializer);
    sse_encode_String(self.version, serializer);
    sse_encode_String(self.measurement, serializer);
    sse_encode_balance(self.balance, serializer);
  }

  @protected
  void sse_encode_onchain(Onchain self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
    sse_encode_opt_CastedPrimitive_u_64(self.amountSats, serializer);
    sse_encode_opt_String(self.label, serializer);
    sse_encode_opt_String(self.message, serializer);
  }

  @protected
  void sse_encode_open_channel_request(
      OpenChannelRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_user_channel_id(self.userChannelId, serializer);
    sse_encode_CastedPrimitive_u_64(self.valueSats, serializer);
  }

  @protected
  void sse_encode_open_channel_response(
      OpenChannelResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.channelId, serializer);
  }

  @protected
  void sse_encode_opt_CastedPrimitive_i_64(
      int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_CastedPrimitive_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_CastedPrimitive_u_64(
      int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_CastedPrimitive_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_CastedPrimitive_usize(
      int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_CastedPrimitive_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_app_handle(
      AppHandle? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_app_handle(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_fee_estimate(
      FeeEstimate? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_fee_estimate(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_invoice(
      Invoice? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_invoice(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_payment(
      Payment? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_payment(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_short_payment_and_index(
      ShortPaymentAndIndex? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_short_payment_and_index(self, serializer);
    }
  }

  @protected
  void sse_encode_pay_invoice_request(
      PayInvoiceRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.invoice, serializer);
    sse_encode_opt_CastedPrimitive_u_64(self.fallbackAmountSats, serializer);
    sse_encode_opt_String(self.note, serializer);
  }

  @protected
  void sse_encode_pay_invoice_response(
      PayInvoiceResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_payment_index(self.index, serializer);
  }

  @protected
  void sse_encode_pay_onchain_request(
      PayOnchainRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_client_payment_id(self.cid, serializer);
    sse_encode_String(self.address, serializer);
    sse_encode_CastedPrimitive_u_64(self.amountSats, serializer);
    sse_encode_confirmation_priority(self.priority, serializer);
    sse_encode_opt_String(self.note, serializer);
  }

  @protected
  void sse_encode_pay_onchain_response(
      PayOnchainResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_payment_index(self.index, serializer);
    sse_encode_String(self.txid, serializer);
  }

  @protected
  void sse_encode_payment(Payment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_payment_index(self.index, serializer);
    sse_encode_payment_kind(self.kind, serializer);
    sse_encode_payment_direction(self.direction, serializer);
    sse_encode_opt_box_autoadd_invoice(self.invoice, serializer);
    sse_encode_opt_String(self.txid, serializer);
    sse_encode_opt_String(self.replacement, serializer);
    sse_encode_opt_CastedPrimitive_u_64(self.amountSat, serializer);
    sse_encode_CastedPrimitive_u_64(self.feesSat, serializer);
    sse_encode_payment_status(self.status, serializer);
    sse_encode_String(self.statusStr, serializer);
    sse_encode_opt_String(self.note, serializer);
    sse_encode_CastedPrimitive_i_64(self.createdAt, serializer);
    sse_encode_opt_CastedPrimitive_i_64(self.finalizedAt, serializer);
  }

  @protected
  void sse_encode_payment_direction(
      PaymentDirection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_payment_index(PaymentIndex self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.field0, serializer);
  }

  @protected
  void sse_encode_payment_kind(PaymentKind self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_payment_method(PaymentMethod self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case PaymentMethod_Onchain(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_onchain(field0, serializer);
      case PaymentMethod_Invoice(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_invoice(field0, serializer);
      case PaymentMethod_Offer():
        sse_encode_i_32(2, serializer);
    }
  }

  @protected
  void sse_encode_payment_status(PaymentStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_preflight_close_channel_response(
      PreflightCloseChannelResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_CastedPrimitive_u_64(self.feeEstimateSats, serializer);
  }

  @protected
  void sse_encode_preflight_open_channel_request(
      PreflightOpenChannelRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_CastedPrimitive_u_64(self.valueSats, serializer);
  }

  @protected
  void sse_encode_preflight_open_channel_response(
      PreflightOpenChannelResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_CastedPrimitive_u_64(self.feeEstimateSats, serializer);
  }

  @protected
  void sse_encode_preflight_pay_invoice_request(
      PreflightPayInvoiceRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.invoice, serializer);
    sse_encode_opt_CastedPrimitive_u_64(self.fallbackAmountSats, serializer);
  }

  @protected
  void sse_encode_preflight_pay_invoice_response(
      PreflightPayInvoiceResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_CastedPrimitive_u_64(self.amountSats, serializer);
    sse_encode_CastedPrimitive_u_64(self.feesSats, serializer);
  }

  @protected
  void sse_encode_preflight_pay_onchain_request(
      PreflightPayOnchainRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
    sse_encode_CastedPrimitive_u_64(self.amountSats, serializer);
  }

  @protected
  void sse_encode_preflight_pay_onchain_response(
      PreflightPayOnchainResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_fee_estimate(self.high, serializer);
    sse_encode_fee_estimate(self.normal, serializer);
    sse_encode_fee_estimate(self.background, serializer);
  }

  @protected
  void sse_encode_root_seed(RootSeed self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_RootSeedRs(self.inner, serializer);
  }

  @protected
  void sse_encode_settings(Settings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.locale, serializer);
    sse_encode_opt_String(self.fiatCurrency, serializer);
    sse_encode_opt_box_autoadd_bool(self.showSplitBalances, serializer);
  }

  @protected
  void sse_encode_settings_db(SettingsDb self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_SettingsDbRs(self.inner, serializer);
  }

  @protected
  void sse_encode_short_payment(ShortPayment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_payment_index(self.index, serializer);
    sse_encode_payment_kind(self.kind, serializer);
    sse_encode_payment_direction(self.direction, serializer);
    sse_encode_opt_CastedPrimitive_u_64(self.amountSat, serializer);
    sse_encode_payment_status(self.status, serializer);
    sse_encode_opt_String(self.note, serializer);
    sse_encode_CastedPrimitive_i_64(self.createdAt, serializer);
  }

  @protected
  void sse_encode_short_payment_and_index(
      ShortPaymentAndIndex self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_CastedPrimitive_usize(self.vecIdx, serializer);
    sse_encode_short_payment(self.payment, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_u_8_array_16(U8Array16 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_u_8_array_32(U8Array32 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_update_payment_note(
      UpdatePaymentNote self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_payment_index(self.index, serializer);
    sse_encode_opt_String(self.note, serializer);
  }

  @protected
  void sse_encode_user_channel_id(
      UserChannelId self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8_array_16(self.id, serializer);
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class AppImpl extends RustOpaque implements App {
  // Not to be used by end users
  AppImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AppImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        AppRs.instance.api.rust_arc_increment_strong_count_App,
    rustArcDecrementStrongCount:
        AppRs.instance.api.rust_arc_decrement_strong_count_App,
    rustArcDecrementStrongCountPtr:
        AppRs.instance.api.rust_arc_decrement_strong_count_AppPtr,
  );
}

@sealed
class GDriveClientInnerImpl extends RustOpaque implements GDriveClientInner {
  // Not to be used by end users
  GDriveClientInnerImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  GDriveClientInnerImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        AppRs.instance.api.rust_arc_increment_strong_count_GDriveClientInner,
    rustArcDecrementStrongCount:
        AppRs.instance.api.rust_arc_decrement_strong_count_GDriveClientInner,
    rustArcDecrementStrongCountPtr:
        AppRs.instance.api.rust_arc_decrement_strong_count_GDriveClientInnerPtr,
  );
}

@sealed
class GDriveRestoreCandidateRsImpl extends RustOpaque
    implements GDriveRestoreCandidateRs {
  // Not to be used by end users
  GDriveRestoreCandidateRsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  GDriveRestoreCandidateRsImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: AppRs
        .instance.api.rust_arc_increment_strong_count_GDriveRestoreCandidateRs,
    rustArcDecrementStrongCount: AppRs
        .instance.api.rust_arc_decrement_strong_count_GDriveRestoreCandidateRs,
    rustArcDecrementStrongCountPtr: AppRs.instance.api
        .rust_arc_decrement_strong_count_GDriveRestoreCandidateRsPtr,
  );
}

@sealed
class GDriveRestoreClientRsImpl extends RustOpaque
    implements GDriveRestoreClientRs {
  // Not to be used by end users
  GDriveRestoreClientRsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  GDriveRestoreClientRsImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: AppRs
        .instance.api.rust_arc_increment_strong_count_GDriveRestoreClientRs,
    rustArcDecrementStrongCount: AppRs
        .instance.api.rust_arc_decrement_strong_count_GDriveRestoreClientRs,
    rustArcDecrementStrongCountPtr: AppRs
        .instance.api.rust_arc_decrement_strong_count_GDriveRestoreClientRsPtr,
  );
}

@sealed
class RootSeedRsImpl extends RustOpaque implements RootSeedRs {
  // Not to be used by end users
  RootSeedRsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RootSeedRsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        AppRs.instance.api.rust_arc_increment_strong_count_RootSeedRs,
    rustArcDecrementStrongCount:
        AppRs.instance.api.rust_arc_decrement_strong_count_RootSeedRs,
    rustArcDecrementStrongCountPtr:
        AppRs.instance.api.rust_arc_decrement_strong_count_RootSeedRsPtr,
  );
}

@sealed
class SettingsDbRsImpl extends RustOpaque implements SettingsDbRs {
  // Not to be used by end users
  SettingsDbRsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SettingsDbRsImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        AppRs.instance.api.rust_arc_increment_strong_count_SettingsDbRs,
    rustArcDecrementStrongCount:
        AppRs.instance.api.rust_arc_decrement_strong_count_SettingsDbRs,
    rustArcDecrementStrongCountPtr:
        AppRs.instance.api.rust_arc_decrement_strong_count_SettingsDbRsPtr,
  );
}
